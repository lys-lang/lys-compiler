import src::compiler::messagecollector
import src::compiler::nodes
import src::parser::parser
import src::helpers
import src::stringbuilder
import src::compiler::linemapper
import src::compiler::stringlist

enum ModuleMap {
  EmptyModule
  Module(
    moduleName: string,
    path: string,
    source: string,
    ast: AstNode,
    document: CodeNode,
    phase: i32,
    errors: i32,
    lineMapper: LineMapper
  )
  ModuleCons(head: Module, tail: ModuleMap)
}

struct CompilerContext(
  messageCollector: MessageCollector,
  modules: ModuleMap,
  workingDirectory: string,
  paths: StringLinkedList
)

impl ModuleMap {
  #[method]
  fun findModuleByPath(self: ModuleMap, path: string): Module | EmptyModule = {
    match self {
      case x is EmptyModule -> x
      case theModule is Module ->
        if (theModule.path == path)
          theModule
        else
          EmptyModule
      case is ModuleCons(head, tail) ->
        if (head.path == path)
          head
        else
          tail.findModuleByPath(path)
    }
  }

  #[method]
  fun findModule(self: ModuleMap, moduleName: string): Module | EmptyModule = {
    match self {
      case x is EmptyModule -> x
      case theModule is Module ->
        if (theModule.moduleName == moduleName)
          theModule
        else
          EmptyModule
      case is ModuleCons(head, tail) ->
        if (head.moduleName == moduleName)
          head
        else
          tail.findModule(moduleName)
    }
  }
}

impl CompilerContext {
  fun apply(): CompilerContext = CompilerContext(MessageCollector(), EmptyModule, "/", None)

  #[method]
  fun getModuleByContent(self: CompilerContext, path: string, moduleName: string, source: string): Module = {
    val ast = parse(source, "Document", src::parser::lysgrammar::getGrammar())

    val module = match ast {
      case is Nil -> {
        self.messageCollector.append("Error parsing file: " ++ path, SourcePosition(path, 0x0, 0x1))
        Module(moduleName, path, source, Rule0, EmptyNode, 0, 1, LineMapper(source))
      }
      case ast is AstNode -> {
        val errors = collectErrors(ast, self.messageCollector, path)
        val newAst = src::compiler::phases::transformation::runPhase(path, moduleName, ast, self)
        val code = src::compiler::phases::cannonical::processNode(newAst)
        src::compiler::phases::semantic::runPhase(path, moduleName, code, self)
        Module(moduleName, path, source, newAst, code, 0, errors, LineMapper(source))
      }
    }

    match self.modules {
      case is EmptyModule -> self.modules = module
      else -> self.modules = ModuleCons(module, self.modules)
    }

    module
  }

  #[method]
  fun findModule(self: CompilerContext, moduleName: string): Module | EmptyModule =
    self.modules.findModule(moduleName)

  #[method]
  fun findModuleByPath(self: CompilerContext, path: string): Module | EmptyModule =
    self.modules.findModuleByPath(path)

  #[method]
  fun printErrors(self: CompilerContext, head: Message, sb: StringBuilder, path: string, counter: i32): i32 = match head {
    case is PositionCapableMessage(message, position) -> {
      if (position.path == path) {
        var module = self.findModuleByPath(path)

        match module {
          case module is Module -> {
            val start = module.lineMapper.getLine(position.start)
            val end = module.lineMapper.getLine(position.end)

            sb.append("  ")
              .append(string.stringify(counter + 1))
              .append(") ")
              .append(message)
              .append(" at ")
              .append(position.path)
              .append(":")
              .append(string.stringify(start.line + 0x1))
              .append(":")
              .append(string.stringify(position.start - start.start))
              .append("\n")

            if (start.line == end.line) {

              sb
                .append("\u001b[36m") // Gutter start
                .append("     │")
                .append("\u001b[0m\n") // reset

                .append("\u001b[36m") // Gutter start

              val loc = (start.line + 0x1) as i32

              if (loc < 10000) { sb.append(" ") }
              if (loc < 1000) { sb.append(" ") }
              if (loc < 100) { sb.append(" ") }
              if (loc < 10) { sb.append(" ") }

              sb.append(string.stringify(loc))
                .append("│ ")
                .append("\u001b[0m") // reset
                .append(module.source.substring(start.start as i32, start.end as i32))
                .append("\n")

              // TODO: trim trailing newline in the line source

              sb.append("\u001b[36m") // Gutter start
                .append("     │ ")
                .append("\u001b[0m") // reset
                .append(repeat(" ", (position.start - start.start) as i32))
                .append("\u001b[91m") // red color
                .append(repeat("^", (position.end - position.start) as i32))
                .append("\u001b[0m") // reset
                .append("\n")
            }

            sb.append("\n")

          }
          else -> {
            sb.append(string.stringify(counter + 1))
              .append(") ")
              .append(message)
              .append(" at ")
              .append(position.path)
              .append("\n")
          }
        }

        counter + 1
      } else {
        counter
      }
    }
    case is MessageCons(head, tail) -> {
      // Print the first errors, return the current number
      val newNumber = printErrors(self, tail, sb, path, counter)
      // Print the rest of the errors
      printErrors(self, head, sb, path, newNumber)
    }
    else -> counter
  }

  #[method]
  fun printErrors(self: CompilerContext, sb: StringBuilder): i32 = {
    var errors = 0
    var current = self.modules

    loop {
      match current {
        case is ModuleCons(head, tail) -> {
          val nsb = StringBuilder()
          errors = printErrors(self, self.messageCollector.headMessage, nsb, head.path, errors)

          if (!nsb.isEmpty()) {
            sb.appendln(head.path).append(nsb)
          }

          current = tail
          continue
        }
        case head is Module -> {
          val nsb = StringBuilder()
          errors = printErrors(self, self.messageCollector.headMessage, sb, head.path, errors)

          if (!nsb.isEmpty()) {
            sb.appendln(head.path).append(nsb)
          }

          break
        }
        case is EmptyModule -> break
      }
    }

    errors
  }
}