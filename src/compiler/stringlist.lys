// The language definitely needs type parameters

enum StringLinkedList {
  None
  Element(str: string, next: StringLinkedList)
}

impl StringLinkedList {
  #[method]
  fun append(self: StringLinkedList, str: string): StringLinkedList = {
    match self {
      case is None -> Element(str, None)
      case is Element(str, next) -> Element(str, next.append(str))
    }
  }

  #[method]
  fun prepend(self: StringLinkedList, str: string): StringLinkedList = {
    Element(str, self)
  }

  #[getter]
  fun head(self: StringLinkedList): StringLinkedList = self

  #[getter]
  fun tail(self: StringLinkedList): StringLinkedList = match self {
    case is None -> None
    case is Element(str, next) -> next
  }
}