import src::lexer::tokens
import src::parser::parser
import src::compiler::nodes
import src::compiler::context
import src::stringbuilder

fun runPhase(currentPath: string, currentModule: string, astNode: AstNode, ctx: CompilerContext): AstNode = {
  desugar(currentPath, currentModule, astNode, ctx)
}

private fun desugar(currentPath: string, currentModule: string, astNode: AstNode, ctx: CompilerContext): AstNode = match astNode {
  case x is Rule0 -> x
  case x is UnexpectedToken -> x
  case x is SyntaxError -> x
  case x is Leaf(token, value) -> x
  case old is AstCons(head, tail) -> {
    val nhead = desugar(currentPath, currentModule, head, ctx)
    val ntail = desugar(currentPath, currentModule, tail, ctx)

    if (nhead == head && ntail == tail)
      old
    else
      AstCons(nhead, ntail)
  }
  case node is Node(name, child, start, end) -> match name {
    case "EnumDirective" -> {
      val newNode = processEnum(currentPath, currentModule, child, ctx)
      desugar(currentPath, currentModule, newNode, ctx)
    }
    case "StructDeclaration" -> {
      val newNode = processStruct(currentPath, currentModule, child, ctx)
      desugar(currentPath, currentModule, newNode, ctx)
    }
    case "StructDirective" -> desugar(currentPath, currentModule, child, ctx)
    case "CaseIs" -> {
      var newChild = desugar(
        currentPath,
        currentModule,
        processDestructure(currentPath, currentModule, child, ctx),
        ctx
      )

      if (newChild == child)
        node
      else
        Node(name, newChild, start, end)
    }
    case "TypeDirective" -> {
      val modifier = first(child)
      val resto = rest(child)
      val nameNode = first(resto)
      val typeValue = rest(resto)

      match typeValue {
        case is Node(name, child) -> {
          if (name == "UnionType") {
            AstCons(
              node,
              processUnionType(currentPath, currentModule, nameNode, child, ctx)
            )
          } else {
            node
          }
        }
        else -> node
      }
    }
    else -> {
      val newChild = desugar(currentPath, currentModule, child, ctx)

      if (newChild == child)
        node
      else
        Node(name, newChild, start, end)
    }
  }
}

fun extractStructNames(node: AstNode): AstNode = match node {
  case node is Node(name, child) ->
    if ("StructDeclaration" == name)
      Node("Reference", Node("QName", first(child), 0x0, 0x0), 0x0, 0x0)
    else
      Rule0
  case is AstCons(head, tail) -> list(extractStructNames(head), extractStructNames(tail))
  else -> Rule0
}

fun extractStructs(currentPath: string, currentModule: string, node: AstNode, ctx: CompilerContext): AstNode = match node {
  case node is Node(name, child) ->
    if ("StructDeclaration" == name)
      processStruct(currentPath, currentModule, child, ctx)
    else
      Rule0
  case is AstCons(head, tail) -> list(
    extractStructs(currentPath, currentModule, head, ctx),
    extractStructs(currentPath, currentModule, tail, ctx)
  )
  else -> Rule0
}

fun processEnum(currentPath: string, currentModule: string, child: AstNode, ctx: CompilerContext): AstNode = {
  val modifier = first(child)
  var resto = rest(child)
  val nameNode = first(resto)
  val enumMembers = rest(resto)

  val typeName = textOf(nameNode)

  val structTypeNode = Node("UnionType", extractStructNames(enumMembers), 0x0, 0x0)

  val typeDirective = Node("TypeDirective",
    AstCons(
      modifier,
      AstCons(nameNode, structTypeNode)
    ),
    0x0,
    0x0
  )

  AstCons(typeDirective, extractStructs(currentPath, currentModule, enumMembers, ctx))
}


fun processParameters(node: AstNode, sb: StringBuilder, callRefs: StringBuilder, args: StringBuilder, typeName: string, index: i32): i32 = match node {
  case x is Node(name, child) -> {
    if (name == "Parameter") {
      val nameNode = first(child)
      val parameterName = textOf(nameNode)
      val typeNode = rest(child)
      val parameterType = textOf(typeNode)
      val indexs = string.stringify(index)

      callRefs
        .append("property$")
        .append(indexs)
        .append("($ref, ")
        .append(parameterName)
        .appendln(")")

      if (index != 0) {
        args.append(", ")
      }
      args.append(parameterName).append(": ").append(parameterType)

      if (getAstNodeName(typeNode) != "Reference") {
        sb.appendln("  #[getter]")
        sb.appendln("  fun " ++ parameterName ++ "(self: " ++ typeName ++ "): " ++ parameterType ++ " =")
        sb.appendln("    property$" ++ indexs ++ "(self)")

        sb.appendln("  #[setter]")
        sb.appendln("  fun " ++ parameterName ++ "(self: " ++ typeName ++ ", value: " ++ parameterType ++ "): void =")
        sb.appendln("    property$" ++ indexs ++ "(self, value)")

        sb.appendln("  #[inline]")
        sb.appendln("  private fun property$" ++ indexs ++ "(self: " ++ typeName ++ "): " ++ parameterType ++ " =")
        sb.appendln("    loadPropertyWithOffset$" ++ indexs ++ "(")
        sb.appendln("      self,")
        sb.appendln("      " ++ typeName ++ ".^property$" ++ indexs ++ "_offset")
        sb.appendln("    )")

        sb.appendln("  #[inline]")
        sb.appendln("  private fun property$" ++ indexs ++ "(self: " ++ typeName ++ ", value: " ++ parameterType ++ "): void =")
        sb.appendln("    storePropertyWithOffset$" ++ indexs ++ "(")
        sb.appendln("      self,")
        sb.appendln("      value,")
        sb.appendln("      " ++ typeName ++ ".^property$" ++ indexs ++ "_offset")
        sb.appendln("    )")

        sb.appendln("  #[inline]")
        sb.appendln("  private fun loadPropertyWithOffset$" ++ indexs ++ "(self: " ++ typeName ++ ", offset: u32): " ++ parameterType ++ " = %wasm {")
        sb.appendln("    (i64.load")
        sb.appendln("      (i32.add")
        sb.appendln("        (local.get $offset)")
        sb.appendln("        (call $addressFromRef (local.get $self))")
        sb.appendln("      )")
        sb.appendln("    )")
        sb.appendln("  }")

        sb.appendln("  #[inline]")
        sb.appendln("  private fun storePropertyWithOffset$" ++ indexs ++ "(self: " ++ typeName ++ ", value: " ++ parameterType ++ ", offset: u32): void = %wasm {")
        sb.appendln("    (i64.store")
        sb.appendln("      (i32.add")
        sb.appendln("        (local.get $offset)")
        sb.appendln("        (call $addressFromRef (local.get $self))")
        sb.appendln("      )")
        sb.appendln("      (local.get $value)")
        sb.appendln("    )")
        sb.appendln("  }")
      } else {
        sb.appendln("#[getter]")
        sb.appendln("fun " ++ parameterName ++ "(self: " ++ typeName ++ "): " ++ parameterType ++ " =")
        sb.appendln("  property$" ++ indexs ++ "(self)")

        sb.appendln("#[setter]")
        sb.appendln("fun " ++ parameterName ++ "(self: " ++ typeName ++ ", value: " ++ parameterType ++ "): void =")
        sb.appendln("  property$" ++ indexs ++ "(self, value)")

        sb.appendln("#[inline]")
        sb.appendln("private fun property$" ++ indexs ++ "(self: " ++ typeName ++ "): " ++ parameterType ++ " =")
        sb.appendln("  " ++ parameterType ++ ".load(self, " ++ typeName ++ ".^property$" ++ indexs ++ "_offset)")

        sb.appendln("#[inline]")
        sb.appendln("private fun property$" ++ indexs ++ "(self: " ++ typeName ++ ", value: " ++ parameterType ++ "): void =")
        sb.appendln("  " ++ parameterType ++ ".store(self, value, " ++ typeName ++ ".^property$" ++ indexs ++ "_offset)")
      }

      index + 1
    } else if (name == "(List)") {
      processParameters(child, sb, callRefs, args, typeName, index)
    } else index
  }
  case is AstCons(head, tail) -> {
    val newIndex = processParameters(head, sb, callRefs, args, typeName, index)
    processParameters(tail, sb, callRefs, args, typeName, newIndex)
  }
  else -> index
}

fun processStruct(currentPath: string, currentModule: string, child: AstNode, ctx: CompilerContext): AstNode = {
  val nameNode = first(child)
  val parameters = getChild(rest(child))

  val typeName = textOf(nameNode)

  val structTypeNode = Node("StructLiteral", parameters, 0x0, 0x0)

  val typeDirective = Node("TypeDirective",
    AstCons(
      // TODO: Make typeDirective private if original struct is private
      Node("NoModifier", Rule0, 0x0, 0x0),
      AstCons(nameNode, structTypeNode)
    ),
    0x0,
    0x0
  )

  val sb = StringBuilder()

  val callRefs = StringBuilder()
  val accessors = StringBuilder()
  val args = StringBuilder()

  processParameters(parameters, accessors, callRefs, args, typeName, 0)

  sb.appendln("impl Reference for " ++ typeName ++ " {")
  sb.appendln("  #[inline]")
  sb.appendln("  fun is(a: Self | ref): boolean = {")
  sb.appendln("    val discriminant: u32 = Self.^discriminant")
  sb.appendln("    ref.getDiscriminant(a) == discriminant")
  sb.appendln("  }")

  sb.appendln("  #[explicit]")
  sb.appendln("  #[inline]")
  sb.appendln("  fun as(lhs: Self): ref  = %wasm { (local.get $lhs) }")
  sb.appendln("}")

  sb.appendln("impl " ++ typeName ++ " {")
  sb.appendln("  #[inline]")
  sb.appendln("  private fun " ++ typeName ++ "$discriminant(): u64 = {")
  sb.appendln("    val discriminant: u32 = " ++ typeName ++ ".^discriminant")
  sb.appendln("    discriminant as u64 << 32")
  sb.appendln("  }")

  sb.appendln("  #[inline]")
  sb.append("  fun apply(").append(args).appendln("): " ++ typeName ++ " = {")
  sb.appendln("    var $ref = fromPointer(")
  sb.appendln("      system::core::memory::calloc(1 as u32, " ++ typeName ++ ".^allocationSize)")
  sb.appendln("    )")

  sb.append(callRefs)

  sb.appendln("    $ref")
  sb.appendln("  }")

  sb.appendln("  /**")
  sb.appendln("   * CPointer implicit coercion.")
  sb.appendln("   */")
  sb.appendln("  fun as(self: " ++ typeName ++ "): UnsafeCPointer = %wasm {")
  sb.appendln("    (call $addressFromRef (get_local $self))")
  sb.appendln("  }")

  sb.appendln("  private fun fromPointer(ptr: u32): " ++ typeName ++ " = %wasm {")
  sb.appendln("    (i64.or")
  sb.appendln("      (call $" ++ typeName ++ "$discriminant)")
  sb.appendln("      (i64.extend_u/i32 (local.get $ptr))")
  sb.appendln("    )")
  sb.appendln("  }")

  sb.appendln("  fun ==(a: " ++ typeName ++ ", b: " ++ typeName ++ "): boolean = %wasm {")
  sb.appendln("    (i64.eq")
  sb.appendln("      (local.get $a)")
  sb.appendln("      (local.get $b)")
  sb.appendln("    )")
  sb.appendln("  }")

  sb.appendln("  fun !=(a: " ++ typeName ++ ", b: " ++ typeName ++ "): boolean = %wasm {")
  sb.appendln("    (i64.ne")
  sb.appendln("      (local.get $a)")
  sb.appendln("      (local.get $b)")
  sb.appendln("    )")
  sb.appendln("  }")

  sb.append(accessors)

  sb.appendln("  fun store(lhs: ref, rhs: " ++ typeName ++ ", offset: u32): void = %wasm {")
  sb.appendln("    (i64.store")
  sb.appendln("      (i32.add")
  sb.appendln("        (local.get $offset)")
  sb.appendln("        (call $addressFromRef (local.get $lhs))")
  sb.appendln("      )")
  sb.appendln("      (local.get $rhs)")
  sb.appendln("    )")
  sb.appendln("  }")

  sb.appendln("  fun load(lhs: ref, offset: u32): " ++ typeName ++ " = %wasm {")
  sb.appendln("    (i64.load")
  sb.appendln("      (i32.add")
  sb.appendln("        (local.get $offset)")
  sb.appendln("        (call $addressFromRef (local.get $lhs))")
  sb.appendln("      )")
  sb.appendln("    )")
  sb.appendln("  }")
  sb.appendln("}")

  val mod = ctx.getModuleByContent(
    currentPath ++ "#" ++ typeName,
    currentModule ++ "#" ++ typeName,
    sb.toString()
  )

  AstCons(typeDirective, getChild(mod.ast))
}

// Prints all the references of a union type like:
// union.references.map('self is $').join(' || ')
fun appendIs(sb: StringBuilder, node: AstNode, count: i32): i32 = match node {
  case is AstCons(head, tail) -> {
    val newCount = appendIs(sb, head, count)
    appendIs(sb, tail, newCount)
  }
  case is Node(name, child) -> {
    if (name == "Reference") {
      if (count > 0) {
        sb.append(" || ")
      }

      sb.append(" self is ")
      sb.append(textOf(child))

      count + 1
    } else {
      count
    }
  }
  else -> count
}

fun appendUnionImpls(sb: StringBuilder, unionName: string, node: AstNode): void = {
  match node {
    case is AstCons(head, tail) -> {
      appendUnionImpls(sb, unionName, head)
      appendUnionImpls(sb, unionName, tail)
    }
    case is Node(name, child) -> {
      if (name == "Reference") {
        val referenceName = textOf(child)

        sb
          .append("impl ").append(referenceName).appendln("{")
          .append("  fun as(self: ").append(referenceName).append("): ").append(unionName).appendln(" = %wasm { (local.get $self) }")
          .appendln("}")
      }
    }
    else -> {/*this must be here because of a bug in the pattern matching*/}
  }
}


fun appendDestructureDeclaration(varNameIdentifier: AstNode, headReference: AstNode, wrappedNode: AstNode): AstNode = {
  match headReference {
    case is AstCons(head, tail) -> {
      appendDestructureDeclaration(varNameIdentifier, head, appendDestructureDeclaration(varNameIdentifier, tail, wrappedNode))
    }
    case is Node(name, child) -> {
      if (name == "NameIdentifier") {
        val referenceName = textOf(child)
        if (referenceName != "_") {
          val reference = Node("Reference", Node("QName", varNameIdentifier, 0x0, 0x0), 0x0, 0x0)

          val decl = Node("ValDeclaration", 
            AstCons(
              headReference,
              Node("AtomicExpression", AstCons(
                reference,
                Node("MemberExpression", AstCons(
                  Node("Operator", Leaf(Token(Operator, 0x0, 0x0), "."), 0x0, 0x0),
                  headReference
                ), 0x0, 0x0)
              ), 0x0, 0x0)
          ), 0x0, 0x0)

          match wrappedNode {
            case is Node(name, start, end) -> {
              if (name == "CodeBlock") {
                Node("CodeBlock", AstCons(decl, getChild(wrappedNode)), start, end)
              } else {
                Node("CodeBlock", AstCons(decl, wrappedNode), 0x0, 0x0)
              }
            }
            else -> Node("CodeBlock", AstCons(decl, wrappedNode), 0x0, 0x0)
          }
          
        } else {
          wrappedNode
        }
      } else {
        wrappedNode
      }
    }
    else -> wrappedNode
  }
}

fun processDestructure(currentPath: string, currentModule: string, patternMatcher: AstNode, ctx: CompilerContext): AstNode = {
  // Pattern matching destructuring is purely sugar syntax.

  // Sugar:
  //   case x is Node(a,b) -> (body)
  // Desugar:
  //   case x is Node -> {
  //     val a = x.a
  //     val b = x.b
  //     (body)
  //   }

  var resto = patternMatcher
  var declaredName = first(resto)
  var nameNode = getChild(declaredName)
  resto = rest(resto)
  val typeReferenceNode = first(resto)
  resto = rest(resto)
  val destructureNode = first(resto)
  val headDestructure = getChild(destructureNode)
  resto = rest(resto)
  val bodyNode = resto

  if (headDestructure is Rule0 && !(nameNode is Rule0)) {
    patternMatcher
  } else {
    // if the pattern matching has no declared name we must invent one.
    // since the name will be available in the body scope, we will use always
    // the $ identifier.
    if (nameNode is Rule0) {
      val start = match declaredName {
        case is Node(start) -> start
        else -> 0x0
      }
      val end = match declaredName {
        case is Node(end) -> end
        else -> 0x0
      }
      nameNode = Node("NameIdentifier",
        Leaf(
          Token(Identifier, start, end),
          "$"
        ), start, end
      )
      declaredName = Node("DeclaredName", nameNode, start, end)
    }

    val newBody = appendDestructureDeclaration(nameNode, headDestructure, bodyNode)

    AstCons(declaredName,
      AstCons(typeReferenceNode,
      AstCons(destructureNode, newBody)))
  }
}

fun processUnionType(currentPath: string, currentModule: string, nameNode: AstNode, unionType: AstNode, ctx: CompilerContext): AstNode = {
  val typeName = textOf(nameNode)

  val sb = StringBuilder()

  sb.appendln("impl Reference for " ++ typeName ++ " {")
  sb.appendln("  #[inline]")
  sb.appendln("  fun is(self: " ++ typeName ++ " | ref): boolean = {")

  appendIs(sb, getChild(unionType), 0)

  sb.appendln("  }")

  sb.appendln("  #[explicit]")
  sb.appendln("  #[inline]")
  sb.appendln("  fun as(self: " ++ typeName ++ "): ref  = %wasm { (local.get $self) }")
  sb.appendln("}")

  sb.appendln("impl " ++ typeName ++ " {")
  sb.appendln("  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs")
  sb.appendln("  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs")
  sb.appendln("  fun store(lhs: ref, rhs: " ++ typeName ++ ", offset: u32): void = %wasm {")
  sb.appendln("    (i64.store")
  sb.appendln("      (i32.add")
  sb.appendln("        (local.get $offset)")
  sb.appendln("        (call $addressFromRef (local.get $lhs))")
  sb.appendln("      )")
  sb.appendln("      (local.get $rhs)")
  sb.appendln("    )")
  sb.appendln("  }")

  sb.appendln("  fun load(lhs: ref, offset: u32): " ++ typeName ++ " = %wasm {")
  sb.appendln("    (i64.load")
  sb.appendln("      (i32.add")
  sb.appendln("        (local.get $offset)")
  sb.appendln("        (call $addressFromRef (local.get $lhs))")
  sb.appendln("      )")
  sb.appendln("    )")
  sb.appendln("  }")
  sb.appendln("}")

  appendUnionImpls(sb, typeName, getChild(unionType))

  val mod = ctx.getModuleByContent(
    currentPath ++ "#" ++ typeName,
    currentModule ++ "#" ++ typeName,
    sb.toString()
  )

  getChild(mod.ast)
}