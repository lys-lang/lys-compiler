import src::lexer::tokens
import src::parser::parser
import src::compiler::nodes


fun first(astNode: AstNode): AstNode = match astNode {
  case is AstCons(head, tail) -> head
  else -> astNode
}

fun second(astNode: AstNode): AstNode = first(rest(astNode))
fun third(astNode: AstNode): AstNode = second(rest(astNode))

fun rest(astNode: AstNode): AstNode = match astNode {
  case is AstCons(head, tail) -> tail
  else -> Rule0
}

fun nameOrEmpty(astNode: AstNode): NameIdentifierNode | EmptyNode =
  match processNode(astNode) {
    case name is NameIdentifierNode -> name
    else -> EmptyNode
  }

fun nameOrError(astNode: AstNode): NameIdentifierNode | ErrorNode =
  match processNode(astNode) {
    case name is NameIdentifierNode -> name
    else -> ErrorNode
  }

fun fqnOrEmpty(astNode: AstNode): QNameNode | ErrorNode =
  match processNode(astNode) {
    case name is QNameNode -> name
    else -> ErrorNode
  }

fun processNode(astNode: AstNode): CodeNode = match astNode {
  case is Rule0 -> EmptyNode
  case is UnexpectedToken -> EmptyNode
  case is SyntaxError -> EmptyNode
  case is Leaf(token, value) -> processNode(astNode, token, value)
  case is AstCons(head, tail) -> CodeNodeCons(processNode(head), processNode(tail))
  case is Node(name, child) -> match name {
    case "Document" -> Document(astNode, processNode(child))
    case "PrivateModifier" -> PrivateModifierNode(astNode)
    case "ImportDirective" -> ImportDirectiveNode(astNode, fqnOrEmpty(first(child)), nameOrEmpty(second(child)))
    case "NameIdentifier" -> processNode(child)
    case "QName" -> QNameNode(astNode, processNode(child))
    case "Type" -> processNode(child)
    case "Reference" -> ReferenceNode(astNode, fqnOrEmpty(child))
    case "TypeDirective" -> TypeDirectiveNode(astNode, nameOrError(first(child)), processNode(second(child)))
    case "VarDirective" -> {
      var e1 = processNode(first(child))
      val isPrivate = e1 is PrivateModifierNode

      var decl: VarDeclarationNode | EmptyNode = EmptyNode

      if (isPrivate) {
        match processNode(first(child)) {
          case x is VarDeclarationNode -> decl = x
          else -> { /* error */ }
        }
      } else {
        match processNode(first(rest(child))) {
          case x is VarDeclarationNode -> decl = x
          else -> { /* error */ }
        }
      }

      VarDirectiveNode(astNode, decl)
    }
    case "VarDeclaration" -> {
      var name = nameOrError(first(child))

      match rest(child) {
        case is AstCons(head, tail) -> VarDeclarationNode(astNode, name, processNode(head), processNode(tail))
        case ast is AstNode -> VarDeclarationNode(astNode, name, EmptyNode, processNode(ast))
      }
    }
    else -> {
      support::env::printf("No handler for " ++ name)
      EmptyNode
    }
  }
}


fun processNode(astNode: AstNode, node: Token, value: string): CodeNode = match node.tokenType {
  case is StringLiteral -> StringLiteralNode(astNode, value)
  case is Identifier -> NameIdentifierNode(astNode, value)
  case is Operator -> NameIdentifierNode(astNode, value)
  case is NumberLiteral -> FloatLiteralNode(astNode, value)
  case is Keyword -> match value {
    case "true" -> BooleanLiteralNode(astNode, true)
    case "false" -> BooleanLiteralNode(astNode, false)
    else -> EmptyNode
  }
  else -> EmptyNode
}