import support::env
import support::test
import src::main
import src::tokens

#[export]
fun test(): void = {
  START("Parser tests")

  case1()
  case2()
  case3()
  case4()
  whitespaces()
  strings()

  END()
}

fun case1(): void = {
  START("case1")

  val p = Parser("A  BCS C DEF ghi123  ")

  validateToken(p, Identifier, "A")
  validateToken(p, Whitespace, "  ")
  validateToken(p, Identifier, "BCS")
  validateToken(p, Whitespace, " ")
  validateToken(p, Identifier, "C")
  validateToken(p, Whitespace, " ")
  validateToken(p, Identifier, "DEF")
  validateToken(p, Whitespace, " ")
  validateToken(p, Identifier, "ghi123")
  validateToken(p, Whitespace, "  ")
  validateToken(p, EndOfFile, "")
  validateToken(p, EndOfFile, "")

  END()
}

fun case2(): void = {
  START("Empty case")

  val p = Parser("")

  validateToken(p, EndOfFile, "")
  validateToken(p, EndOfFile, "")

  END()
}

fun case3(): void = {
  START("case3")

  val p = Parser("a  AA asd")

  validateToken(p, Identifier, "a")
  validateToken(p, Whitespace, "  ")
  validateToken(p, Identifier, "AA")
  validateToken(p, Whitespace, " ")
  validateToken(p, Identifier, "asd")
  validateToken(p, EndOfFile, "")

  END()
}

fun case4(): void = {
  START("case4")

  val p = Parser("asd   AA a")

  validateToken(p, Identifier, "asd")
  validateToken(p, Whitespace, "   ")
  validateToken(p, Identifier, "AA")
  validateToken(p, Whitespace, " ")
  validateToken(p, Identifier, "a")
  validateToken(p, EndOfFile, "")

  END()
}

fun whitespaces(): void = {
  START("Whitespaces")

  val p = Parser(" \n\r\t")

  validateToken(p, Whitespace, " ")
  validateToken(p, NewLine, "\n\r")
  validateToken(p, Whitespace, "\t")
  validateToken(p, EndOfFile, "")

  END()
}


fun strings(): void = {
  START("Single quoted strings")

  val p = Parser(" 'asd' ''  ")

  validateToken(p, Whitespace, " ")
  validateToken(p, SingleStringLiteral, "'asd'")
  validateToken(p, Whitespace, " ")
  validateToken(p, SingleStringLiteral, "''")
  validateToken(p, Whitespace, "  ")
  validateToken(p, EndOfFile, "")

  END()
}

fun validateToken(p: Parser, expectedToken: TokenType, expectedValue: string): void = {
  match p.eat() {
    case is Token(tokenType, start, end) -> {
      val given = TokenType.toString(tokenType)
      val expected = TokenType.toString(expectedToken)
      mustEqual(given, expected, "yield " ++ expected)
      val givenValue = p.source.substring(start as i32, end as i32)
      mustEqual(givenValue, expectedValue, "value=" ++ expectedValue)
    }
  }
}
