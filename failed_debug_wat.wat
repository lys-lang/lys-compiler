(module
  (import "env" "segfault" (func $system::core::memory::segfault_1))
  (import "env" "putchar" (func $support::env::putchar_1 (param $char i32)))
  (import "env" "printf" (func $support::env::printf_1 (param $number i32) (param $extra i32)))
  (import "env" "printf" (func $support::env::printf_2 (param $number i32) (param $extra i32)))
  (import "env" "printf" (func $support::env::printf_3 (param $number i32) (param $extra f32)))
  (import "env" "printf" (func $support::env::printf_4 (param $number i32) (param $extra f64)))
  (import "env" "printf" (func $support::env::printf_5 (param $number i32) (param $extra i32)))
  (import "env" "printf" (func $support::env::printf_6 (param $number i32) (param $extra i32)))
  (import "env" "printf" (func $support::env::printf_7 (param $number i32) (param $extra i32)))
  (type $lys::i64_i64->void (func (param i64) (param i64)))
  (memory $mem 1)
  (export "memory" (memory $mem))
  (func $src::compiler::nodewalker::noop_1 (param $node i64) (param $context i64)
    (block $B1
      (nop)
    )
  )
  (func $src::compiler::nodewalker::walk_1 (param $node i64) (param $context i64) (param $onEnter i32) (param $onLeave i32)
    (local $src::compiler::nodewalker::head i64)
    (local $src::compiler::nodewalker::tail i64)
    (local $src::compiler::nodewalker::headDirective i64)
    (local $src::compiler::nodewalker::parameters i64)
    (local $src::compiler::nodewalker::returnType i64)
    (local $src::compiler::nodewalker::effect i64)
    (local $src::compiler::nodewalker::names i64)
    (local $src::compiler::nodewalker::variable i64)
    (local $src::compiler::nodewalker::headStatement i64)
    (local $src::compiler::nodewalker::lhs i64)
    (local $src::compiler::nodewalker::operator i64)
    (local $src::compiler::nodewalker::rhs i64)
    (local $src::compiler::nodewalker::decoratorName i64)
    (local $src::compiler::nodewalker::headArgument i64)
    (local $src::compiler::nodewalker::parameterName i64)
    (local $src::compiler::nodewalker::parameterType i64)
    (local $src::compiler::nodewalker::functionName i64)
    (local $src::compiler::nodewalker::headParameter i64)
    (local $src::compiler::nodewalker::returnType_1 i64)
    (local $src::compiler::nodewalker::body i64)
    (local $src::compiler::nodewalker::name i64)
    (local $src::compiler::nodewalker::value i64)
    (local $src::compiler::nodewalker::headNames i64)
    (local $src::compiler::nodewalker::name_1 i64)
    (local $src::compiler::nodewalker::typeDecl i64)
    (local $src::compiler::nodewalker::value_1 i64)
    (local $src::compiler::nodewalker::lhs_1 i64)
    (local $src::compiler::nodewalker::rhs_1 i64)
    (local $src::compiler::nodewalker::baseImpl i64)
    (local $src::compiler::nodewalker::targetImpl i64)
    (local $src::compiler::nodewalker::headDirective_1 i64)
    (local $src::compiler::nodewalker::module i64)
    (local $src::compiler::nodewalker::alias i64)
    (local $src::compiler::nodewalker::modifier i64)
    (local $src::compiler::nodewalker::decl i64)
    (local $src::compiler::nodewalker::headDecorator i64)
    (local $src::compiler::nodewalker::modifier_1 i64)
    (local $src::compiler::nodewalker::function i64)
    (local $src::compiler::nodewalker::effectDecl i64)
    (local $src::compiler::nodewalker::functionName_1 i64)
    (local $src::compiler::nodewalker::headFun i64)
    (local $src::compiler::nodewalker::modifier_2 i64)
    (local $src::compiler::nodewalker::decl_1 i64)
    (local $src::compiler::nodewalker::modifier_3 i64)
    (local $src::compiler::nodewalker::name_2 i64)
    (local $src::compiler::nodewalker::declType i64)
    (local $src::compiler::nodewalker::modifier_4 i64)
    (local $src::compiler::nodewalker::name_3 i64)
    (local $src::compiler::nodewalker::headDirective_2 i64)
    (local $src::compiler::nodewalker::modifier_5 i64)
    (local $src::compiler::nodewalker::name_4 i64)
    (local $src::compiler::nodewalker::headDeclaration i64)
    (local $src::compiler::nodewalker::headParameter_1 i64)
    (local $src::compiler::nodewalker::headArgument_1 i64)
    (local $src::compiler::nodewalker::resolvedFunction i64)
    (local $src::compiler::nodewalker::headArgument_2 i64)
    (local $src::compiler::nodewalker::resolvedFunction_1 i64)
    (local $src::compiler::nodewalker::functionNode i64)
    (local $src::compiler::nodewalker::headArgument_3 i64)
    (local $src::compiler::nodewalker::resolvedFunction_2 i64)
    (local $src::compiler::nodewalker::expression i64)
    (local $src::compiler::nodewalker::lhs_2 i64)
    (local $src::compiler::nodewalker::operator_1 i64)
    (local $src::compiler::nodewalker::rhs_2 i64)
    (local $src::compiler::nodewalker::lhs_3 i64)
    (local $src::compiler::nodewalker::rhs_3 i64)
    (local $src::compiler::nodewalker::lhs_4 i64)
    (local $src::compiler::nodewalker::rhs_4 i64)
    (local $src::compiler::nodewalker::operator_2 i64)
    (local $src::compiler::nodewalker::rhs_5 i64)
    (local $src::compiler::nodewalker::symbol i64)
    (local $src::compiler::nodewalker::headArgument_4 i64)
    (local $src::compiler::nodewalker::headAtom i64)
    (local $src::compiler::nodewalker::condition i64)
    (local $src::compiler::nodewalker::truePart i64)
    (local $src::compiler::nodewalker::falsePart i64)
    (local $src::compiler::nodewalker::headType i64)
    (local $src::compiler::nodewalker::headType_1 i64)
    (local $src::compiler::nodewalker::name_5 i64)
    (local $src::compiler::nodewalker::headParameter_2 i64)
    (local $src::compiler::nodewalker::name_6 i64)
    (local $src::compiler::nodewalker::lhs_5 i64)
    (local $src::compiler::nodewalker::headMatcher i64)
    (local $src::compiler::nodewalker::declaredName i64)
    (local $src::compiler::nodewalker::condition_1 i64)
    (local $src::compiler::nodewalker::body_1 i64)
    (local $src::compiler::nodewalker::declaredName_1 i64)
    (local $src::compiler::nodewalker::typeReference i64)
    (local $src::compiler::nodewalker::headDeconstruct i64)
    (local $src::compiler::nodewalker::body_2 i64)
    (local $src::compiler::nodewalker::literal i64)
    (local $src::compiler::nodewalker::body_3 i64)
    (local $src::compiler::nodewalker::declaredName_2 i64)
    (local $src::compiler::nodewalker::body_4 i64)
    (local $src::compiler::nodewalker::expression_1 i64)
    (local $var$99 i64)
    (block $B1
      (call_indirect (type $lys::i64_i64->void) (local.get $node) (local.get $context) (local.get $onEnter))
      (block $B49
          (local.set $var$99 (local.get $node))
          (block $B49_0
              (block $B49_1
                  (block $B49_2
                      (block $B49_3
                          (block $B49_4
                              (block $B49_5
                                  (block $B49_6
                                      (block $B49_7
                                          (block $B49_8
                                              (block $B49_9
                                                  (block $B49_10
                                                      (block $B49_11
                                                          (block $B49_12
                                                              (block $B49_13
                                                                  (block $B49_14
                                                                      (block $B49_15
                                                                          (block $B49_16
                                                                              (block $B49_17
                                                                                  (block $B49_18
                                                                                      (block $B49_19
                                                                                          (block $B49_20
                                                                                              (block $B49_21
                                                                                                  (block $B49_22
                                                                                                      (block $B49_23
                                                                                                          (block $B49_24
                                                                                                              (block $B49_25
                                                                                                                  (block $B49_26
                                                                                                                      (block $B49_27
                                                                                                                          (block $B49_28
                                                                                                                              (block $B49_29
                                                                                                                                  (block $B49_30
                                                                                                                                      (block $B49_31
                                                                                                                                          (block $B49_32
                                                                                                                                              (block $B49_33
                                                                                                                                                  (block $B49_34
                                                                                                                                                      (block $B49_35
                                                                                                                                                          (block $B49_36
                                                                                                                                                              (block $B49_37
                                                                                                                                                                  (block $B49_38
                                                                                                                                                                      (block $B49_39
                                                                                                                                                                          (block $B49_40
                                                                                                                                                                              (block $B49_41
                                                                                                                                                                                  (block $B49_42
                                                                                                                                                                                      (block $B49_43
                                                                                                                                                                                          (block $B49_44
                                                                                                                                                                                              (block $B49_45
                                                                                                                                                                                                  (block $B49_46
                                                                                                                                                                                                      (br_if $B49_0 (call $src::compiler::nodes::CodeNodeCons.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_1 (call $src::compiler::nodes::Document.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_2 (call $src::compiler::nodes::FunctionTypeNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_3 (call $src::compiler::nodes::QNameNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_4 (call $src::compiler::nodes::ReferenceNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_5 (call $src::compiler::nodes::BlockNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_6 (call $src::compiler::nodes::MemberNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_7 (call $src::compiler::nodes::DecoratorNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_8 (call $src::compiler::nodes::ParameterNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_9 (call $src::compiler::nodes::FunctionNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_10 (call $src::compiler::nodes::NameLiteralPairNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_11 (call $src::compiler::nodes::StackLiteralNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_12 (call $src::compiler::nodes::VarDeclarationNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_13 (call $src::compiler::nodes::AssignmentNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_14 (call $src::compiler::nodes::ImplDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_15 (call $src::compiler::nodes::ImportDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_16 (call $src::compiler::nodes::StructDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_17 (call $src::compiler::nodes::FunDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_18 (call $src::compiler::nodes::EffectDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_19 (call $src::compiler::nodes::OverloadedFunDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_20 (call $src::compiler::nodes::VarDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_21 (call $src::compiler::nodes::TypeDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_22 (call $src::compiler::nodes::TraitDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_23 (call $src::compiler::nodes::EnumDirectiveNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_24 (call $src::compiler::nodes::StructTypeNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_25 (call $src::compiler::nodes::AbstractFunctionCallNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_26 (call $src::compiler::nodes::InjectedFunctionCallNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_27 (call $src::compiler::nodes::FunctionCallNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_28 (call $src::compiler::nodes::ParenExpressionNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_29 (call $src::compiler::nodes::BinaryExpressionNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_30 (call $src::compiler::nodes::AsExpressionNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_31 (call $src::compiler::nodes::IsExpressionNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_32 (call $src::compiler::nodes::UnaryExpressionNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_33 (call $src::compiler::nodes::WasmAtomNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_34 (call $src::compiler::nodes::WasmExpressionNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_35 (call $src::compiler::nodes::IfNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_36 (call $src::compiler::nodes::UnionTypeNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_37 (call $src::compiler::nodes::IntersectionTypeNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_38 (call $src::compiler::nodes::StructDeclarationNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_39 (call $src::compiler::nodes::EffectDeclarationNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_40 (call $src::compiler::nodes::PatternMatcherNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_41 (call $src::compiler::nodes::MatchConditionNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_42 (call $src::compiler::nodes::MatchCaseIsNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_43 (call $src::compiler::nodes::MatchLiteralNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_44 (call $src::compiler::nodes::MatchDefaultNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                      (br_if $B49_45 (call $src::compiler::nodes::LoopNode.is_1 (local.get $var$99)))
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (block $B48
                                                                                                                                                                                                      (nop)
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (br $B49)
                                                                                                                                                                                                )
                                                                                                                                                                                              (block $B47
                                                                                                                                                                                                  (local.set $src::compiler::nodewalker::expression_1 (call $src::compiler::nodes::LoopNode.expression_1 (local.get $var$99)))
                                                                                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::expression_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                                )
                                                                                                                                                                                              (br $B49)
                                                                                                                                                                                            )
                                                                                                                                                                                          (block $B46
                                                                                                                                                                                              (local.set $src::compiler::nodewalker::declaredName_2 (call $src::compiler::nodes::MatchDefaultNode.declaredName_1 (local.get $var$99)))
                                                                                                                                                                                              (local.set $src::compiler::nodewalker::body_4 (call $src::compiler::nodes::MatchDefaultNode.body_1 (local.get $var$99)))
                                                                                                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::declaredName_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::body_4) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                            )
                                                                                                                                                                                          (br $B49)
                                                                                                                                                                                        )
                                                                                                                                                                                      (block $B45
                                                                                                                                                                                          (local.set $src::compiler::nodewalker::literal (call $src::compiler::nodes::MatchLiteralNode.literal_1 (local.get $var$99)))
                                                                                                                                                                                          (local.set $src::compiler::nodewalker::body_3 (call $src::compiler::nodes::MatchLiteralNode.body_1 (local.get $var$99)))
                                                                                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::literal) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::body_3) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                        )
                                                                                                                                                                                      (br $B49)
                                                                                                                                                                                    )
                                                                                                                                                                                  (block $B44
                                                                                                                                                                                      (local.set $src::compiler::nodewalker::declaredName_1 (call $src::compiler::nodes::MatchCaseIsNode.declaredName_1 (local.get $var$99)))
                                                                                                                                                                                      (local.set $src::compiler::nodewalker::typeReference (call $src::compiler::nodes::MatchCaseIsNode.typeReference_1 (local.get $var$99)))
                                                                                                                                                                                      (local.set $src::compiler::nodewalker::headDeconstruct (call $src::compiler::nodes::MatchCaseIsNode.headDeconstruct_1 (local.get $var$99)))
                                                                                                                                                                                      (local.set $src::compiler::nodewalker::body_2 (call $src::compiler::nodes::MatchCaseIsNode.body_1 (local.get $var$99)))
                                                                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::declaredName_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::typeReference) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headDeconstruct) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::body_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                    )
                                                                                                                                                                                  (br $B49)
                                                                                                                                                                                )
                                                                                                                                                                              (block $B43
                                                                                                                                                                                  (local.set $src::compiler::nodewalker::declaredName (call $src::compiler::nodes::MatchConditionNode.declaredName_1 (local.get $var$99)))
                                                                                                                                                                                  (local.set $src::compiler::nodewalker::condition_1 (call $src::compiler::nodes::MatchConditionNode.condition_1 (local.get $var$99)))
                                                                                                                                                                                  (local.set $src::compiler::nodewalker::body_1 (call $src::compiler::nodes::MatchConditionNode.body_1 (local.get $var$99)))
                                                                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::declaredName) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::condition_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::body_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                                )
                                                                                                                                                                              (br $B49)
                                                                                                                                                                            )
                                                                                                                                                                          (block $B42
                                                                                                                                                                              (local.set $src::compiler::nodewalker::lhs_5 (call $src::compiler::nodes::PatternMatcherNode.lhs_1 (local.get $var$99)))
                                                                                                                                                                              (local.set $src::compiler::nodewalker::headMatcher (call $src::compiler::nodes::PatternMatcherNode.headMatcher_1 (local.get $var$99)))
                                                                                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::lhs_5) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headMatcher) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                            )
                                                                                                                                                                          (br $B49)
                                                                                                                                                                        )
                                                                                                                                                                      (block $B41
                                                                                                                                                                          (local.set $src::compiler::nodewalker::name_6 (call $src::compiler::nodes::EffectDeclarationNode.name_1 (local.get $var$99)))
                                                                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::name_6) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                        )
                                                                                                                                                                      (br $B49)
                                                                                                                                                                    )
                                                                                                                                                                  (block $B40
                                                                                                                                                                      (local.set $src::compiler::nodewalker::name_5 (call $src::compiler::nodes::StructDeclarationNode.name_1 (local.get $var$99)))
                                                                                                                                                                      (local.set $src::compiler::nodewalker::headParameter_2 (call $src::compiler::nodes::StructDeclarationNode.headParameter_1 (local.get $var$99)))
                                                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::name_5) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headParameter_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                    )
                                                                                                                                                                  (br $B49)
                                                                                                                                                                )
                                                                                                                                                              (block $B39
                                                                                                                                                                  (local.set $src::compiler::nodewalker::headType_1 (call $src::compiler::nodes::IntersectionTypeNode.headType_1 (local.get $var$99)))
                                                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headType_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                                )
                                                                                                                                                              (br $B49)
                                                                                                                                                            )
                                                                                                                                                          (block $B38
                                                                                                                                                              (local.set $src::compiler::nodewalker::headType (call $src::compiler::nodes::UnionTypeNode.headType_1 (local.get $var$99)))
                                                                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headType) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                            )
                                                                                                                                                          (br $B49)
                                                                                                                                                        )
                                                                                                                                                      (block $B37
                                                                                                                                                          (local.set $src::compiler::nodewalker::condition (call $src::compiler::nodes::IfNode.condition_1 (local.get $var$99)))
                                                                                                                                                          (local.set $src::compiler::nodewalker::truePart (call $src::compiler::nodes::IfNode.truePart_1 (local.get $var$99)))
                                                                                                                                                          (local.set $src::compiler::nodewalker::falsePart (call $src::compiler::nodes::IfNode.falsePart_1 (local.get $var$99)))
                                                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::condition) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::truePart) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::falsePart) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                        )
                                                                                                                                                      (br $B49)
                                                                                                                                                    )
                                                                                                                                                  (block $B36
                                                                                                                                                      (local.set $src::compiler::nodewalker::headAtom (call $src::compiler::nodes::WasmExpressionNode.headAtom_1 (local.get $var$99)))
                                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headAtom) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                    )
                                                                                                                                                  (br $B49)
                                                                                                                                                )
                                                                                                                                              (block $B35
                                                                                                                                                  (local.set $src::compiler::nodewalker::symbol (call $src::compiler::nodes::WasmAtomNode.symbol_1 (local.get $var$99)))
                                                                                                                                                  (local.set $src::compiler::nodewalker::headArgument_4 (call $src::compiler::nodes::WasmAtomNode.headArgument_1 (local.get $var$99)))
                                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headArgument_4) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                                )
                                                                                                                                              (br $B49)
                                                                                                                                            )
                                                                                                                                          (block $B34
                                                                                                                                              (local.set $src::compiler::nodewalker::operator_2 (call $src::compiler::nodes::UnaryExpressionNode.operator_1 (local.get $var$99)))
                                                                                                                                              (local.set $src::compiler::nodewalker::rhs_5 (call $src::compiler::nodes::UnaryExpressionNode.rhs_1 (local.get $var$99)))
                                                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::operator_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::rhs_5) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                            )
                                                                                                                                          (br $B49)
                                                                                                                                        )
                                                                                                                                      (block $B33
                                                                                                                                          (local.set $src::compiler::nodewalker::lhs_4 (call $src::compiler::nodes::IsExpressionNode.lhs_1 (local.get $var$99)))
                                                                                                                                          (local.set $src::compiler::nodewalker::rhs_4 (call $src::compiler::nodes::IsExpressionNode.rhs_1 (local.get $var$99)))
                                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::lhs_4) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::rhs_4) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                        )
                                                                                                                                      (br $B49)
                                                                                                                                    )
                                                                                                                                  (block $B32
                                                                                                                                      (local.set $src::compiler::nodewalker::lhs_3 (call $src::compiler::nodes::AsExpressionNode.lhs_1 (local.get $var$99)))
                                                                                                                                      (local.set $src::compiler::nodewalker::rhs_3 (call $src::compiler::nodes::AsExpressionNode.rhs_1 (local.get $var$99)))
                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::lhs_3) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::rhs_3) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                    )
                                                                                                                                  (br $B49)
                                                                                                                                )
                                                                                                                              (block $B31
                                                                                                                                  (local.set $src::compiler::nodewalker::lhs_2 (call $src::compiler::nodes::BinaryExpressionNode.lhs_1 (local.get $var$99)))
                                                                                                                                  (local.set $src::compiler::nodewalker::operator_1 (call $src::compiler::nodes::BinaryExpressionNode.operator_1 (local.get $var$99)))
                                                                                                                                  (local.set $src::compiler::nodewalker::rhs_2 (call $src::compiler::nodes::BinaryExpressionNode.rhs_1 (local.get $var$99)))
                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::lhs_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::operator_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::rhs_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                                )
                                                                                                                              (br $B49)
                                                                                                                            )
                                                                                                                          (block $B30
                                                                                                                              (local.set $src::compiler::nodewalker::expression (call $src::compiler::nodes::ParenExpressionNode.expression_1 (local.get $var$99)))
                                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::expression) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                            )
                                                                                                                          (br $B49)
                                                                                                                        )
                                                                                                                      (block $B29
                                                                                                                          (local.set $src::compiler::nodewalker::functionNode (call $src::compiler::nodes::FunctionCallNode.functionNode_1 (local.get $var$99)))
                                                                                                                          (local.set $src::compiler::nodewalker::headArgument_3 (call $src::compiler::nodes::FunctionCallNode.headArgument_1 (local.get $var$99)))
                                                                                                                          (local.set $src::compiler::nodewalker::resolvedFunction_2 (call $src::compiler::nodes::FunctionCallNode.resolvedFunction_1 (local.get $var$99)))
                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::functionNode) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headArgument_3) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                        )
                                                                                                                      (br $B49)
                                                                                                                    )
                                                                                                                  (block $B28
                                                                                                                      (local.set $src::compiler::nodewalker::headArgument_2 (call $src::compiler::nodes::InjectedFunctionCallNode.headArgument_1 (local.get $var$99)))
                                                                                                                      (local.set $src::compiler::nodewalker::resolvedFunction_1 (call $src::compiler::nodes::InjectedFunctionCallNode.resolvedFunction_1 (local.get $var$99)))
                                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headArgument_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                    )
                                                                                                                  (br $B49)
                                                                                                                )
                                                                                                              (block $B27
                                                                                                                  (local.set $src::compiler::nodewalker::headArgument_1 (call $src::compiler::nodes::AbstractFunctionCallNode.headArgument_1 (local.get $var$99)))
                                                                                                                  (local.set $src::compiler::nodewalker::resolvedFunction (call $src::compiler::nodes::AbstractFunctionCallNode.resolvedFunction_1 (local.get $var$99)))
                                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headArgument_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                                )
                                                                                                              (br $B49)
                                                                                                            )
                                                                                                          (block $B26
                                                                                                              (local.set $src::compiler::nodewalker::headParameter_1 (call $src::compiler::nodes::StructTypeNode.headParameter_1 (local.get $var$99)))
                                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headParameter_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                            )
                                                                                                          (br $B49)
                                                                                                        )
                                                                                                      (block $B25
                                                                                                          (local.set $src::compiler::nodewalker::modifier_5 (call $src::compiler::nodes::EnumDirectiveNode.modifier_1 (local.get $var$99)))
                                                                                                          (local.set $src::compiler::nodewalker::name_4 (call $src::compiler::nodes::EnumDirectiveNode.name_1 (local.get $var$99)))
                                                                                                          (local.set $src::compiler::nodewalker::headDeclaration (call $src::compiler::nodes::EnumDirectiveNode.headDeclaration_1 (local.get $var$99)))
                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::modifier_5) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::name_4) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headDeclaration) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                        )
                                                                                                      (br $B49)
                                                                                                    )
                                                                                                  (block $B24
                                                                                                      (local.set $src::compiler::nodewalker::modifier_4 (call $src::compiler::nodes::TraitDirectiveNode.modifier_1 (local.get $var$99)))
                                                                                                      (local.set $src::compiler::nodewalker::name_3 (call $src::compiler::nodes::TraitDirectiveNode.name_1 (local.get $var$99)))
                                                                                                      (local.set $src::compiler::nodewalker::headDirective_2 (call $src::compiler::nodes::TraitDirectiveNode.headDirective_1 (local.get $var$99)))
                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::modifier_4) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::name_3) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headDirective_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                    )
                                                                                                  (br $B49)
                                                                                                )
                                                                                              (block $B23
                                                                                                  (local.set $src::compiler::nodewalker::modifier_3 (call $src::compiler::nodes::TypeDirectiveNode.modifier_1 (local.get $var$99)))
                                                                                                  (local.set $src::compiler::nodewalker::name_2 (call $src::compiler::nodes::TypeDirectiveNode.name_1 (local.get $var$99)))
                                                                                                  (local.set $src::compiler::nodewalker::declType (call $src::compiler::nodes::TypeDirectiveNode.declType_1 (local.get $var$99)))
                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::modifier_3) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::name_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::declType) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                                )
                                                                                              (br $B49)
                                                                                            )
                                                                                          (block $B22
                                                                                              (local.set $src::compiler::nodewalker::modifier_2 (call $src::compiler::nodes::VarDirectiveNode.modifier_1 (local.get $var$99)))
                                                                                              (local.set $src::compiler::nodewalker::decl_1 (call $src::compiler::nodes::VarDirectiveNode.decl_1 (local.get $var$99)))
                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::modifier_2) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::decl_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                            )
                                                                                          (br $B49)
                                                                                        )
                                                                                      (block $B21
                                                                                          (local.set $src::compiler::nodewalker::functionName_1 (call $src::compiler::nodes::OverloadedFunDirectiveNode.functionName_1 (local.get $var$99)))
                                                                                          (local.set $src::compiler::nodewalker::headFun (call $src::compiler::nodes::OverloadedFunDirectiveNode.headFun_1 (local.get $var$99)))
                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::functionName_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headFun) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                        )
                                                                                      (br $B49)
                                                                                    )
                                                                                  (block $B20
                                                                                      (local.set $src::compiler::nodewalker::effectDecl (call $src::compiler::nodes::EffectDirectiveNode.effectDecl_1 (local.get $var$99)))
                                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::effectDecl) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                    )
                                                                                  (br $B49)
                                                                                )
                                                                              (block $B19
                                                                                  (local.set $src::compiler::nodewalker::headDecorator (call $src::compiler::nodes::FunDirectiveNode.headDecorator_1 (local.get $var$99)))
                                                                                  (local.set $src::compiler::nodewalker::modifier_1 (call $src::compiler::nodes::FunDirectiveNode.modifier_1 (local.get $var$99)))
                                                                                  (local.set $src::compiler::nodewalker::function (call $src::compiler::nodes::FunDirectiveNode.function_1 (local.get $var$99)))
                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headDecorator) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::modifier_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::function) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                                )
                                                                              (br $B49)
                                                                            )
                                                                          (block $B18
                                                                              (local.set $src::compiler::nodewalker::modifier (call $src::compiler::nodes::StructDirectiveNode.modifier_1 (local.get $var$99)))
                                                                              (local.set $src::compiler::nodewalker::decl (call $src::compiler::nodes::StructDirectiveNode.decl_1 (local.get $var$99)))
                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::modifier) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::decl) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                            )
                                                                          (br $B49)
                                                                        )
                                                                      (block $B17
                                                                          (local.set $src::compiler::nodewalker::module (call $src::compiler::nodes::ImportDirectiveNode.module_1 (local.get $var$99)))
                                                                          (local.set $src::compiler::nodewalker::alias (call $src::compiler::nodes::ImportDirectiveNode.alias_1 (local.get $var$99)))
                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::module) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::alias) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                        )
                                                                      (br $B49)
                                                                    )
                                                                  (block $B16
                                                                      (local.set $src::compiler::nodewalker::baseImpl (call $src::compiler::nodes::ImplDirectiveNode.baseImpl_1 (local.get $var$99)))
                                                                      (local.set $src::compiler::nodewalker::targetImpl (call $src::compiler::nodes::ImplDirectiveNode.targetImpl_1 (local.get $var$99)))
                                                                      (local.set $src::compiler::nodewalker::headDirective_1 (call $src::compiler::nodes::ImplDirectiveNode.headDirective_1 (local.get $var$99)))
                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::baseImpl) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::targetImpl) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headDirective_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                    )
                                                                  (br $B49)
                                                                )
                                                              (block $B15
                                                                  (local.set $src::compiler::nodewalker::lhs_1 (call $src::compiler::nodes::AssignmentNode.lhs_1 (local.get $var$99)))
                                                                  (local.set $src::compiler::nodewalker::rhs_1 (call $src::compiler::nodes::AssignmentNode.rhs_1 (local.get $var$99)))
                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::lhs_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::rhs_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                                )
                                                              (br $B49)
                                                            )
                                                          (block $B14
                                                              (local.set $src::compiler::nodewalker::name_1 (call $src::compiler::nodes::VarDeclarationNode.name_1 (local.get $var$99)))
                                                              (local.set $src::compiler::nodewalker::typeDecl (call $src::compiler::nodes::VarDeclarationNode.typeDecl_1 (local.get $var$99)))
                                                              (local.set $src::compiler::nodewalker::value_1 (call $src::compiler::nodes::VarDeclarationNode.value_1 (local.get $var$99)))
                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::name_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::typeDecl) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::value_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                            )
                                                          (br $B49)
                                                        )
                                                      (block $B13
                                                          (local.set $src::compiler::nodewalker::headNames (call $src::compiler::nodes::StackLiteralNode.headNames_1 (local.get $var$99)))
                                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headNames) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                        )
                                                      (br $B49)
                                                    )
                                                  (block $B12
                                                      (local.set $src::compiler::nodewalker::name (call $src::compiler::nodes::NameLiteralPairNode.name_1 (local.get $var$99)))
                                                      (local.set $src::compiler::nodewalker::value (call $src::compiler::nodes::NameLiteralPairNode.value_1 (local.get $var$99)))
                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::name) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::value) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                    )
                                                  (br $B49)
                                                )
                                              (block $B11
                                                  (local.set $src::compiler::nodewalker::functionName (call $src::compiler::nodes::FunctionNode.functionName_1 (local.get $var$99)))
                                                  (local.set $src::compiler::nodewalker::headParameter (call $src::compiler::nodes::FunctionNode.headParameter_1 (local.get $var$99)))
                                                  (local.set $src::compiler::nodewalker::returnType_1 (call $src::compiler::nodes::FunctionNode.returnType_1 (local.get $var$99)))
                                                  (local.set $src::compiler::nodewalker::body (call $src::compiler::nodes::FunctionNode.body_1 (local.get $var$99)))
                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::functionName) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headParameter) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::returnType_1) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::body) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                                )
                                              (br $B49)
                                            )
                                          (block $B10
                                              (local.set $src::compiler::nodewalker::parameterName (call $src::compiler::nodes::ParameterNode.parameterName_1 (local.get $var$99)))
                                              (local.set $src::compiler::nodewalker::parameterType (call $src::compiler::nodes::ParameterNode.parameterType_1 (local.get $var$99)))
                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::parameterName) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::parameterType) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                            )
                                          (br $B49)
                                        )
                                      (block $B9
                                          (local.set $src::compiler::nodewalker::decoratorName (call $src::compiler::nodes::DecoratorNode.decoratorName_1 (local.get $var$99)))
                                          (local.set $src::compiler::nodewalker::headArgument (call $src::compiler::nodes::DecoratorNode.headArgument_1 (local.get $var$99)))
                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::decoratorName) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headArgument) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                        )
                                      (br $B49)
                                    )
                                  (block $B8
                                      (local.set $src::compiler::nodewalker::lhs (call $src::compiler::nodes::MemberNode.lhs_1 (local.get $var$99)))
                                      (local.set $src::compiler::nodewalker::operator (call $src::compiler::nodes::MemberNode.operator_1 (local.get $var$99)))
                                      (local.set $src::compiler::nodewalker::rhs (call $src::compiler::nodes::MemberNode.rhs_1 (local.get $var$99)))
                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::lhs) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::rhs) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                    )
                                  (br $B49)
                                )
                              (block $B7
                                  (local.set $src::compiler::nodewalker::headStatement (call $src::compiler::nodes::BlockNode.headStatement_1 (local.get $var$99)))
                                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headStatement) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                                )
                              (br $B49)
                            )
                          (block $B6
                              (local.set $src::compiler::nodewalker::variable (call $src::compiler::nodes::ReferenceNode.variable_1 (local.get $var$99)))
                              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::variable) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                            )
                          (br $B49)
                        )
                      (block $B5
                          (local.set $src::compiler::nodewalker::names (call $src::compiler::nodes::QNameNode.names_1 (local.get $var$99)))
                          (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::names) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                        )
                      (br $B49)
                    )
                  (block $B4
                      (local.set $src::compiler::nodewalker::parameters (call $src::compiler::nodes::FunctionTypeNode.parameters_1 (local.get $var$99)))
                      (local.set $src::compiler::nodewalker::returnType (call $src::compiler::nodes::FunctionTypeNode.returnType_1 (local.get $var$99)))
                      (local.set $src::compiler::nodewalker::effect (call $src::compiler::nodes::FunctionTypeNode.effect_1 (local.get $var$99)))
                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::parameters) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::returnType) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                      (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::effect) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                    )
                  (br $B49)
                )
              (block $B3
                  (local.set $src::compiler::nodewalker::headDirective (call $src::compiler::nodes::Document.headDirective_1 (local.get $var$99)))
                  (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::headDirective) (local.get $context) (local.get $onEnter) (local.get $onLeave))
                )
              (br $B49)
            )
          (block $B2
              (local.set $src::compiler::nodewalker::head (call $src::compiler::nodes::CodeNodeCons.head_1 (local.get $var$99)))
              (local.set $src::compiler::nodewalker::tail (call $src::compiler::nodes::CodeNodeCons.tail_1 (local.get $var$99)))
              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::head) (local.get $context) (local.get $onEnter) (local.get $onLeave))
              (call $src::compiler::nodewalker::walk_1 (local.get $src::compiler::nodewalker::tail) (local.get $context) (local.get $onEnter) (local.get $onLeave))
            )
          (br $B49)
        )
      (call_indirect (type $lys::i64_i64->void) (local.get $node) (local.get $context) (local.get $onLeave))
    )
  )
  (data 0 (i32.const 34709) "J\00\00\00A\00 \00n\00a\00m\00e\00 \00i\00d\00e\00n\00t\00i\00f\00i\00e\00r\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00,\00 \00g\00o\00t\00:\00 \00\00")
  (data 0 (i32.const 34788) "R\00\00\00A\00n\00 \00s\00t\00r\00u\00c\00t\00 \00d\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00,\00 \00g\00o\00t\00:\00 \00\00")
  (data 0 (i32.const 34875) ">\00\00\00A\00 \00r\00e\00f\00e\00r\00e\00n\00c\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00,\00 \00g\00o\00t\00:\00 \00\00")
  (data 0 (i32.const 34942) "<\00\00\00A\00 \00f\00u\00n\00c\00t\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00,\00 \00g\00o\00t\00:\00 \00\00")
  (data 0 (i32.const 35007) "T\00\00\00A\00 \00f\00u\00l\00l\00y\00 \00q\00u\00a\00l\00i\00f\00i\00e\00d\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00,\00 \00g\00o\00t\00:\00 \00\00")
  (data 0 (i32.const 35096) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 35105) "\04\00\00\00A\00s\00\00")
  (data 0 (i32.const 35114) "\04\00\00\00I\00s\00\00")
  (data 0 (i32.const 35123) ">\00\00\00E\00r\00r\00o\00r\00 \00p\00r\00o\00c\00e\00s\00s\00i\00n\00g\00 \00b\00i\00n\00 \00o\00p\00 \00n\00a\00m\00e\00d\00:\00 \00\00")
  (data 0 (i32.const 35190) ".\00\00\00E\00r\00r\00o\00r\00 \00p\00r\00o\00c\00e\00s\00s\00i\00n\00g\00 \00b\00i\00n\00 \00o\00p\00\00")
  (data 0 (i32.const 35241) "\1a\00\00\00C\00a\00l\00l\00A\00r\00g\00u\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 35272) " \00\00\00M\00e\00m\00b\00e\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 35309) "\04\00\00\00[\00]\00\00")
  (data 0 (i32.const 35318) "\1e\00\00\00I\00n\00d\00e\00x\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 35353) "\1e\00\00\00N\00o\00 \00h\00a\00n\00d\00l\00e\00r\00 \00f\00o\00r\00 \00\00")
  (data 0 (i32.const 35388) "F\00\00\00N\00o\00 \00h\00a\00n\00d\00l\00e\00r\00 \00f\00o\00r\00 \00n\00o\00t\00 \00N\00o\00d\00e\00 \00n\00o\00r\00 \00A\00s\00t\00C\00o\00n\00s\00\00")
  (data 0 (i32.const 35463) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 35496) "\10\00\00\00D\00o\00c\00u\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 35517) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 35552) "\14\00\00\00N\00o\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 35577) "\1e\00\00\00I\00m\00p\00o\00r\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 35612) "\0a\00\00\00Q\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 35627) "\12\00\00\00U\00n\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 35650) " \00\00\00I\00n\00t\00e\00r\00s\00e\00c\00t\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 35687) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 35710) "\1e\00\00\00M\00a\00t\00c\00h\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 35745) "\1c\00\00\00T\00r\00a\00i\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 35778) " \00\00\00N\00e\00g\00N\00u\00m\00b\00e\00r\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 35815) "\18\00\00\00I\00f\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 35844) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 35857) "$\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00P\00a\00r\00a\00m\00s\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 35898) "\14\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00s\00\00")
  (data 0 (i32.const 35923) "\22\00\00\00T\00r\00a\00i\00t\00D\00e\00c\00l\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 35962) "\1c\00\00\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 35995) "\14\00\00\00R\00e\00t\00u\00r\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 36020) "\18\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00B\00o\00d\00y\00\00")
  (data 0 (i32.const 36049) "\16\00\00\00F\00u\00n\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 36076) "\16\00\00\00D\00e\00s\00t\00r\00u\00c\00t\00u\00r\00e\00\00")
  (data 0 (i32.const 36103) "\1c\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00d\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 36136) "\18\00\00\00D\00e\00c\00l\00a\00r\00e\00d\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 36165) "\0e\00\00\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 36184) "\12\00\00\00M\00a\00t\00c\00h\00B\00o\00d\00y\00\00")
  (data 0 (i32.const 36207) "\22\00\00\00C\00o\00n\00t\00i\00n\00u\00e\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 36246) "\1c\00\00\00B\00r\00e\00a\00k\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 36279) "\1c\00\00\00L\00o\00o\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 36312) "\12\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 36335) " \00\00\00A\00t\00o\00m\00i\00c\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 36372) "\1c\00\00\00W\00a\00s\00m\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 36405) "\16\00\00\00S\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 36432) "\22\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 36471) "\1c\00\00\00F\00u\00n\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 36504) "\1a\00\00\00S\00t\00r\00u\00c\00t\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 36535) "\1e\00\00\00U\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 36570) "\12\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00\00")
  (data 0 (i32.const 36593) "\1a\00\00\00E\00n\00u\00m\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 36624) "\1a\00\00\00I\00m\00p\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 36655) "\1e\00\00\00I\00n\00j\00e\00c\00t\00e\00d\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 36690) "\18\00\00\00S\00t\00a\00c\00k\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 36719) "\1e\00\00\00N\00a\00m\00e\00L\00i\00t\00e\00r\00a\00l\00P\00a\00i\00r\00\00")
  (data 0 (i32.const 36754) "\1e\00\00\00S\00t\00r\00u\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 36789) "\22\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 36828) "\08\00\00\00t\00r\00u\00e\00\00")
  (data 0 (i32.const 36841) "\1c\00\00\00B\00o\00o\00l\00e\00a\00n\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 36874) "\1e\00\00\00P\00a\00r\00e\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 36909) "\1a\00\00\00C\00a\00s\00e\00C\00o\00n\00d\00i\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 36940) "\16\00\00\00C\00a\00s\00e\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 36967) "\0c\00\00\00C\00a\00s\00e\00I\00s\00\00")
  (data 0 (i32.const 36984) "\10\00\00\00C\00a\00s\00e\00E\00l\00s\00e\00\00")
  (data 0 (i32.const 37005) "\18\00\00\00A\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 37034) "\18\00\00\00I\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 37063) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 37104) "\12\00\00\00C\00o\00d\00e\00B\00l\00o\00c\00k\00\00")
  (data 0 (i32.const 37127) "\0c\00\00\00(\00L\00i\00s\00t\00)\00\00")
  (data 0 (i32.const 37144) "\12\00\00\00T\00y\00p\00e\00P\00a\00r\00e\00n\00\00")
  (data 0 (i32.const 37167) "\1a\00\00\00T\00y\00p\00e\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 37198) "\18\00\00\00V\00a\00r\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 37227) "\18\00\00\00V\00a\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 37256) "\1c\00\00\00V\00a\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 37289) "\1c\00\00\00V\00a\00l\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 37322) "\1e\00\00\00N\00o\00 \00h\00a\00n\00d\00l\00e\00r\00 \00f\00o\00r\00 \00\00")
  (data 0 (i32.const 37357) "\08\00\00\00t\00r\00u\00e\00\00")
  (data 0 (i32.const 37370) "\0a\00\00\00f\00a\00l\00s\00e\00\00")
  (func $src::compiler::phases::cannonical::nameOrEmpty_1 (param $astNode i64) (result i64)
    (local $var$1 i64)
    (block $B1 (result i64)
      (local.set $var$1 (call $src::compiler::phases::cannonical::processNode_1 (local.get $astNode)))
      (block $B1_0
          (block $B1_1
              (br_if $B1_0 (call $src::compiler::nodes::NameIdentifierNode.is_1 (local.get $var$1)))
            )
          (call $src::compiler::nodes::EmptyNode.apply_1)
          (br $B1)
        )
      (local.get $var$1)
      (br $B1)
    )
  )
  (func $src::compiler::phases::cannonical::nameOrError_1 (param $astNode i64) (result i64)
    (local $src::compiler::phases::cannonical::x i64)
    (local $var$2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::cannonical::x (call $src::compiler::phases::cannonical::processNode_1 (local.get $astNode)))
      (block $B2 (result i64)
          (local.set $var$2 (local.get $src::compiler::phases::cannonical::x))
          (block $B2_0
              (block $B2_1
                  (br_if $B2_0 (call $src::compiler::nodes::NameIdentifierNode.is_1 (local.get $var$2)))
                )
              (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.++_1 (i64.const 0x0000000400008795) (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $src::compiler::phases::cannonical::x))))
              (br $B2)
            )
          (local.get $var$2)
          (br $B2)
        )
    )
  )
  (func $src::compiler::phases::cannonical::structOrError_1 (param $astNode i64) (result i64)
    (local $src::compiler::phases::cannonical::x_1 i64)
    (local $var$2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::cannonical::x_1 (call $src::compiler::phases::cannonical::processNode_1 (local.get $astNode)))
      (block $B2 (result i64)
          (local.set $var$2 (local.get $src::compiler::phases::cannonical::x_1))
          (block $B2_0
              (block $B2_1
                  (br_if $B2_0 (call $src::compiler::nodes::StructDeclarationNode.is_1 (local.get $var$2)))
                )
              (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.++_1 (i64.const 0x00000004000087e4) (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $src::compiler::phases::cannonical::x_1))))
              (br $B2)
            )
          (local.get $var$2)
          (br $B2)
        )
    )
  )
  (func $src::compiler::phases::cannonical::referenceOrError_1 (param $astNode i64) (result i64)
    (local $src::compiler::phases::cannonical::x_2 i64)
    (local $var$2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::cannonical::x_2 (call $src::compiler::phases::cannonical::processNode_1 (local.get $astNode)))
      (block $B2 (result i64)
          (local.set $var$2 (local.get $src::compiler::phases::cannonical::x_2))
          (block $B2_0
              (block $B2_1
                  (br_if $B2_0 (call $src::compiler::nodes::ReferenceNode.is_1 (local.get $var$2)))
                )
              (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.++_1 (i64.const 0x000000040000883b) (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $src::compiler::phases::cannonical::x_2))))
              (br $B2)
            )
          (local.get $var$2)
          (br $B2)
        )
    )
  )
  (func $src::compiler::phases::cannonical::funOrError_1 (param $astNode i64) (result i64)
    (local $src::compiler::phases::cannonical::x_3 i64)
    (local $var$2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::cannonical::x_3 (call $src::compiler::phases::cannonical::processNode_1 (local.get $astNode)))
      (block $B2 (result i64)
          (local.set $var$2 (local.get $src::compiler::phases::cannonical::x_3))
          (block $B2_0
              (block $B2_1
                  (br_if $B2_0 (call $src::compiler::nodes::FunctionNode.is_1 (local.get $var$2)))
                )
              (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.++_1 (i64.const 0x000000040000887e) (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $src::compiler::phases::cannonical::x_3))))
              (br $B2)
            )
          (local.get $var$2)
          (br $B2)
        )
    )
  )
  (func $src::compiler::phases::cannonical::fqnOrEmpty_1 (param $astNode i64) (result i64)
    (local $src::compiler::phases::cannonical::x_4 i64)
    (local $var$2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::cannonical::x_4 (call $src::compiler::phases::cannonical::processNode_1 (local.get $astNode)))
      (block $B2 (result i64)
          (local.set $var$2 (local.get $src::compiler::phases::cannonical::x_4))
          (block $B2_0
              (block $B2_1
                  (br_if $B2_0 (call $src::compiler::nodes::QNameNode.is_1 (local.get $var$2)))
                )
              (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.++_1 (i64.const 0x00000004000088bf) (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $src::compiler::phases::cannonical::x_4))))
              (br $B2)
            )
          (local.get $var$2)
          (br $B2)
        )
    )
  )
  (func $src::compiler::phases::cannonical::processBinaryExpression_1 (param $lhs i64) (param $astNode i64) (result i64)
    (local $src::compiler::phases::cannonical::name_6 i64)
    (local $src::compiler::phases::cannonical::child i64)
    (local $src::compiler::phases::cannonical::operator i64)
    (local $src::compiler::phases::cannonical::rhs i64)
    (local $src::compiler::phases::cannonical::rhs_1 i64)
    (local $src::compiler::phases::cannonical::rhs_2 i64)
    (local $src::compiler::phases::cannonical::head i64)
    (local $src::compiler::phases::cannonical::tail i64)
    (local $var$10 i64)
    (block $B1 (result i64)
      (block $B12 (result i64)
          (local.set $var$10 (local.get $astNode))
          (block $B12_0
              (block $B12_1
                  (block $B12_2
                      (br_if $B12_0 (call $src::parser::parser::Node.is_1 (local.get $var$10)))
                      (br_if $B12_1 (call $src::parser::parser::AstCons.is_1 (local.get $var$10)))
                    )
                  (block $B11 (result i64)
                      (call $src::compiler::nodes::BinaryExpressionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $lhs) (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (i64.const 0x0000000400008976)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $astNode)))
                    )
                  (br $B12)
                )
              (block $B10 (result i64)
                  (local.set $src::compiler::phases::cannonical::head (call $src::parser::parser::AstCons.head_1 (local.get $var$10)))
                  (local.set $src::compiler::phases::cannonical::tail (call $src::parser::parser::AstCons.tail_1 (local.get $var$10)))
                  (call $src::compiler::phases::cannonical::processBinaryExpression_1 (call $src::compiler::phases::cannonical::processBinaryExpression_1 (local.get $lhs) (local.get $src::compiler::phases::cannonical::head)) (local.get $src::compiler::phases::cannonical::tail))
                )
              (br $B12)
            )
          (block $B2 (result i64)
              (local.set $src::compiler::phases::cannonical::name_6 (call $src::parser::parser::Node.name_1 (local.get $var$10)))
              (local.set $src::compiler::phases::cannonical::child (call $src::parser::parser::Node.child_1 (local.get $var$10)))
              (if $IF3 (result i64) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::cannonical::name_6) (i64.const 0x0000000400008918))
                  (then
                    (block $B4 (result i64)
                        (local.set $src::compiler::phases::cannonical::operator (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child))))
                        (local.set $src::compiler::phases::cannonical::rhs (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child))))
                        (call $src::compiler::nodes::BinaryExpressionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $lhs) (local.get $src::compiler::phases::cannonical::operator) (local.get $src::compiler::phases::cannonical::rhs))
                      )
                  )
                  (else
                    (if $IF5 (result i64) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::cannonical::name_6) (i64.const 0x0000000400008921))
                        (then
                          (block $B6 (result i64)
                              (local.set $src::compiler::phases::cannonical::rhs_1 (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child)))
                              (call $src::compiler::nodes::AsExpressionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $lhs) (local.get $src::compiler::phases::cannonical::rhs_1))
                            )
                        )
                        (else
                          (if $IF7 (result i64) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::cannonical::name_6) (i64.const 0x000000040000892a))
                              (then
                                (block $B8 (result i64)
                                    (local.set $src::compiler::phases::cannonical::rhs_2 (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child)))
                                    (call $src::compiler::nodes::IsExpressionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $lhs) (local.get $src::compiler::phases::cannonical::rhs_2))
                                  )
                              )
                              (else
                                (block $B9 (result i64)
                                    (call $src::compiler::nodes::BinaryExpressionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $lhs) (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.++_1 (i64.const 0x0000000400008933) (local.get $src::compiler::phases::cannonical::name_6))) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child)))
                                  )
                              )
                            )
                        )
                      )
                  )
                )
            )
          (br $B12)
        )
    )
  )
  (func $src::compiler::phases::cannonical::processAtomicExpressionChild_1 (param $lhs i64) (param $astNode i64) (result i64)
    (local $src::compiler::phases::cannonical::head_1 i64)
    (local $src::compiler::phases::cannonical::tail_1 i64)
    (local $src::compiler::phases::cannonical::name_7 i64)
    (local $src::compiler::phases::cannonical::child_1 i64)
    (local $var$6 i64)
    (local $var$7 i64)
    (block $B1 (result i64)
      (block $B10 (result i64)
          (local.set $var$6 (local.get $astNode))
          (block $B10_0
              (block $B10_1
                  (block $B10_2
                      (br_if $B10_0 (call $src::parser::parser::AstCons.is_1 (local.get $var$6)))
                      (br_if $B10_1 (call $src::parser::parser::Node.is_1 (local.get $var$6)))
                    )
                  (block $B9 (result i64)
                      (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (i64.const 0x0000000400008a3c))
                    )
                  (br $B10)
                )
              (block $B3 (result i64)
                  (local.set $src::compiler::phases::cannonical::name_7 (call $src::parser::parser::Node.name_1 (local.get $var$6)))
                  (local.set $src::compiler::phases::cannonical::child_1 (call $src::parser::parser::Node.child_1 (local.get $var$6)))
                  (block $B8 (result i64)
                      (local.set $var$7 (local.get $src::compiler::phases::cannonical::name_7))
                      (block $B8_0
                          (block $B8_1
                              (block $B8_2
                                  (block $B8_3
                                      (br_if $B8_0 (call $system::core::string::string.==_1 (local.get $var$7) (i64.const 0x00000004000089a9)))
                                      (br_if $B8_1 (call $system::core::string::string.==_1 (local.get $var$7) (i64.const 0x00000004000089c8)))
                                      (br_if $B8_2 (call $system::core::string::string.==_1 (local.get $var$7) (i64.const 0x00000004000089f6)))
                                    )
                                  (block $B7 (result i64)
                                      (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.++_1 (i64.const 0x0000000400008a19) (local.get $src::compiler::phases::cannonical::name_7)))
                                    )
                                  (br $B8)
                                )
                              (block $B6 (result i64)
                                  (call $src::compiler::nodes::BinaryExpressionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $lhs) (call $src::compiler::nodes::NameIdentifierNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $src::compiler::phases::cannonical::child_1)) (i64.const 0x00000004000089ed)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_1)))
                                )
                              (br $B8)
                            )
                          (block $B5 (result i64)
                              (call $src::compiler::nodes::MemberNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $src::compiler::phases::cannonical::child_1)) (local.get $lhs) (call $src::parser::parser::textOf_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_1))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_1))))
                            )
                          (br $B8)
                        )
                      (block $B4 (result i64)
                          (call $src::compiler::nodes::FunctionCallNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $src::compiler::phases::cannonical::child_1)) (local.get $lhs) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_1)) (call $src::compiler::nodes::EmptyNode.apply_1))
                        )
                      (br $B8)
                    )
                )
              (br $B10)
            )
          (block $B2 (result i64)
              (local.set $src::compiler::phases::cannonical::head_1 (call $src::parser::parser::AstCons.head_1 (local.get $var$6)))
              (local.set $src::compiler::phases::cannonical::tail_1 (call $src::parser::parser::AstCons.tail_1 (local.get $var$6)))
              (call $src::compiler::phases::cannonical::processAtomicExpressionChild_1 (call $src::compiler::phases::cannonical::processAtomicExpressionChild_1 (local.get $lhs) (local.get $src::compiler::phases::cannonical::head_1)) (local.get $src::compiler::phases::cannonical::tail_1))
            )
          (br $B10)
        )
    )
  )
  (func $src::compiler::phases::cannonical::processTraitDirectives_1 (param $directive i64)
    (local $src::compiler::phases::cannonical::function i64)
    (local $src::compiler::phases::cannonical::body i64)
    (local $src::compiler::phases::cannonical::x_5 i64)
    (local $src::compiler::phases::cannonical::head_2 i64)
    (local $src::compiler::phases::cannonical::tail_2 i64)
    (local $var$6 i64)
    (local $var$7 i64)
    (block $B8
      (local.set $var$6 (local.get $directive))
      (block $B8_0
          (block $B8_1
              (br_if $B8_0 (call $src::compiler::nodes::FunDirectiveNode.is_1 (local.get $var$6)))
              (br_if $B8_1 (call $src::compiler::nodes::CodeNodeCons.is_1 (local.get $var$6)))
            )
          (block $B7
              (local.set $src::compiler::phases::cannonical::head_2 (call $src::compiler::nodes::CodeNodeCons.head_1 (local.get $var$6)))
              (local.set $src::compiler::phases::cannonical::tail_2 (call $src::compiler::nodes::CodeNodeCons.tail_1 (local.get $var$6)))
              (call $src::compiler::phases::cannonical::processTraitDirectives_1 (local.get $src::compiler::phases::cannonical::head_2))
              (call $src::compiler::phases::cannonical::processTraitDirectives_1 (local.get $src::compiler::phases::cannonical::tail_2))
            )
          (br $B8)
        )
      (block $B1
          (local.set $src::compiler::phases::cannonical::function (call $src::compiler::nodes::FunDirectiveNode.function_1 (local.get $var$6)))
          (block $B6
              (local.set $var$7 (local.get $src::compiler::phases::cannonical::function))
              (block $B6_0
                  (block $B6_1
                      (br_if $B6_0 (call $src::compiler::nodes::FunctionNode.is_1 (local.get $var$7)))
                    )
                  (block $B5
                      (nop)
                    )
                  (br $B6)
                )
              (block $B2
                  (local.set $src::compiler::phases::cannonical::body (call $src::compiler::nodes::FunctionNode.body_1 (local.get $var$7)))
                  (if $IF3 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::phases::cannonical::body))
                      (then
                        (block $B4
                            (local.set $src::compiler::phases::cannonical::x_5 (local.get $src::compiler::phases::cannonical::function))
                            (drop (call $src::compiler::nodes::CodeNode.annotate_1 (local.get $src::compiler::phases::cannonical::x_5) (call $src::compiler::annotations::SignatureDeclaration.apply_1)))
                          )
                      )
                      (else)
                    )
                )
              (br $B6)
            )
        )
      (br $B8)
    )
  )
  (func $src::compiler::phases::cannonical::processNode_1 (param $astNode i64) (result i64)
    (local $src::compiler::phases::cannonical::token i64)
    (local $src::compiler::phases::cannonical::value i64)
    (local $src::compiler::phases::cannonical::head_3 i64)
    (local $src::compiler::phases::cannonical::tail_3 i64)
    (local $src::compiler::phases::cannonical::name_8 i64)
    (local $src::compiler::phases::cannonical::child_2 i64)
    (local $src::compiler::phases::cannonical::modifier i64)
    (local $src::compiler::phases::cannonical::resto i64)
    (local $src::compiler::phases::cannonical::directives i64)
    (local $src::compiler::phases::cannonical::condition i64)
    (local $src::compiler::phases::cannonical::truePart i64)
    (local $src::compiler::phases::cannonical::falsePart i64)
    (local $src::compiler::phases::cannonical::resto_1 i64)
    (local $src::compiler::phases::cannonical::ret i64)
    (local $src::compiler::phases::cannonical::head_4 i64)
    (local $src::compiler::phases::cannonical::decorators i64)
    (local $src::compiler::phases::cannonical::resto_2 i64)
    (local $src::compiler::phases::cannonical::modifier_1 i64)
    (local $src::compiler::phases::cannonical::resto_3 i64)
    (local $src::compiler::phases::cannonical::name_9 i64)
    (local $src::compiler::phases::cannonical::typeParameters i64)
    (local $src::compiler::phases::cannonical::parameters i64)
    (local $src::compiler::phases::cannonical::returnType i64)
    (local $src::compiler::phases::cannonical::body_1 i64)
    (local $src::compiler::phases::cannonical::modifier_2 i64)
    (local $src::compiler::phases::cannonical::resto_4 i64)
    (local $src::compiler::phases::cannonical::firstName i64)
    (local $src::compiler::phases::cannonical::secondChild i64)
    (local $src::compiler::phases::cannonical::modifier_3 i64)
    (local $src::compiler::phases::cannonical::resto_5 i64)
    (local $src::compiler::phases::cannonical::resto_6 i64)
    (local $src::compiler::phases::cannonical::name_10 i64)
    (local $src::compiler::phases::cannonical::condition_1 i64)
    (local $src::compiler::phases::cannonical::body_2 i64)
    (local $src::compiler::phases::cannonical::literal i64)
    (local $src::compiler::phases::cannonical::body_3 i64)
    (local $src::compiler::phases::cannonical::resto_7 i64)
    (local $src::compiler::phases::cannonical::name_11 i64)
    (local $src::compiler::phases::cannonical::typeReference i64)
    (local $src::compiler::phases::cannonical::destructure i64)
    (local $src::compiler::phases::cannonical::body_4 i64)
    (local $src::compiler::phases::cannonical::name_12 i64)
    (local $src::compiler::phases::cannonical::body_5 i64)
    (local $src::compiler::phases::cannonical::modifier_4 i64)
    (local $src::compiler::phases::cannonical::resto_8 i64)
    (local $src::compiler::phases::cannonical::modifier_5 i64)
    (local $src::compiler::phases::cannonical::resto_9 i64)
    (local $src::compiler::phases::cannonical::decl i64)
    (local $src::compiler::phases::cannonical::modifier_6 i64)
    (local $src::compiler::phases::cannonical::resto_10 i64)
    (local $src::compiler::phases::cannonical::decl_1 i64)
    (local $src::compiler::phases::cannonical::name_13 i64)
    (local $src::compiler::phases::cannonical::node i64)
    (local $src::compiler::phases::cannonical::head_5 i64)
    (local $src::compiler::phases::cannonical::tail_4 i64)
    (local $src::compiler::phases::cannonical::name_14 i64)
    (local $src::compiler::phases::cannonical::head_6 i64)
    (local $src::compiler::phases::cannonical::tail_5 i64)
    (local $var$59 i64)
    (local $var$60 i64)
    (local $var$61 i64)
    (block $B36 (result i64)
      (local.set $var$59 (local.get $astNode))
      (block $B36_0
          (block $B36_1
              (block $B36_2
                  (block $B36_3
                      (block $B36_4
                          (block $B36_5
                              (br_if $B36_0 (call $src::parser::parser::Rule0.is_1 (local.get $var$59)))
                              (br_if $B36_1 (call $src::parser::parser::UnexpectedToken.is_1 (local.get $var$59)))
                              (br_if $B36_2 (call $src::parser::parser::SyntaxError.is_1 (local.get $var$59)))
                              (br_if $B36_3 (call $src::parser::parser::Leaf.is_1 (local.get $var$59)))
                              (br_if $B36_4 (call $src::parser::parser::AstCons.is_1 (local.get $var$59)))
                              (br_if $B36_5 (call $src::parser::parser::Node.is_1 (local.get $var$59)))
                            )
                          (block $B3 (result i64)
                              (local.set $src::compiler::phases::cannonical::name_8 (call $src::parser::parser::Node.name_1 (local.get $var$59)))
                              (local.set $src::compiler::phases::cannonical::child_2 (call $src::parser::parser::Node.child_1 (local.get $var$59)))
                              (block $B35 (result i64)
                                  (local.set $var$60 (local.get $src::compiler::phases::cannonical::name_8))
                                  (block $B35_0
                                      (block $B35_1
                                          (block $B35_2
                                              (block $B35_3
                                                  (block $B35_4
                                                      (block $B35_5
                                                          (block $B35_6
                                                              (block $B35_7
                                                                  (block $B35_8
                                                                      (block $B35_9
                                                                          (block $B35_10
                                                                              (block $B35_11
                                                                                  (block $B35_12
                                                                                      (block $B35_13
                                                                                          (block $B35_14
                                                                                              (block $B35_15
                                                                                                  (block $B35_16
                                                                                                      (block $B35_17
                                                                                                          (block $B35_18
                                                                                                              (block $B35_19
                                                                                                                  (block $B35_20
                                                                                                                      (block $B35_21
                                                                                                                          (block $B35_22
                                                                                                                              (block $B35_23
                                                                                                                                  (block $B35_24
                                                                                                                                      (block $B35_25
                                                                                                                                          (block $B35_26
                                                                                                                                              (block $B35_27
                                                                                                                                                  (block $B35_28
                                                                                                                                                      (block $B35_29
                                                                                                                                                          (block $B35_30
                                                                                                                                                              (block $B35_31
                                                                                                                                                                  (block $B35_32
                                                                                                                                                                      (block $B35_33
                                                                                                                                                                          (block $B35_34
                                                                                                                                                                              (block $B35_35
                                                                                                                                                                                  (block $B35_36
                                                                                                                                                                                      (block $B35_37
                                                                                                                                                                                          (block $B35_38
                                                                                                                                                                                              (block $B35_39
                                                                                                                                                                                                  (block $B35_40
                                                                                                                                                                                                      (block $B35_41
                                                                                                                                                                                                          (block $B35_42
                                                                                                                                                                                                              (block $B35_43
                                                                                                                                                                                                                  (block $B35_44
                                                                                                                                                                                                                      (block $B35_45
                                                                                                                                                                                                                          (block $B35_46
                                                                                                                                                                                                                              (block $B35_47
                                                                                                                                                                                                                                  (block $B35_48
                                                                                                                                                                                                                                      (block $B35_49
                                                                                                                                                                                                                                          (block $B35_50
                                                                                                                                                                                                                                              (block $B35_51
                                                                                                                                                                                                                                                  (block $B35_52
                                                                                                                                                                                                                                                      (block $B35_53
                                                                                                                                                                                                                                                          (block $B35_54
                                                                                                                                                                                                                                                              (block $B35_55
                                                                                                                                                                                                                                                                  (block $B35_56
                                                                                                                                                                                                                                                                      (block $B35_57
                                                                                                                                                                                                                                                                          (block $B35_58
                                                                                                                                                                                                                                                                              (block $B35_59
                                                                                                                                                                                                                                                                                  (block $B35_60
                                                                                                                                                                                                                                                                                      (block $B35_61
                                                                                                                                                                                                                                                                                          (block $B35_62
                                                                                                                                                                                                                                                                                              (br_if $B35_0 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008a87)))
                                                                                                                                                                                                                                                                                              (br_if $B35_1 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008aa8)))
                                                                                                                                                                                                                                                                                              (br_if $B35_2 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008abd)))
                                                                                                                                                                                                                                                                                              (br_if $B35_3 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008ae0)))
                                                                                                                                                                                                                                                                                              (br_if $B35_4 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008af9)))
                                                                                                                                                                                                                                                                                              (br_if $B35_5 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008b1c)))
                                                                                                                                                                                                                                                                                              (br_if $B35_6 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008b2b)))
                                                                                                                                                                                                                                                                                              (br_if $B35_7 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008b42)))
                                                                                                                                                                                                                                                                                              (br_if $B35_8 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008b67)))
                                                                                                                                                                                                                                                                                              (br_if $B35_9 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008b7e)))
                                                                                                                                                                                                                                                                                              (br_if $B35_10 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008ba1)))
                                                                                                                                                                                                                                                                                              (br_if $B35_11 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008bc2)))
                                                                                                                                                                                                                                                                                              (br_if $B35_12 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008be7)))
                                                                                                                                                                                                                                                                                              (br_if $B35_13 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008c04)))
                                                                                                                                                                                                                                                                                              (br_if $B35_14 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008c11)))
                                                                                                                                                                                                                                                                                              (br_if $B35_15 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008c3a)))
                                                                                                                                                                                                                                                                                              (br_if $B35_16 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008c53)))
                                                                                                                                                                                                                                                                                              (br_if $B35_17 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008c7a)))
                                                                                                                                                                                                                                                                                              (br_if $B35_18 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008c9b)))
                                                                                                                                                                                                                                                                                              (br_if $B35_19 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008cb4)))
                                                                                                                                                                                                                                                                                              (br_if $B35_20 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008cd1)))
                                                                                                                                                                                                                                                                                              (br_if $B35_21 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008cec)))
                                                                                                                                                                                                                                                                                              (br_if $B35_22 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008d07)))
                                                                                                                                                                                                                                                                                              (br_if $B35_23 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008d28)))
                                                                                                                                                                                                                                                                                              (br_if $B35_24 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008d45)))
                                                                                                                                                                                                                                                                                              (br_if $B35_25 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008d58)))
                                                                                                                                                                                                                                                                                              (br_if $B35_26 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008d6f)))
                                                                                                                                                                                                                                                                                              (br_if $B35_27 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008d96)))
                                                                                                                                                                                                                                                                                              (br_if $B35_28 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008db7)))
                                                                                                                                                                                                                                                                                              (br_if $B35_29 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008dd8)))
                                                                                                                                                                                                                                                                                              (br_if $B35_30 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008def)))
                                                                                                                                                                                                                                                                                              (br_if $B35_31 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008e14)))
                                                                                                                                                                                                                                                                                              (br_if $B35_32 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008e35)))
                                                                                                                                                                                                                                                                                              (br_if $B35_33 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008e50)))
                                                                                                                                                                                                                                                                                              (br_if $B35_34 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008e77)))
                                                                                                                                                                                                                                                                                              (br_if $B35_35 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008e98)))
                                                                                                                                                                                                                                                                                              (br_if $B35_36 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008eb7)))
                                                                                                                                                                                                                                                                                              (br_if $B35_37 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008eda)))
                                                                                                                                                                                                                                                                                              (br_if $B35_38 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008ef1)))
                                                                                                                                                                                                                                                                                              (br_if $B35_39 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008f10)))
                                                                                                                                                                                                                                                                                              (br_if $B35_40 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008f2f)))
                                                                                                                                                                                                                                                                                              (br_if $B35_41 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008f52)))
                                                                                                                                                                                                                                                                                              (br_if $B35_42 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008f6f)))
                                                                                                                                                                                                                                                                                              (br_if $B35_43 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008f92)))
                                                                                                                                                                                                                                                                                              (br_if $B35_44 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008fb5)))
                                                                                                                                                                                                                                                                                              (br_if $B35_45 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400008fe9)))
                                                                                                                                                                                                                                                                                              (br_if $B35_46 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x000000040000900a)))
                                                                                                                                                                                                                                                                                              (br_if $B35_47 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x000000040000902d)))
                                                                                                                                                                                                                                                                                              (br_if $B35_48 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x000000040000904c)))
                                                                                                                                                                                                                                                                                              (br_if $B35_49 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400009067)))
                                                                                                                                                                                                                                                                                              (br_if $B35_50 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400009078)))
                                                                                                                                                                                                                                                                                              (br_if $B35_51 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x000000040000908d)))
                                                                                                                                                                                                                                                                                              (br_if $B35_52 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x00000004000090aa)))
                                                                                                                                                                                                                                                                                              (br_if $B35_53 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x00000004000090c7)))
                                                                                                                                                                                                                                                                                              (br_if $B35_54 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x00000004000090f0)))
                                                                                                                                                                                                                                                                                              (br_if $B35_55 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400009107)))
                                                                                                                                                                                                                                                                                              (br_if $B35_56 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400009118)))
                                                                                                                                                                                                                                                                                              (br_if $B35_57 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x000000040000912f)))
                                                                                                                                                                                                                                                                                              (br_if $B35_58 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x000000040000914e)))
                                                                                                                                                                                                                                                                                              (br_if $B35_59 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x000000040000916b)))
                                                                                                                                                                                                                                                                                              (br_if $B35_60 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x0000000400009188)))
                                                                                                                                                                                                                                                                                              (br_if $B35_61 (call $system::core::string::string.==_1 (local.get $var$60) (i64.const 0x00000004000091a9)))
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                          (block $B34 (result i64)
                                                                                                                                                                                                                                                                                              (call $src::compiler::nodes::ErrorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.++_1 (i64.const 0x00000004000091ca) (local.get $src::compiler::phases::cannonical::name_8)))
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                          (br $B35)
                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                      (block $B31 (result i64)
                                                                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::name_14 (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                                                                          (block $B33 (result i64)
                                                                                                                                                                                                                                                                                              (local.set $var$61 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                                                                              (block $B33_0
                                                                                                                                                                                                                                                                                                  (block $B33_1
                                                                                                                                                                                                                                                                                                      (br_if $B33_0 (call $src::parser::parser::AstCons.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                      (br_if $B33_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                  (call $src::compiler::nodes::VarDeclarationNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::name_14) (call $src::compiler::nodes::EmptyNode.apply_1) (call $src::compiler::phases::cannonical::processNode_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                  (br $B33)
                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                              (block $B32 (result i64)
                                                                                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::head_6 (call $src::parser::parser::AstCons.head_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::tail_5 (call $src::parser::parser::AstCons.tail_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                  (call $src::compiler::nodes::VarDeclarationNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::name_14) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::head_6)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::tail_5)))
                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                              (br $B33)
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                      (br $B35)
                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                  (block $B28 (result i64)
                                                                                                                                                                                                                                                                                      (local.set $src::compiler::phases::cannonical::name_13 (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                                                                      (local.set $src::compiler::phases::cannonical::node (block $B30 (result i64)
                                                                                                                                                                                                                                                                                                (local.set $var$61 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                                                                                (block $B30_0
                                                                                                                                                                                                                                                                                                    (block $B30_1
                                                                                                                                                                                                                                                                                                        (br_if $B30_0 (call $src::parser::parser::AstCons.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                        (br_if $B30_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                    (call $src::compiler::nodes::VarDeclarationNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::name_13) (call $src::compiler::nodes::EmptyNode.apply_1) (call $src::compiler::phases::cannonical::processNode_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                    (br $B30)
                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                (block $B29 (result i64)
                                                                                                                                                                                                                                                                                                    (local.set $src::compiler::phases::cannonical::head_5 (call $src::parser::parser::AstCons.head_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                    (local.set $src::compiler::phases::cannonical::tail_4 (call $src::parser::parser::AstCons.tail_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                                    (call $src::compiler::nodes::VarDeclarationNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::name_13) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::head_5)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::tail_4)))
                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                (br $B30)
                                                                                                                                                                                                                                                                                              ))
                                                                                                                                                                                                                                                                                      (drop (call $src::compiler::nodes::CodeNode.annotate_1 (local.get $src::compiler::phases::cannonical::node) (call $src::compiler::annotations::MutableDeclaration.apply_1)))
                                                                                                                                                                                                                                                                                      (local.get $src::compiler::phases::cannonical::node)
                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                  (br $B35)
                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                              (block $B25 (result i64)
                                                                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::modifier_6 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::resto_10 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::decl_1 (call $src::compiler::nodes::EmptyNode.apply_1))
                                                                                                                                                                                                                                                                                  (block $B27
                                                                                                                                                                                                                                                                                      (local.set $var$61 (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::resto_10)))
                                                                                                                                                                                                                                                                                      (block $B27_0
                                                                                                                                                                                                                                                                                          (block $B27_1
                                                                                                                                                                                                                                                                                              (br_if $B27_0 (call $src::compiler::nodes::VarDeclarationNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                          (block $B26
                                                                                                                                                                                                                                                                                              (nop)
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                          (br $B27)
                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                      (local.set $src::compiler::phases::cannonical::decl_1 (local.get $var$61))
                                                                                                                                                                                                                                                                                      (br $B27)
                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                  (call $src::compiler::nodes::VarDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::modifier_6) (local.get $src::compiler::phases::cannonical::decl_1))
                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                              (br $B35)
                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                          (block $B22 (result i64)
                                                                                                                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::modifier_5 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_9 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::decl (call $src::compiler::nodes::EmptyNode.apply_1))
                                                                                                                                                                                                                                                                              (block $B24
                                                                                                                                                                                                                                                                                  (local.set $var$61 (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::resto_9)))
                                                                                                                                                                                                                                                                                  (block $B24_0
                                                                                                                                                                                                                                                                                      (block $B24_1
                                                                                                                                                                                                                                                                                          (br_if $B24_0 (call $src::compiler::nodes::VarDeclarationNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                      (block $B23
                                                                                                                                                                                                                                                                                          (nop)
                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                      (br $B24)
                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::decl (local.get $var$61))
                                                                                                                                                                                                                                                                                  (br $B24)
                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                              (call $src::compiler::nodes::VarDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::modifier_5) (local.get $src::compiler::phases::cannonical::decl))
                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                          (br $B35)
                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                      (block $B21 (result i64)
                                                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::modifier_4 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::resto_8 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                                                          (call $src::compiler::nodes::TypeDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::modifier_4) (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_8))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::second_1 (local.get $src::compiler::phases::cannonical::resto_8))))
                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                      (br $B35)
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                  (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                                                                                                                                                  (br $B35)
                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                              (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                                                                                                                                              (br $B35)
                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                          (call $src::compiler::nodes::BlockNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                                          (br $B35)
                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                      (call $src::compiler::phases::cannonical::processBinaryExpression_1 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                                      (br $B35)
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                  (call $src::compiler::phases::cannonical::processBinaryExpression_1 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                                  (br $B35)
                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                              (call $src::compiler::phases::cannonical::processBinaryExpression_1 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                                              (br $B35)
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                          (block $B20 (result i64)
                                                                                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::name_12 (call $src::compiler::phases::cannonical::nameOrEmpty_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::body_5 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                              (call $src::compiler::nodes::MatchDefaultNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::name_12) (local.get $src::compiler::phases::cannonical::body_5))
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                          (br $B35)
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                      (block $B19 (result i64)
                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::resto_7 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::name_11 (call $src::compiler::phases::cannonical::nameOrEmpty_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_7))))
                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::resto_7 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_7)))
                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::typeReference (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_7))))
                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::resto_7 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_7)))
                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::destructure (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_7))))
                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::resto_7 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_7)))
                                                                                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::body_4 (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::resto_7)))
                                                                                                                                                                                                                                          (call $src::compiler::nodes::MatchCaseIsNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::name_11) (local.get $src::compiler::phases::cannonical::typeReference) (local.get $src::compiler::phases::cannonical::destructure) (local.get $src::compiler::phases::cannonical::body_4))
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                      (br $B35)
                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                  (block $B18 (result i64)
                                                                                                                                                                                                                                      (local.set $src::compiler::phases::cannonical::literal (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                      (local.set $src::compiler::phases::cannonical::body_3 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                                      (call $src::compiler::nodes::MatchLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::literal) (local.get $src::compiler::phases::cannonical::body_3))
                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                  (br $B35)
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                              (block $B17 (result i64)
                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::resto_6 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::name_10 (call $src::compiler::phases::cannonical::nameOrEmpty_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_6))))
                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::resto_6 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_6)))
                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::condition_1 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_6))))
                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::resto_6 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_6)))
                                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::body_2 (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::resto_6)))
                                                                                                                                                                                                                                  (call $src::compiler::nodes::MatchConditionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::name_10) (local.get $src::compiler::phases::cannonical::condition_1) (local.get $src::compiler::phases::cannonical::body_2))
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                              (br $B35)
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                          (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                                                                                                          (br $B35)
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                      (call $src::compiler::nodes::BooleanLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $system::core::string::string.==_1 (call $src::parser::parser::textOf_1 (local.get $astNode)) (i64.const 0x0000000400008fdc)))
                                                                                                                                                                                                                      (br $B35)
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                  (call $src::compiler::nodes::StructDeclarationNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                  (br $B35)
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (block $B16 (result i64)
                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::modifier_3 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::resto_5 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                                  (call $src::compiler::nodes::StructDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::modifier_3) (call $src::compiler::phases::cannonical::structOrError_1 (local.get $src::compiler::phases::cannonical::resto_5)))
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (br $B35)
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (call $src::compiler::nodes::NameLiteralPairNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                          (br $B35)
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (call $src::compiler::nodes::StackLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                                      (br $B35)
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (call $src::compiler::nodes::InjectedLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)))
                                                                                                                                                                                                  (br $B35)
                                                                                                                                                                                                )
                                                                                                                                                                                              (block $B14 (result i64)
                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::firstName (call $src::compiler::phases::cannonical::referenceOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                  (local.set $src::compiler::phases::cannonical::secondChild (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::second_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                  (block $B15 (result i64)
                                                                                                                                                                                                      (local.set $var$61 (local.get $src::compiler::phases::cannonical::secondChild))
                                                                                                                                                                                                      (block $B15_0
                                                                                                                                                                                                          (block $B15_1
                                                                                                                                                                                                              (br_if $B15_0 (call $src::compiler::nodes::ReferenceNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (call $src::compiler::nodes::ImplDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::nodes::EmptyNode.apply_1) (local.get $src::compiler::phases::cannonical::firstName) (local.get $src::compiler::phases::cannonical::secondChild))
                                                                                                                                                                                                          (br $B15)
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (call $src::compiler::nodes::ImplDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $var$61) (local.get $src::compiler::phases::cannonical::firstName) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::third_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                                      (br $B15)
                                                                                                                                                                                                    )
                                                                                                                                                                                                )
                                                                                                                                                                                              (br $B35)
                                                                                                                                                                                            )
                                                                                                                                                                                          (block $B13 (result i64)
                                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::modifier_2 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_4 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                                              (call $src::compiler::nodes::EnumDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::modifier_2) (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_4))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_4))))
                                                                                                                                                                                            )
                                                                                                                                                                                          (br $B35)
                                                                                                                                                                                        )
                                                                                                                                                                                      (call $src::compiler::nodes::ParameterNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                      (br $B35)
                                                                                                                                                                                    )
                                                                                                                                                                                  (call $src::compiler::nodes::UnaryExpressionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                                  (br $B35)
                                                                                                                                                                                )
                                                                                                                                                                              (call $src::compiler::nodes::StructTypeNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                              (br $B35)
                                                                                                                                                                            )
                                                                                                                                                                          (block $B12 (result i64)
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_3 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::name_9 (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_3))))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_3 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_3)))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::typeParameters (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_3))))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_3 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_3)))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::parameters (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_3))))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_3 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_3)))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::returnType (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_3))))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_3 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_3)))
                                                                                                                                                                              (local.set $src::compiler::phases::cannonical::body_1 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_3))))
                                                                                                                                                                              (call $src::compiler::nodes::FunctionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::name_9) (local.get $src::compiler::phases::cannonical::parameters) (local.get $src::compiler::phases::cannonical::returnType) (local.get $src::compiler::phases::cannonical::body_1))
                                                                                                                                                                            )
                                                                                                                                                                          (br $B35)
                                                                                                                                                                        )
                                                                                                                                                                      (block $B11 (result i64)
                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::decorators (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::resto_2 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::modifier_1 (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_2))))
                                                                                                                                                                          (call $src::compiler::nodes::FunDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::decorators) (local.get $src::compiler::phases::cannonical::modifier_1) (call $src::compiler::phases::cannonical::funOrError_1 (call $src::parser::parser::second_1 (local.get $src::compiler::phases::cannonical::resto_2))))
                                                                                                                                                                        )
                                                                                                                                                                      (br $B35)
                                                                                                                                                                    )
                                                                                                                                                                  (call $src::compiler::nodes::WasmAtomNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::parser::parser::textOf_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                                  (br $B35)
                                                                                                                                                                )
                                                                                                                                                              (call $src::compiler::nodes::WasmExpressionNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                              (br $B35)
                                                                                                                                                            )
                                                                                                                                                          (block $B6 (result i64)
                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                                              (local.set $src::compiler::phases::cannonical::ret (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_1))))
                                                                                                                                                              (local.set $src::compiler::phases::cannonical::resto_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_1)))
                                                                                                                                                              (block $Break7
                                                                                                                                                                  (loop $Loop7
                                                                                                                                                                      (block $B8
                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::head_4 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto_1)))
                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::resto_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::resto_1)))
                                                                                                                                                                          (local.set $src::compiler::phases::cannonical::ret (call $src::compiler::phases::cannonical::processAtomicExpressionChild_1 (local.get $src::compiler::phases::cannonical::ret) (local.get $src::compiler::phases::cannonical::head_4)))
                                                                                                                                                                          (if $IF9 (call $system::core::boolean::boolean.!_1 (call $src::parser::parser::Rule0.is_1 (local.get $src::compiler::phases::cannonical::resto_1)))
                                                                                                                                                                              (then
                                                                                                                                                                                (block $B10
                                                                                                                                                                                    (br $Loop7)
                                                                                                                                                                                  )
                                                                                                                                                                              )
                                                                                                                                                                              (else)
                                                                                                                                                                            )
                                                                                                                                                                        )
                                                                                                                                                                    )
                                                                                                                                                                )
                                                                                                                                                              (local.get $src::compiler::phases::cannonical::ret)
                                                                                                                                                            )
                                                                                                                                                          (br $B35)
                                                                                                                                                        )
                                                                                                                                                      (call $src::compiler::nodes::DecoratorNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                                                                                      (br $B35)
                                                                                                                                                    )
                                                                                                                                                  (call $src::compiler::nodes::LoopNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                                                                                                  (br $B35)
                                                                                                                                                )
                                                                                                                                              (call $src::compiler::nodes::ContinueNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)))
                                                                                                                                              (br $B35)
                                                                                                                                            )
                                                                                                                                          (call $src::compiler::nodes::ContinueNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)))
                                                                                                                                          (br $B35)
                                                                                                                                        )
                                                                                                                                      (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                      (br $B35)
                                                                                                                                    )
                                                                                                                                  (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                                  (br $B35)
                                                                                                                                )
                                                                                                                              (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                              (br $B35)
                                                                                                                            )
                                                                                                                          (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                          (br $B35)
                                                                                                                        )
                                                                                                                      (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                                      (br $B35)
                                                                                                                    )
                                                                                                                  (call $src::compiler::nodes::NameIdentifierNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::parser::parser::textOf_1 (local.get $astNode)))
                                                                                                                  (br $B35)
                                                                                                                )
                                                                                                              (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                              (br $B35)
                                                                                                            )
                                                                                                          (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                          (br $B35)
                                                                                                        )
                                                                                                      (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                      (br $B35)
                                                                                                    )
                                                                                                  (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                                  (br $B35)
                                                                                                )
                                                                                              (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                              (br $B35)
                                                                                            )
                                                                                          (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                          (br $B35)
                                                                                        )
                                                                                      (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                                                                      (br $B35)
                                                                                    )
                                                                                  (block $B5 (result i64)
                                                                                      (local.set $src::compiler::phases::cannonical::condition (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                      (local.set $src::compiler::phases::cannonical::truePart (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::second_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                      (local.set $src::compiler::phases::cannonical::falsePart (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::third_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                                      (call $src::compiler::nodes::IfNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::condition) (local.get $src::compiler::phases::cannonical::truePart) (local.get $src::compiler::phases::cannonical::falsePart))
                                                                                    )
                                                                                  (br $B35)
                                                                                )
                                                                              (call $src::compiler::nodes::FloatLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::parser::parser::textOf_1 (local.get $astNode)))
                                                                              (br $B35)
                                                                            )
                                                                          (block $B4 (result i64)
                                                                              (local.set $src::compiler::phases::cannonical::modifier (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                              (local.set $src::compiler::phases::cannonical::resto (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                              (local.set $src::compiler::phases::cannonical::directives (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::second_1 (local.get $src::compiler::phases::cannonical::resto))))
                                                                              (call $src::compiler::phases::cannonical::processTraitDirectives_1 (local.get $src::compiler::phases::cannonical::directives))
                                                                              (call $src::compiler::nodes::TraitDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $src::compiler::phases::cannonical::modifier) (call $src::compiler::phases::cannonical::nameOrError_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::resto))) (local.get $src::compiler::phases::cannonical::directives))
                                                                            )
                                                                          (br $B35)
                                                                        )
                                                                      (call $src::compiler::nodes::PatternMatcherNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::compiler::phases::cannonical::processNode_1 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                                      (br $B35)
                                                                    )
                                                                  (call $src::compiler::nodes::ReferenceNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::fqnOrEmpty_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                                  (br $B35)
                                                                )
                                                              (call $src::compiler::nodes::IntersectionTypeNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                              (br $B35)
                                                            )
                                                          (call $src::compiler::nodes::UnionTypeNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                          (br $B35)
                                                        )
                                                      (call $src::compiler::nodes::QNameNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                                      (br $B35)
                                                    )
                                                  (call $src::compiler::nodes::ImportDirectiveNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::fqnOrEmpty_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::cannonical::child_2))) (call $src::compiler::phases::cannonical::nameOrEmpty_1 (call $src::parser::parser::second_1 (local.get $src::compiler::phases::cannonical::child_2))))
                                                  (br $B35)
                                                )
                                              (call $src::compiler::nodes::NoModifierNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)))
                                              (br $B35)
                                            )
                                          (call $src::compiler::nodes::PrivateModifierNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)))
                                          (br $B35)
                                        )
                                      (call $src::compiler::nodes::Document.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2)))
                                      (br $B35)
                                    )
                                  (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::child_2))
                                  (br $B35)
                                )
                            )
                          (br $B36)
                        )
                      (block $B2 (result i64)
                          (local.set $src::compiler::phases::cannonical::head_3 (call $src::parser::parser::AstCons.head_1 (local.get $var$59)))
                          (local.set $src::compiler::phases::cannonical::tail_3 (call $src::parser::parser::AstCons.tail_1 (local.get $var$59)))
                          (call $src::compiler::nodes::CodeNodeCons.apply_1 (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::head_3)) (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::phases::cannonical::tail_3)))
                        )
                      (br $B36)
                    )
                  (block $B1 (result i64)
                      (local.set $src::compiler::phases::cannonical::token (call $src::parser::parser::Leaf.token_1 (local.get $var$59)))
                      (local.set $src::compiler::phases::cannonical::value (call $src::parser::parser::Leaf.value_1 (local.get $var$59)))
                      (call $src::compiler::phases::cannonical::processNode_2 (local.get $astNode) (local.get $src::compiler::phases::cannonical::token) (local.get $src::compiler::phases::cannonical::value))
                    )
                  (br $B36)
                )
              (call $src::compiler::nodes::EmptyNode.apply_1)
              (br $B36)
            )
          (call $src::compiler::nodes::EmptyNode.apply_1)
          (br $B36)
        )
      (call $src::compiler::nodes::EmptyNode.apply_1)
      (br $B36)
    )
  )
  (func $src::compiler::phases::cannonical::processNode_2 (param $astNode i64) (param $node i64) (param $value i64) (result i64)
    (local $var$3 i64)
    (local $var$4 i64)
    (block $B2 (result i64)
      (local.set $var$3 (call $src::lexer::tokens::Token.tokenType_1 (local.get $node)))
      (block $B2_0
          (block $B2_1
              (block $B2_2
                  (block $B2_3
                      (block $B2_4
                          (block $B2_5
                              (br_if $B2_0 (call $src::lexer::tokens::StringLiteral.is_1 (local.get $var$3)))
                              (br_if $B2_1 (call $src::lexer::tokens::Identifier.is_1 (local.get $var$3)))
                              (br_if $B2_2 (call $src::lexer::tokens::Operator.is_1 (local.get $var$3)))
                              (br_if $B2_3 (call $src::lexer::tokens::NumberLiteral.is_1 (local.get $var$3)))
                              (br_if $B2_4 (call $src::lexer::tokens::Keyword.is_1 (local.get $var$3)))
                            )
                          (call $src::compiler::nodes::EmptyNode.apply_1)
                          (br $B2)
                        )
                      (block $B1 (result i64)
                          (local.set $var$4 (local.get $value))
                          (block $B1_0
                              (block $B1_1
                                  (block $B1_2
                                      (br_if $B1_0 (call $system::core::string::string.==_1 (local.get $var$4) (i64.const 0x00000004000091ed)))
                                      (br_if $B1_1 (call $system::core::string::string.==_1 (local.get $var$4) (i64.const 0x00000004000091fa)))
                                    )
                                  (call $src::compiler::nodes::NameIdentifierNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $value))
                                  (br $B1)
                                )
                              (call $src::compiler::nodes::BooleanLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (i32.const 0))
                              (br $B1)
                            )
                          (call $src::compiler::nodes::BooleanLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (i32.const 1))
                          (br $B1)
                        )
                      (br $B2)
                    )
                  (call $src::compiler::nodes::FloatLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $value))
                  (br $B2)
                )
              (call $src::compiler::nodes::NameIdentifierNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $value))
              (br $B2)
            )
          (call $src::compiler::nodes::NameIdentifierNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $value))
          (br $B2)
        )
      (call $src::compiler::nodes::StringLiteralNode.apply_1 (call $src::compiler::nodes::NodeMeta.apply_3 (local.get $astNode)) (local.get $value))
      (br $B2)
    )
  )
  (func $src::compiler::phases::scopecreation::runPhase_1 (param $currentPath i64) (param $currentModule i64) (param $node i64) (param $ctx i64) (result i64)
    (block $B1 (result i64)
      (local.get $node)
    )
  )
  (func $src::compiler::phases::scopecreation::printNode_1 (param $node i64) (param $context i64)
    (block $B1
      (call $support::env::printf_15 (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $node)))
    )
  )
  (func $src::compiler::stringlist::StringLinkedList.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $src::compiler::stringlist::None.is_1 (local.get $self)) (call $src::compiler::stringlist::Element.is_1 (local.get $self)))
    )
  )
  (func $src::compiler::stringlist::StringLinkedList.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::stringlist::StringLinkedList.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::stringlist::StringLinkedList.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::stringlist::StringLinkedList.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::stringlist::StringLinkedList.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::stringlist::None.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::stringlist::Element.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::stringlist::None.is_1 (param $a i64) (result i32)
    (local $src::compiler::stringlist::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::compiler::stringlist::discriminant (i32.const 182))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::stringlist::discriminant))
    )
  )
  (func $src::compiler::stringlist::None.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::stringlist::None.None$discriminant_1 (result i64)
    (local $src::compiler::stringlist::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::stringlist::discriminant_1 (i32.const 182))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::stringlist::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::compiler::stringlist::None.apply_1 (result i64)
    (call $src::compiler::stringlist::None.None$discriminant_1)
  )
  (func $src::compiler::stringlist::None.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::stringlist::None.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::stringlist::None.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::stringlist::None.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::stringlist::Element.is_1 (param $a i64) (result i32)
    (local $src::compiler::stringlist::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::stringlist::discriminant_2 (i32.const 183))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::stringlist::discriminant_2))
    )
  )
  (func $src::compiler::stringlist::Element.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::stringlist::Element.Element$discriminant_1 (result i64)
    (local $src::compiler::stringlist::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::stringlist::discriminant_3 (i32.const 183))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::stringlist::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::compiler::stringlist::Element.apply_1 (param $str i64) (param $next i64) (result i64)
    (local $src::compiler::stringlist::$ref i64)
    (block $B1 (result i64)
      (local.set $src::compiler::stringlist::$ref (call $src::compiler::stringlist::Element.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::stringlist::Element.property$0_2 (local.get $src::compiler::stringlist::$ref) (local.get $str))
      (call $src::compiler::stringlist::Element.property$1_2 (local.get $src::compiler::stringlist::$ref) (local.get $next))
      (local.get $src::compiler::stringlist::$ref)
    )
  )
  (func $src::compiler::stringlist::Element.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::stringlist::Element.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::stringlist::Element.Element$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::stringlist::Element.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::stringlist::Element.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::stringlist::Element.str_1 (param $self i64) (result i64)
    (call $src::compiler::stringlist::Element.property$0_1 (local.get $self))
  )
  (func $src::compiler::stringlist::Element.str_2 (param $self i64) (param $value i64)
    (call $src::compiler::stringlist::Element.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::stringlist::Element.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::stringlist::Element.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::stringlist::Element.next_1 (param $self i64) (result i64)
    (call $src::compiler::stringlist::Element.property$1_1 (local.get $self))
  )
  (func $src::compiler::stringlist::Element.next_2 (param $self i64) (param $value i64)
    (call $src::compiler::stringlist::Element.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::stringlist::Element.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::stringlist::StringLinkedList.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::stringlist::Element.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::stringlist::StringLinkedList.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::stringlist::Element.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::stringlist::Element.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::stringlist::StringLinkedList.append_1 (param $self i64) (param $str i64) (result i64)
    (local $src::compiler::stringlist::str_2 i64)
    (local $src::compiler::stringlist::next_1 i64)
    (local $var$4 i64)
    (block $B1 (result i64)
      (block $B3 (result i64)
          (local.set $var$4 (local.get $self))
          (block $B3_0
              (block $B3_1
                  (br_if $B3_0 (call $src::compiler::stringlist::None.is_1 (local.get $var$4)))
                  (br_if $B3_1 (call $src::compiler::stringlist::Element.is_1 (local.get $var$4)))
                )
              (block $B2 (result i64)
                  (local.set $src::compiler::stringlist::str_2 (call $src::compiler::stringlist::Element.str_1 (local.get $var$4)))
                  (local.set $src::compiler::stringlist::next_1 (call $src::compiler::stringlist::Element.next_1 (local.get $var$4)))
                  (call $src::compiler::stringlist::Element.apply_1 (local.get $src::compiler::stringlist::str_2) (call $src::compiler::stringlist::StringLinkedList.append_1 (local.get $src::compiler::stringlist::next_1) (local.get $src::compiler::stringlist::str_2)))
                )
              (br $B3)
            )
          (call $src::compiler::stringlist::Element.apply_1 (local.get $str) (call $src::compiler::stringlist::None.apply_1))
          (br $B3)
        )
    )
  )
  (func $src::compiler::stringlist::StringLinkedList.prepend_1 (param $self i64) (param $str i64) (result i64)
    (block $B1 (result i64)
      (call $src::compiler::stringlist::Element.apply_1 (local.get $str) (local.get $self))
    )
  )
  (func $src::compiler::stringlist::StringLinkedList.head_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::stringlist::StringLinkedList.tail_1 (param $self i64) (result i64)
    (local $src::compiler::stringlist::str_4 i64)
    (local $src::compiler::stringlist::next_2 i64)
    (local $var$3 i64)
    (block $B2 (result i64)
      (local.set $var$3 (local.get $self))
      (block $B2_0
          (block $B2_1
              (br_if $B2_0 (call $src::compiler::stringlist::None.is_1 (local.get $var$3)))
              (br_if $B2_1 (call $src::compiler::stringlist::Element.is_1 (local.get $var$3)))
            )
          (block $B1 (result i64)
              (local.set $src::compiler::stringlist::str_4 (call $src::compiler::stringlist::Element.str_1 (local.get $var$3)))
              (local.set $src::compiler::stringlist::next_2 (call $src::compiler::stringlist::Element.next_1 (local.get $var$3)))
              (local.get $src::compiler::stringlist::next_2)
            )
          (br $B2)
        )
      (call $src::compiler::stringlist::None.apply_1)
      (br $B2)
    )
  )
  (data 0 (i32.const 34608) "\08\00\00\00N\00U\00L\00L\00\00")
  (data 0 (i32.const 34621) "\0a\00\00\00L\00i\00n\00e\00(\00\00")
  (data 0 (i32.const 34636) "\02\00\00\00,\00\00")
  (data 0 (i32.const 34643) "\02\00\00\00,\00\00")
  (data 0 (i32.const 34650) "\04\00\00\00)\00\0a\00\00")
  (data 0 (i32.const 34659) "\04\00\00\00 \00\02%\00")
  (data 0 (i32.const 34668) "\12\00\00\00L\00i\00n\00e\00C\00o\00n\00s\00\0a\00\00")
  (data 0 (i32.const 34691) "\04\00\00\00 \00\1c%\00")
  (data 0 (i32.const 34700) "\04\00\00\00 \00\14%\00")
  (func $src::compiler::linemapper::LineData.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::compiler::linemapper::NoLine.is_1 (local.get $self)) (call $src::compiler::linemapper::Line.is_1 (local.get $self))) (call $src::compiler::linemapper::LineCons.is_1 (local.get $self)))
    )
  )
  (func $src::compiler::linemapper::LineData.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::linemapper::LineData.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::linemapper::LineData.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::linemapper::LineData.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::linemapper::LineData.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::linemapper::NoLine.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::linemapper::Line.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::linemapper::LineCons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::linemapper::NoLine.is_1 (param $a i64) (result i32)
    (local $src::compiler::linemapper::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::compiler::linemapper::discriminant (i32.const 177))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::linemapper::discriminant))
    )
  )
  (func $src::compiler::linemapper::NoLine.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::linemapper::NoLine.NoLine$discriminant_1 (result i64)
    (local $src::compiler::linemapper::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::linemapper::discriminant_1 (i32.const 177))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::linemapper::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::compiler::linemapper::NoLine.apply_1 (result i64)
    (call $src::compiler::linemapper::NoLine.NoLine$discriminant_1)
  )
  (func $src::compiler::linemapper::NoLine.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::linemapper::NoLine.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::linemapper::NoLine.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::linemapper::NoLine.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::linemapper::Line.is_1 (param $a i64) (result i32)
    (local $src::compiler::linemapper::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::linemapper::discriminant_2 (i32.const 178))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::linemapper::discriminant_2))
    )
  )
  (func $src::compiler::linemapper::Line.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::linemapper::Line.Line$discriminant_1 (result i64)
    (local $src::compiler::linemapper::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::linemapper::discriminant_3 (i32.const 178))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::linemapper::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::compiler::linemapper::Line.apply_1 (param $line i32) (param $start i32) (param $end i32) (result i64)
    (local $src::compiler::linemapper::$ref i64)
    (block $B1 (result i64)
      (local.set $src::compiler::linemapper::$ref (call $src::compiler::linemapper::Line.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 12))))
      (call $src::compiler::linemapper::Line.property$0_2 (local.get $src::compiler::linemapper::$ref) (local.get $line))
      (call $src::compiler::linemapper::Line.property$1_2 (local.get $src::compiler::linemapper::$ref) (local.get $start))
      (call $src::compiler::linemapper::Line.property$2_2 (local.get $src::compiler::linemapper::$ref) (local.get $end))
      (local.get $src::compiler::linemapper::$ref)
    )
  )
  (func $src::compiler::linemapper::Line.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::linemapper::Line.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::linemapper::Line.Line$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::linemapper::Line.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::linemapper::Line.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::linemapper::Line.line_1 (param $self i64) (result i32)
    (call $src::compiler::linemapper::Line.property$0_1 (local.get $self))
  )
  (func $src::compiler::linemapper::Line.line_2 (param $self i64) (param $value i32)
    (call $src::compiler::linemapper::Line.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::linemapper::Line.property$0_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::linemapper::Line.property$0_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::linemapper::Line.start_1 (param $self i64) (result i32)
    (call $src::compiler::linemapper::Line.property$1_1 (local.get $self))
  )
  (func $src::compiler::linemapper::Line.start_2 (param $self i64) (param $value i32)
    (call $src::compiler::linemapper::Line.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::linemapper::Line.property$1_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 4))
  )
  (func $src::compiler::linemapper::Line.property$1_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 4))
  )
  (func $src::compiler::linemapper::Line.end_1 (param $self i64) (result i32)
    (call $src::compiler::linemapper::Line.property$2_1 (local.get $self))
  )
  (func $src::compiler::linemapper::Line.end_2 (param $self i64) (param $value i32)
    (call $src::compiler::linemapper::Line.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::linemapper::Line.property$2_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::linemapper::Line.property$2_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::linemapper::Line.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::linemapper::Line.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::linemapper::LineCons.is_1 (param $a i64) (result i32)
    (local $src::compiler::linemapper::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::linemapper::discriminant_4 (i32.const 179))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::linemapper::discriminant_4))
    )
  )
  (func $src::compiler::linemapper::LineCons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::linemapper::LineCons.LineCons$discriminant_1 (result i64)
    (local $src::compiler::linemapper::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::linemapper::discriminant_5 (i32.const 179))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::linemapper::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::compiler::linemapper::LineCons.apply_1 (param $left i64) (param $right i64) (result i64)
    (local $src::compiler::linemapper::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::linemapper::$ref_1 (call $src::compiler::linemapper::LineCons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::linemapper::LineCons.property$0_2 (local.get $src::compiler::linemapper::$ref_1) (local.get $left))
      (call $src::compiler::linemapper::LineCons.property$1_2 (local.get $src::compiler::linemapper::$ref_1) (local.get $right))
      (local.get $src::compiler::linemapper::$ref_1)
    )
  )
  (func $src::compiler::linemapper::LineCons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::linemapper::LineCons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::linemapper::LineCons.LineCons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::linemapper::LineCons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::linemapper::LineCons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::linemapper::LineCons.left_1 (param $self i64) (result i64)
    (call $src::compiler::linemapper::LineCons.property$0_1 (local.get $self))
  )
  (func $src::compiler::linemapper::LineCons.left_2 (param $self i64) (param $value i64)
    (call $src::compiler::linemapper::LineCons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::linemapper::LineCons.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::linemapper::LineData.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::linemapper::LineCons.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::linemapper::LineData.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::linemapper::LineCons.right_1 (param $self i64) (result i64)
    (call $src::compiler::linemapper::LineCons.property$1_1 (local.get $self))
  )
  (func $src::compiler::linemapper::LineCons.right_2 (param $self i64) (param $value i64)
    (call $src::compiler::linemapper::LineCons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::linemapper::LineCons.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::linemapper::LineData.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::linemapper::LineCons.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::linemapper::LineData.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::linemapper::LineCons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::linemapper::LineCons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::linemapper::LineMapper.is_1 (param $a i64) (result i32)
    (local $src::compiler::linemapper::discriminant_6 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::linemapper::discriminant_6 (i32.const 180))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::linemapper::discriminant_6))
    )
  )
  (func $src::compiler::linemapper::LineMapper.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::linemapper::LineMapper.LineMapper$discriminant_1 (result i64)
    (local $src::compiler::linemapper::discriminant_7 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::linemapper::discriminant_7 (i32.const 180))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::linemapper::discriminant_7)) (i32.const 32))
    )
  )
  (func $src::compiler::linemapper::LineMapper.apply_1 (param $source i64) (param $lineData i64) (result i64)
    (local $src::compiler::linemapper::$ref_2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::linemapper::$ref_2 (call $src::compiler::linemapper::LineMapper.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::linemapper::LineMapper.property$0_2 (local.get $src::compiler::linemapper::$ref_2) (local.get $source))
      (call $src::compiler::linemapper::LineMapper.property$1_2 (local.get $src::compiler::linemapper::$ref_2) (local.get $lineData))
      (local.get $src::compiler::linemapper::$ref_2)
    )
  )
  (func $src::compiler::linemapper::LineMapper.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::linemapper::LineMapper.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::linemapper::LineMapper.LineMapper$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::linemapper::LineMapper.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::linemapper::LineMapper.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::linemapper::LineMapper.source_1 (param $self i64) (result i64)
    (call $src::compiler::linemapper::LineMapper.property$0_1 (local.get $self))
  )
  (func $src::compiler::linemapper::LineMapper.source_2 (param $self i64) (param $value i64)
    (call $src::compiler::linemapper::LineMapper.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::linemapper::LineMapper.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::linemapper::LineMapper.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::linemapper::LineMapper.lineData_1 (param $self i64) (result i64)
    (call $src::compiler::linemapper::LineMapper.property$1_1 (local.get $self))
  )
  (func $src::compiler::linemapper::LineMapper.lineData_2 (param $self i64) (param $value i64)
    (call $src::compiler::linemapper::LineMapper.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::linemapper::LineMapper.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::linemapper::LineMapper.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::linemapper::LineMapper.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::linemapper::LineMapper.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::linemapper::LineMapper.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::linemapper::LineMapper.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::linemapper::LineMapper.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::linemapper::LineMapper.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::linemapper::LineData.line_1 (param $self i64) (result i32)
    (local $src::compiler::linemapper::left_1 i64)
    (local $src::compiler::linemapper::line_1 i32)
    (local $var$3 i64)
    (block $B3 (result i32)
      (local.set $var$3 (local.get $self))
      (block $B3_0
          (block $B3_1
              (block $B3_2
                  (br_if $B3_0 (call $src::compiler::linemapper::LineCons.is_1 (local.get $var$3)))
                  (br_if $B3_1 (call $src::compiler::linemapper::Line.is_1 (local.get $var$3)))
                  (br_if $B3_2 (call $src::compiler::linemapper::NoLine.is_1 (local.get $var$3)))
                )
              (i32.const 0x0)
              (br $B3)
            )
          (block $B2 (result i32)
              (local.set $src::compiler::linemapper::line_1 (call $src::compiler::linemapper::Line.line_1 (local.get $var$3)))
              (local.get $src::compiler::linemapper::line_1)
            )
          (br $B3)
        )
      (block $B1 (result i32)
          (local.set $src::compiler::linemapper::left_1 (call $src::compiler::linemapper::LineCons.left_1 (local.get $var$3)))
          (call $src::compiler::linemapper::LineData.line_1 (local.get $src::compiler::linemapper::left_1))
        )
      (br $B3)
    )
  )
  (func $src::compiler::linemapper::LineData.start_1 (param $self i64) (result i32)
    (local $src::compiler::linemapper::left_2 i64)
    (local $src::compiler::linemapper::right_1 i64)
    (local $src::compiler::linemapper::line_2 i32)
    (local $src::compiler::linemapper::start_1 i32)
    (local $var$5 i64)
    (block $B3 (result i32)
      (local.set $var$5 (local.get $self))
      (block $B3_0
          (block $B3_1
              (block $B3_2
                  (br_if $B3_0 (call $src::compiler::linemapper::LineCons.is_1 (local.get $var$5)))
                  (br_if $B3_1 (call $src::compiler::linemapper::Line.is_1 (local.get $var$5)))
                  (br_if $B3_2 (call $src::compiler::linemapper::NoLine.is_1 (local.get $var$5)))
                )
              (i32.const 0x7ffffff)
              (br $B3)
            )
          (block $B2 (result i32)
              (local.set $src::compiler::linemapper::line_2 (call $src::compiler::linemapper::Line.line_1 (local.get $var$5)))
              (local.set $src::compiler::linemapper::start_1 (call $src::compiler::linemapper::Line.start_1 (local.get $var$5)))
              (local.get $src::compiler::linemapper::start_1)
            )
          (br $B3)
        )
      (block $B1 (result i32)
          (local.set $src::compiler::linemapper::left_2 (call $src::compiler::linemapper::LineCons.left_1 (local.get $var$5)))
          (local.set $src::compiler::linemapper::right_1 (call $src::compiler::linemapper::LineCons.right_1 (local.get $var$5)))
          (call $src::compiler::linemapper::LineData.start_1 (local.get $src::compiler::linemapper::left_2))
        )
      (br $B3)
    )
  )
  (func $src::compiler::linemapper::LineData.end_1 (param $self i64) (result i32)
    (local $src::compiler::linemapper::left_3 i64)
    (local $src::compiler::linemapper::right_2 i64)
    (local $src::compiler::linemapper::line_3 i32)
    (local $src::compiler::linemapper::start_2 i32)
    (local $src::compiler::linemapper::end_1 i32)
    (local $var$6 i64)
    (block $B3 (result i32)
      (local.set $var$6 (local.get $self))
      (block $B3_0
          (block $B3_1
              (block $B3_2
                  (br_if $B3_0 (call $src::compiler::linemapper::LineCons.is_1 (local.get $var$6)))
                  (br_if $B3_1 (call $src::compiler::linemapper::Line.is_1 (local.get $var$6)))
                  (br_if $B3_2 (call $src::compiler::linemapper::NoLine.is_1 (local.get $var$6)))
                )
              (i32.const 0x0)
              (br $B3)
            )
          (block $B2 (result i32)
              (local.set $src::compiler::linemapper::line_3 (call $src::compiler::linemapper::Line.line_1 (local.get $var$6)))
              (local.set $src::compiler::linemapper::start_2 (call $src::compiler::linemapper::Line.start_1 (local.get $var$6)))
              (local.set $src::compiler::linemapper::end_1 (call $src::compiler::linemapper::Line.end_1 (local.get $var$6)))
              (local.get $src::compiler::linemapper::end_1)
            )
          (br $B3)
        )
      (block $B1 (result i32)
          (local.set $src::compiler::linemapper::left_3 (call $src::compiler::linemapper::LineCons.left_1 (local.get $var$6)))
          (local.set $src::compiler::linemapper::right_2 (call $src::compiler::linemapper::LineCons.right_1 (local.get $var$6)))
          (call $src::compiler::linemapper::LineData.end_1 (local.get $src::compiler::linemapper::right_2))
        )
      (br $B3)
    )
  )
  (func $src::compiler::linemapper::LineData.getLine_1 (param $self i64) (param $position i32) (result i64)
    (local $src::compiler::linemapper::left_4 i64)
    (local $src::compiler::linemapper::right_3 i64)
    (local $var$4 i64)
    (block $B3 (result i64)
      (local.set $var$4 (local.get $self))
      (block $B3_0
          (block $B3_1
              (block $B3_2
                  (br_if $B3_0 (call $src::compiler::linemapper::LineCons.is_1 (local.get $var$4)))
                  (br_if $B3_1 (call $src::compiler::linemapper::Line.is_1 (local.get $var$4)))
                  (br_if $B3_2 (call $src::compiler::linemapper::NoLine.is_1 (local.get $var$4)))
                )
              (call $src::compiler::linemapper::NoLine.apply_1)
              (br $B3)
            )
          (local.get $var$4)
          (br $B3)
        )
      (block $B1 (result i64)
          (local.set $src::compiler::linemapper::left_4 (call $src::compiler::linemapper::LineCons.left_1 (local.get $var$4)))
          (local.set $src::compiler::linemapper::right_3 (call $src::compiler::linemapper::LineCons.right_1 (local.get $var$4)))
          (if $IF2 (result i64) (call $system::core::boolean::boolean.&&_1 (call $system::core::u32::u32.<=_1 (call $src::compiler::linemapper::LineData.start_1 (local.get $src::compiler::linemapper::left_4)) (local.get $position)) (call $system::core::u32::u32.<_1 (local.get $position) (call $src::compiler::linemapper::LineData.end_1 (local.get $src::compiler::linemapper::left_4))))
              (then
                (call $src::compiler::linemapper::LineData.getLine_1 (local.get $src::compiler::linemapper::left_4) (local.get $position))
              )
              (else
                (call $src::compiler::linemapper::LineData.getLine_1 (local.get $src::compiler::linemapper::right_3) (local.get $position))
              )
            )
        )
      (br $B3)
    )
  )
  (func $src::compiler::linemapper::LineData.getLinePosition_1 (param $self i64) (param $line i32) (result i64)
    (local $src::compiler::linemapper::left_5 i64)
    (local $src::compiler::linemapper::right_4 i64)
    (local $var$4 i64)
    (local $var$5 i64)
    (block $B4 (result i64)
      (local.set $var$4 (local.get $self))
      (block $B4_0
          (block $B4_1
              (block $B4_2
                  (br_if $B4_0 (call $src::compiler::linemapper::LineCons.is_1 (local.get $var$4)))
                  (br_if $B4_1 (call $src::compiler::linemapper::Line.is_1 (local.get $var$4)))
                  (br_if $B4_2 (call $src::compiler::linemapper::NoLine.is_1 (local.get $var$4)))
                )
              (call $src::compiler::linemapper::NoLine.apply_1)
              (br $B4)
            )
          (if $IF3 (result i64) (call $system::core::u32::u32.==_1 (call $src::compiler::linemapper::Line.line_1 (local.get $var$4)) (local.get $line))
              (then
                (local.get $var$4)
              )
              (else
                (call $src::compiler::linemapper::NoLine.apply_1)
              )
            )
          (br $B4)
        )
      (block $B1 (result i64)
          (local.set $src::compiler::linemapper::left_5 (call $src::compiler::linemapper::LineCons.left_1 (local.get $var$4)))
          (local.set $src::compiler::linemapper::right_4 (call $src::compiler::linemapper::LineCons.right_1 (local.get $var$4)))
          (block $B2 (result i64)
              (local.set $var$5 (call $src::compiler::linemapper::LineData.getLinePosition_1 (local.get $src::compiler::linemapper::left_5) (local.get $line)))
              (block $B2_0
                  (block $B2_1
                      (br_if $B2_0 (call $src::compiler::linemapper::NoLine.is_1 (local.get $var$5)))
                      (br_if $B2_1 (call $src::compiler::linemapper::Line.is_1 (local.get $var$5)))
                    )
                  (local.get $var$5)
                  (br $B2)
                )
              (call $src::compiler::linemapper::LineData.getLinePosition_1 (local.get $src::compiler::linemapper::right_4) (local.get $line))
              (br $B2)
            )
        )
      (br $B4)
    )
  )
  (func $src::compiler::linemapper::LineData.printTo_1 (param $self i64) (param $sb i64) (param $indentation i32)
    (local $src::compiler::linemapper::line_5 i32)
    (local $src::compiler::linemapper::start_3 i32)
    (local $src::compiler::linemapper::end_2 i32)
    (local $src::compiler::linemapper::left_6 i64)
    (local $src::compiler::linemapper::right_5 i64)
    (local $src::compiler::linemapper::offset2 i64)
    (local $var$9 i64)
    (block $B1
      (block $B4
          (local.set $var$9 (local.get $self))
          (block $B4_0
              (block $B4_1
                  (block $B4_2
                      (br_if $B4_0 (call $src::compiler::linemapper::NoLine.is_1 (local.get $var$9)))
                      (br_if $B4_1 (call $src::compiler::linemapper::Line.is_1 (local.get $var$9)))
                      (br_if $B4_2 (call $src::compiler::linemapper::LineCons.is_1 (local.get $var$9)))
                    )
                  (block $B3
                      (local.set $src::compiler::linemapper::left_6 (call $src::compiler::linemapper::LineCons.left_1 (local.get $var$9)))
                      (local.set $src::compiler::linemapper::right_5 (call $src::compiler::linemapper::LineCons.right_1 (local.get $var$9)))
                      (local.set $src::compiler::linemapper::offset2 (call $src::helpers::repeat_1 (i64.const 0x0000000400008763) (local.get $indentation)))
                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000876c)))
                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::linemapper::offset2)) (i64.const 0x0000000400008783)))
                      (call $src::compiler::linemapper::LineData.printTo_1 (local.get $src::compiler::linemapper::left_6) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::linemapper::offset2)) (i64.const 0x000000040000878c)))
                      (call $src::compiler::linemapper::LineData.printTo_1 (local.get $src::compiler::linemapper::right_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                    )
                  (br $B4)
                )
              (block $B2
                  (local.set $src::compiler::linemapper::line_5 (call $src::compiler::linemapper::Line.line_1 (local.get $var$9)))
                  (local.set $src::compiler::linemapper::start_3 (call $src::compiler::linemapper::Line.start_1 (local.get $var$9)))
                  (local.set $src::compiler::linemapper::end_2 (call $src::compiler::linemapper::Line.end_1 (local.get $var$9)))
                  (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000873d)) (call $system::core::string::string.stringify_6 (local.get $src::compiler::linemapper::line_5))) (i64.const 0x000000040000874c)) (call $system::core::string::string.stringify_6 (local.get $src::compiler::linemapper::start_3))) (i64.const 0x0000000400008753)) (call $system::core::string::string.stringify_6 (local.get $src::compiler::linemapper::end_2))) (i64.const 0x000000040000875a)))
                )
              (br $B4)
            )
          (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400008730))
          (br $B4)
        )
    )
  )
  (func $src::compiler::linemapper::LineMapper.apply_3 (param $source i64) (result i64)
    (call $src::compiler::linemapper::LineMapper.apply_1 (local.get $source) (call $src::helpers::Nil.apply_1))
  )
  (func $src::compiler::linemapper::LineMapper.initializeData_1 (param $source i64) (result i64)
    (local $src::compiler::linemapper::start_4 i32)
    (local $src::compiler::linemapper::end_3 i32)
    (local $src::compiler::linemapper::len i32)
    (local $src::compiler::linemapper::currentLine i32)
    (local $src::compiler::linemapper::defaultLine i64)
    (local $src::compiler::linemapper::ret i64)
    (local $src::compiler::linemapper::char i32)
    (block $B1 (result i64)
      (local.set $src::compiler::linemapper::start_4 (i32.const 0x0))
      (local.set $src::compiler::linemapper::end_3 (local.get $src::compiler::linemapper::start_4))
      (local.set $src::compiler::linemapper::len (call $system::core::string::string.length_1 (local.get $source)))
      (local.set $src::compiler::linemapper::currentLine (i32.const 0x0))
      (local.set $src::compiler::linemapper::defaultLine (call $src::compiler::linemapper::Line.apply_1 (i32.const 0x0) (i32.const 0x0) (i32.const 0x0)))
      (local.set $src::compiler::linemapper::ret (local.get $src::compiler::linemapper::defaultLine))
      (block $Break2
          (loop $Loop2
              (if $IF3 (call $system::core::u32::u32.<_1 (local.get $src::compiler::linemapper::end_3) (local.get $src::compiler::linemapper::len))
                  (then
                    (block $B4
                        (local.set $src::compiler::linemapper::char (call $system::core::string::string.___1 (local.get $source) (local.get $src::compiler::linemapper::end_3)))
                        (local.set $src::compiler::linemapper::end_3 (call $system::core::u32::u32.+_1 (local.get $src::compiler::linemapper::end_3) (i32.const 0x1)))
                        (if $IF5 (call $system::core::boolean::boolean.&&_1 (call $system::core::u16::u16.==_1 (local.get $src::compiler::linemapper::char) (i32.const 0xD)) (call $system::core::u32::u32.<_1 (call $system::core::u32::u32.+_1 (local.get $src::compiler::linemapper::end_3) (i32.const 0x1)) (local.get $src::compiler::linemapper::len)))
                            (then
                              (block $B6
                                  (if $IF7 (call $system::core::u16::u16.==_1 (call $system::core::string::string.___1 (local.get $source) (call $system::core::u32::u32.+_1 (local.get $src::compiler::linemapper::end_3) (i32.const 0x1))) (i32.const 0xA))
                                      (then
                                        (block $B8
                                            (local.set $src::compiler::linemapper::end_3 (call $system::core::u32::u32.+_1 (local.get $src::compiler::linemapper::end_3) (i32.const 0x1)))
                                            (if $IF9 (call $system::core::u32::u32.==_1 (local.get $src::compiler::linemapper::currentLine) (i32.const 0x0))
                                                (then
                                                  (block $B10
                                                      (local.set $src::compiler::linemapper::ret (call $src::compiler::linemapper::Line.apply_1 (i32.const 0x0) (local.get $src::compiler::linemapper::start_4) (local.get $src::compiler::linemapper::end_3)))
                                                    )
                                                )
                                                (else
                                                  (block $B11
                                                      (local.set $src::compiler::linemapper::ret (call $src::compiler::linemapper::LineCons.apply_1 (local.get $src::compiler::linemapper::ret) (call $src::compiler::linemapper::Line.apply_1 (local.get $src::compiler::linemapper::currentLine) (local.get $src::compiler::linemapper::start_4) (local.get $src::compiler::linemapper::end_3))))
                                                    )
                                                )
                                              )
                                            (local.set $src::compiler::linemapper::currentLine (call $system::core::u32::u32.+_1 (local.get $src::compiler::linemapper::currentLine) (i32.const 0x1)))
                                            (local.set $src::compiler::linemapper::start_4 (local.get $src::compiler::linemapper::end_3))
                                          )
                                      )
                                      (else)
                                    )
                                )
                            )
                            (else
                              (if $IF12 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.==_1 (local.get $src::compiler::linemapper::char) (i32.const 0xA)) (call $system::core::u16::u16.==_1 (local.get $src::compiler::linemapper::char) (i32.const 0x2028))) (call $system::core::u16::u16.==_1 (local.get $src::compiler::linemapper::char) (i32.const 0x2029)))
                                  (then
                                    (block $B13
                                        (if $IF14 (call $system::core::u32::u32.==_1 (local.get $src::compiler::linemapper::currentLine) (i32.const 0x0))
                                            (then
                                              (block $B15
                                                  (local.set $src::compiler::linemapper::ret (call $src::compiler::linemapper::Line.apply_1 (i32.const 0x0) (local.get $src::compiler::linemapper::start_4) (local.get $src::compiler::linemapper::end_3)))
                                                )
                                            )
                                            (else
                                              (block $B16
                                                  (local.set $src::compiler::linemapper::ret (call $src::compiler::linemapper::LineCons.apply_1 (local.get $src::compiler::linemapper::ret) (call $src::compiler::linemapper::Line.apply_1 (local.get $src::compiler::linemapper::currentLine) (local.get $src::compiler::linemapper::start_4) (local.get $src::compiler::linemapper::end_3))))
                                                )
                                            )
                                          )
                                        (local.set $src::compiler::linemapper::currentLine (call $system::core::u32::u32.+_1 (local.get $src::compiler::linemapper::currentLine) (i32.const 0x1)))
                                        (local.set $src::compiler::linemapper::start_4 (local.get $src::compiler::linemapper::end_3))
                                      )
                                  )
                                  (else)
                                )
                            )
                          )
                        (br $Loop2)
                      )
                  )
                  (else)
                )
            )
        )
      (if $IF17 (call $system::core::u32::u32.==_1 (local.get $src::compiler::linemapper::currentLine) (i32.const 0x0))
          (then
            (block $B18
                (local.set $src::compiler::linemapper::ret (call $src::compiler::linemapper::Line.apply_1 (i32.const 0x0) (local.get $src::compiler::linemapper::start_4) (local.get $src::compiler::linemapper::end_3)))
              )
          )
          (else
            (block $B19
                (local.set $src::compiler::linemapper::ret (call $src::compiler::linemapper::LineCons.apply_1 (local.get $src::compiler::linemapper::ret) (call $src::compiler::linemapper::Line.apply_1 (local.get $src::compiler::linemapper::currentLine) (local.get $src::compiler::linemapper::start_4) (local.get $src::compiler::linemapper::end_3))))
              )
          )
        )
      (local.get $src::compiler::linemapper::ret)
    )
  )
  (func $src::compiler::linemapper::LineMapper.ensureLineData_1 (param $self i64) (result i64)
    (local $var$1 i64)
    (block $B2 (result i64)
      (local.set $var$1 (call $src::compiler::linemapper::LineMapper.lineData_1 (local.get $self)))
      (block $B2_0
          (block $B2_1
              (br_if $B2_0 (call $src::helpers::Nil.is_1 (local.get $var$1)))
              (br_if $B2_1 (call $src::compiler::linemapper::LineData.is_1 (local.get $var$1)))
            )
          (local.get $var$1)
          (br $B2)
        )
      (block $B1 (result i64)
          (call $src::compiler::linemapper::LineMapper.lineData_2 (local.get $self) (call $src::compiler::linemapper::LineMapper.initializeData_1 (call $src::compiler::linemapper::LineMapper.source_1 (local.get $self))))
          (call $src::compiler::linemapper::LineMapper.ensureLineData_1 (local.get $self))
        )
      (br $B2)
    )
  )
  (func $src::compiler::linemapper::LineMapper.getLine_1 (param $self i64) (param $position i32) (result i64)
    (block $B1 (result i64)
      (call $src::compiler::linemapper::LineData.getLine_1 (call $src::compiler::linemapper::LineMapper.ensureLineData_1 (local.get $self)) (local.get $position))
    )
  )
  (func $src::compiler::linemapper::LineMapper.getLinePosition_1 (param $self i64) (param $line i32) (result i64)
    (block $B1 (result i64)
      (call $src::compiler::linemapper::LineData.getLinePosition_1 (call $src::compiler::linemapper::LineMapper.ensureLineData_1 (local.get $self)) (local.get $line))
    )
  )
  (data 0 (i32.const 34560) "$\00\00\00U\00n\00e\00x\00p\00e\00c\00t\00e\00d\00 \00t\00o\00k\00e\00n\00 \00\22\00\00")
  (data 0 (i32.const 34601) "\02\00\00\00\22\00\00")
  (func $src::compiler::messagecollector::SourcePosition.is_1 (param $a i64) (result i32)
    (local $src::compiler::messagecollector::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::compiler::messagecollector::discriminant (i32.const 171))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::messagecollector::discriminant))
    )
  )
  (func $src::compiler::messagecollector::SourcePosition.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::messagecollector::SourcePosition.SourcePosition$discriminant_1 (result i64)
    (local $src::compiler::messagecollector::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::discriminant_1 (i32.const 171))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::messagecollector::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::compiler::messagecollector::SourcePosition.apply_1 (param $path i64) (param $start i32) (param $end i32) (result i64)
    (local $src::compiler::messagecollector::$ref i64)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::$ref (call $src::compiler::messagecollector::SourcePosition.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::messagecollector::SourcePosition.property$0_2 (local.get $src::compiler::messagecollector::$ref) (local.get $path))
      (call $src::compiler::messagecollector::SourcePosition.property$1_2 (local.get $src::compiler::messagecollector::$ref) (local.get $start))
      (call $src::compiler::messagecollector::SourcePosition.property$2_2 (local.get $src::compiler::messagecollector::$ref) (local.get $end))
      (local.get $src::compiler::messagecollector::$ref)
    )
  )
  (func $src::compiler::messagecollector::SourcePosition.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::messagecollector::SourcePosition.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::messagecollector::SourcePosition.SourcePosition$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::messagecollector::SourcePosition.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::SourcePosition.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::SourcePosition.path_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::SourcePosition.property$0_1 (local.get $self))
  )
  (func $src::compiler::messagecollector::SourcePosition.path_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::SourcePosition.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::messagecollector::SourcePosition.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::messagecollector::SourcePosition.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::messagecollector::SourcePosition.start_1 (param $self i64) (result i32)
    (call $src::compiler::messagecollector::SourcePosition.property$1_1 (local.get $self))
  )
  (func $src::compiler::messagecollector::SourcePosition.start_2 (param $self i64) (param $value i32)
    (call $src::compiler::messagecollector::SourcePosition.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::messagecollector::SourcePosition.property$1_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::messagecollector::SourcePosition.property$1_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::messagecollector::SourcePosition.end_1 (param $self i64) (result i32)
    (call $src::compiler::messagecollector::SourcePosition.property$2_1 (local.get $self))
  )
  (func $src::compiler::messagecollector::SourcePosition.end_2 (param $self i64) (param $value i32)
    (call $src::compiler::messagecollector::SourcePosition.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::messagecollector::SourcePosition.property$2_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 12))
  )
  (func $src::compiler::messagecollector::SourcePosition.property$2_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 12))
  )
  (func $src::compiler::messagecollector::SourcePosition.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::messagecollector::SourcePosition.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::messagecollector::Message.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::compiler::messagecollector::HeadMessage.is_1 (local.get $self)) (call $src::compiler::messagecollector::PositionCapableMessage.is_1 (local.get $self))) (call $src::compiler::messagecollector::MessageCons.is_1 (local.get $self)))
    )
  )
  (func $src::compiler::messagecollector::Message.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::messagecollector::Message.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::messagecollector::Message.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::messagecollector::Message.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::messagecollector::Message.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::messagecollector::HeadMessage.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::messagecollector::MessageCons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::messagecollector::HeadMessage.is_1 (param $a i64) (result i32)
    (local $src::compiler::messagecollector::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::messagecollector::discriminant_2 (i32.const 172))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::messagecollector::discriminant_2))
    )
  )
  (func $src::compiler::messagecollector::HeadMessage.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::messagecollector::HeadMessage.HeadMessage$discriminant_1 (result i64)
    (local $src::compiler::messagecollector::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::discriminant_3 (i32.const 172))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::messagecollector::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::compiler::messagecollector::HeadMessage.apply_1 (result i64)
    (call $src::compiler::messagecollector::HeadMessage.HeadMessage$discriminant_1)
  )
  (func $src::compiler::messagecollector::HeadMessage.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::HeadMessage.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::HeadMessage.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::messagecollector::HeadMessage.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.is_1 (param $a i64) (result i32)
    (local $src::compiler::messagecollector::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::messagecollector::discriminant_4 (i32.const 173))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::messagecollector::discriminant_4))
    )
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.PositionCapableMessage$discriminant_1 (result i64)
    (local $src::compiler::messagecollector::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::discriminant_5 (i32.const 173))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::messagecollector::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.apply_1 (param $message i64) (param $position i64) (result i64)
    (local $src::compiler::messagecollector::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::$ref_1 (call $src::compiler::messagecollector::PositionCapableMessage.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::messagecollector::PositionCapableMessage.property$0_2 (local.get $src::compiler::messagecollector::$ref_1) (local.get $message))
      (call $src::compiler::messagecollector::PositionCapableMessage.property$1_2 (local.get $src::compiler::messagecollector::$ref_1) (local.get $position))
      (local.get $src::compiler::messagecollector::$ref_1)
    )
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::messagecollector::PositionCapableMessage.PositionCapableMessage$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.message_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::PositionCapableMessage.property$0_1 (local.get $self))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.message_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::PositionCapableMessage.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.position_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::PositionCapableMessage.property$1_1 (local.get $self))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.position_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::PositionCapableMessage.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::SourcePosition.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::SourcePosition.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::messagecollector::PositionCapableMessage.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::messagecollector::MessageCons.is_1 (param $a i64) (result i32)
    (local $src::compiler::messagecollector::discriminant_6 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::messagecollector::discriminant_6 (i32.const 174))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::messagecollector::discriminant_6))
    )
  )
  (func $src::compiler::messagecollector::MessageCons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::messagecollector::MessageCons.MessageCons$discriminant_1 (result i64)
    (local $src::compiler::messagecollector::discriminant_7 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::discriminant_7 (i32.const 174))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::messagecollector::discriminant_7)) (i32.const 32))
    )
  )
  (func $src::compiler::messagecollector::MessageCons.apply_1 (param $head i64) (param $tail i64) (result i64)
    (local $src::compiler::messagecollector::$ref_2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::$ref_2 (call $src::compiler::messagecollector::MessageCons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::messagecollector::MessageCons.property$0_2 (local.get $src::compiler::messagecollector::$ref_2) (local.get $head))
      (call $src::compiler::messagecollector::MessageCons.property$1_2 (local.get $src::compiler::messagecollector::$ref_2) (local.get $tail))
      (local.get $src::compiler::messagecollector::$ref_2)
    )
  )
  (func $src::compiler::messagecollector::MessageCons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::messagecollector::MessageCons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::messagecollector::MessageCons.MessageCons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::messagecollector::MessageCons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::MessageCons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::MessageCons.head_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::MessageCons.property$0_1 (local.get $self))
  )
  (func $src::compiler::messagecollector::MessageCons.head_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::MessageCons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::messagecollector::MessageCons.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::Message.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::messagecollector::MessageCons.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::Message.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::messagecollector::MessageCons.tail_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::MessageCons.property$1_1 (local.get $self))
  )
  (func $src::compiler::messagecollector::MessageCons.tail_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::MessageCons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::messagecollector::MessageCons.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::Message.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::messagecollector::MessageCons.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::Message.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::messagecollector::MessageCons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::messagecollector::MessageCons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::messagecollector::MessageCollector.is_1 (param $a i64) (result i32)
    (local $src::compiler::messagecollector::discriminant_8 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::messagecollector::discriminant_8 (i32.const 175))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::messagecollector::discriminant_8))
    )
  )
  (func $src::compiler::messagecollector::MessageCollector.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::messagecollector::MessageCollector.MessageCollector$discriminant_1 (result i64)
    (local $src::compiler::messagecollector::discriminant_9 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::discriminant_9 (i32.const 175))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::messagecollector::discriminant_9)) (i32.const 32))
    )
  )
  (func $src::compiler::messagecollector::MessageCollector.apply_1 (param $headMessage i64) (result i64)
    (local $src::compiler::messagecollector::$ref_3 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::messagecollector::$ref_3 (call $src::compiler::messagecollector::MessageCollector.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::messagecollector::MessageCollector.property$0_2 (local.get $src::compiler::messagecollector::$ref_3) (local.get $headMessage))
      (local.get $src::compiler::messagecollector::$ref_3)
    )
  )
  (func $src::compiler::messagecollector::MessageCollector.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::messagecollector::MessageCollector.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::messagecollector::MessageCollector.MessageCollector$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::messagecollector::MessageCollector.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::MessageCollector.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::messagecollector::MessageCollector.headMessage_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::MessageCollector.property$0_1 (local.get $self))
  )
  (func $src::compiler::messagecollector::MessageCollector.headMessage_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::MessageCollector.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::messagecollector::MessageCollector.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::Message.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::messagecollector::MessageCollector.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::Message.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::messagecollector::MessageCollector.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::messagecollector::MessageCollector.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::messagecollector::MessageCollector.apply_3 (result i64)
    (call $src::compiler::messagecollector::MessageCollector.apply_1 (call $src::compiler::messagecollector::HeadMessage.apply_1))
  )
  (func $src::compiler::messagecollector::MessageCollector.append_1 (param $self i64) (param $message i64) (param $position i64)
    (block $B1
      (call $src::compiler::messagecollector::MessageCollector.append_2 (local.get $self) (call $src::compiler::messagecollector::PositionCapableMessage.apply_1 (local.get $message) (local.get $position)))
    )
  )
  (func $src::compiler::messagecollector::MessageCollector.append_2 (param $self i64) (param $message i64)
    (local $var$2 i64)
    (block $B1
      (local.set $var$2 (call $src::compiler::messagecollector::MessageCollector.headMessage_1 (local.get $self)))
      (block $B1_0
          (block $B1_1
              (br_if $B1_0 (call $src::compiler::messagecollector::HeadMessage.is_1 (local.get $var$2)))
            )
          (call $src::compiler::messagecollector::MessageCollector.headMessage_2 (local.get $self) (call $src::compiler::messagecollector::MessageCons.apply_1 (local.get $message) (call $src::compiler::messagecollector::MessageCollector.headMessage_1 (local.get $self))))
          (br $B1)
        )
      (call $src::compiler::messagecollector::MessageCollector.headMessage_2 (local.get $self) (local.get $message))
      (br $B1)
    )
  )
  (func $src::compiler::messagecollector::collectErrors_1 (param $node i64) (param $messageCollector i64) (param $path i64) (result i32)
    (local $src::compiler::messagecollector::token i64)
    (local $src::compiler::messagecollector::message_3 i64)
    (local $src::compiler::messagecollector::token_1 i64)
    (local $src::compiler::messagecollector::value_16 i64)
    (local $src::compiler::messagecollector::name i64)
    (local $src::compiler::messagecollector::child i64)
    (local $src::compiler::messagecollector::head_1 i64)
    (local $src::compiler::messagecollector::tail_1 i64)
    (local $var$11 i64)
    (block $B5 (result i32)
      (local.set $var$11 (local.get $node))
      (block $B5_0
          (block $B5_1
              (block $B5_2
                  (block $B5_3
                      (block $B5_4
                          (br_if $B5_0 (call $src::parser::parser::SyntaxError.is_1 (local.get $var$11)))
                          (br_if $B5_1 (call $src::parser::parser::UnexpectedToken.is_1 (local.get $var$11)))
                          (br_if $B5_2 (call $src::parser::parser::Node.is_1 (local.get $var$11)))
                          (br_if $B5_3 (call $src::parser::parser::AstCons.is_1 (local.get $var$11)))
                        )
                      (i32.const 0)
                      (br $B5)
                    )
                  (block $B4 (result i32)
                      (local.set $src::compiler::messagecollector::head_1 (call $src::parser::parser::AstCons.head_1 (local.get $var$11)))
                      (local.set $src::compiler::messagecollector::tail_1 (call $src::parser::parser::AstCons.tail_1 (local.get $var$11)))
                      (call $system::core::i32::i32.+_1 (call $src::compiler::messagecollector::collectErrors_1 (local.get $src::compiler::messagecollector::head_1) (local.get $messageCollector) (local.get $path)) (call $src::compiler::messagecollector::collectErrors_1 (local.get $src::compiler::messagecollector::tail_1) (local.get $messageCollector) (local.get $path)))
                    )
                  (br $B5)
                )
              (block $B3 (result i32)
                  (local.set $src::compiler::messagecollector::name (call $src::parser::parser::Node.name_1 (local.get $var$11)))
                  (local.set $src::compiler::messagecollector::child (call $src::parser::parser::Node.child_1 (local.get $var$11)))
                  (call $src::compiler::messagecollector::collectErrors_1 (local.get $src::compiler::messagecollector::child) (local.get $messageCollector) (local.get $path))
                )
              (br $B5)
            )
          (block $B2 (result i32)
              (local.set $src::compiler::messagecollector::token_1 (call $src::parser::parser::UnexpectedToken.token_1 (local.get $var$11)))
              (local.set $src::compiler::messagecollector::value_16 (call $src::parser::parser::UnexpectedToken.value_1 (local.get $var$11)))
              (call $src::compiler::messagecollector::MessageCollector.append_1 (local.get $messageCollector) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400008700) (local.get $src::compiler::messagecollector::value_16)) (i64.const 0x0000000400008729)) (call $src::compiler::messagecollector::SourcePosition.apply_1 (local.get $path) (call $src::lexer::tokens::Token.start_1 (local.get $src::compiler::messagecollector::token_1)) (call $src::lexer::tokens::Token.end_1 (local.get $src::compiler::messagecollector::token_1))))
              (i32.const 1)
            )
          (br $B5)
        )
      (block $B1 (result i32)
          (local.set $src::compiler::messagecollector::token (call $src::parser::parser::SyntaxError.token_1 (local.get $var$11)))
          (local.set $src::compiler::messagecollector::message_3 (call $src::parser::parser::SyntaxError.message_1 (local.get $var$11)))
          (call $src::compiler::messagecollector::MessageCollector.append_1 (local.get $messageCollector) (local.get $src::compiler::messagecollector::message_3) (call $src::compiler::messagecollector::SourcePosition.apply_1 (local.get $path) (call $src::lexer::tokens::Token.start_1 (local.get $src::compiler::messagecollector::token)) (call $src::lexer::tokens::Token.end_1 (local.get $src::compiler::messagecollector::token))))
          (i32.const 1)
        )
      (br $B5)
    )
  )
  (func $src::compiler::scope::NodeScope.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::compiler::scope::NoScope.is_1 (local.get $self)) (call $src::compiler::scope::ScopeCons.is_1 (local.get $self))) (call $src::compiler::scope::Scope.is_1 (local.get $self)))
    )
  )
  (func $src::compiler::scope::NodeScope.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::scope::NodeScope.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::scope::NodeScope.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::scope::NodeScope.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::scope::NodeScope.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::scope::NoScope.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::scope::ScopeCons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::scope::Scope.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::scope::NoScope.is_1 (param $a i64) (result i32)
    (local $src::compiler::scope::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::compiler::scope::discriminant (i32.const 45))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::scope::discriminant))
    )
  )
  (func $src::compiler::scope::NoScope.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::scope::NoScope.NoScope$discriminant_1 (result i64)
    (local $src::compiler::scope::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::scope::discriminant_1 (i32.const 45))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::scope::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::compiler::scope::NoScope.apply_1 (result i64)
    (call $src::compiler::scope::NoScope.NoScope$discriminant_1)
  )
  (func $src::compiler::scope::NoScope.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::scope::NoScope.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::scope::NoScope.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::scope::NoScope.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::scope::ScopeCons.is_1 (param $a i64) (result i32)
    (local $src::compiler::scope::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::scope::discriminant_2 (i32.const 46))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::scope::discriminant_2))
    )
  )
  (func $src::compiler::scope::ScopeCons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::scope::ScopeCons.ScopeCons$discriminant_1 (result i64)
    (local $src::compiler::scope::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::scope::discriminant_3 (i32.const 46))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::scope::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::compiler::scope::ScopeCons.apply_1 (param $lhs i64) (param $rhs i64) (result i64)
    (local $src::compiler::scope::$ref i64)
    (block $B1 (result i64)
      (local.set $src::compiler::scope::$ref (call $src::compiler::scope::ScopeCons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::scope::ScopeCons.property$0_2 (local.get $src::compiler::scope::$ref) (local.get $lhs))
      (call $src::compiler::scope::ScopeCons.property$1_2 (local.get $src::compiler::scope::$ref) (local.get $rhs))
      (local.get $src::compiler::scope::$ref)
    )
  )
  (func $src::compiler::scope::ScopeCons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::scope::ScopeCons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::scope::ScopeCons.ScopeCons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::scope::ScopeCons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::scope::ScopeCons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::scope::ScopeCons.lhs_1 (param $self i64) (result i64)
    (call $src::compiler::scope::ScopeCons.property$0_1 (local.get $self))
  )
  (func $src::compiler::scope::ScopeCons.lhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::ScopeCons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::scope::ScopeCons.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::scope::NodeScope.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::scope::ScopeCons.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::NodeScope.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::scope::ScopeCons.rhs_1 (param $self i64) (result i64)
    (call $src::compiler::scope::ScopeCons.property$1_1 (local.get $self))
  )
  (func $src::compiler::scope::ScopeCons.rhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::ScopeCons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::scope::ScopeCons.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::scope::Scope.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::scope::ScopeCons.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::Scope.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::scope::ScopeCons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::scope::ScopeCons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::scope::Scope.is_1 (param $a i64) (result i32)
    (local $src::compiler::scope::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::scope::discriminant_4 (i32.const 47))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::scope::discriminant_4))
    )
  )
  (func $src::compiler::scope::Scope.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::scope::Scope.Scope$discriminant_1 (result i64)
    (local $src::compiler::scope::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::scope::discriminant_5 (i32.const 47))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::scope::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::compiler::scope::Scope.apply_1 (param $name i64) (param $moduleName i64) (param $parent i64) (param $childrenScopes i64) (result i64)
    (local $src::compiler::scope::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::scope::$ref_1 (call $src::compiler::scope::Scope.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::scope::Scope.property$0_2 (local.get $src::compiler::scope::$ref_1) (local.get $name))
      (call $src::compiler::scope::Scope.property$1_2 (local.get $src::compiler::scope::$ref_1) (local.get $moduleName))
      (call $src::compiler::scope::Scope.property$2_2 (local.get $src::compiler::scope::$ref_1) (local.get $parent))
      (call $src::compiler::scope::Scope.property$3_2 (local.get $src::compiler::scope::$ref_1) (local.get $childrenScopes))
      (local.get $src::compiler::scope::$ref_1)
    )
  )
  (func $src::compiler::scope::Scope.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::scope::Scope.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::scope::Scope.Scope$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::scope::Scope.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::scope::Scope.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::scope::Scope.name_1 (param $self i64) (result i64)
    (call $src::compiler::scope::Scope.property$0_1 (local.get $self))
  )
  (func $src::compiler::scope::Scope.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::Scope.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::scope::Scope.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::scope::Scope.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::scope::Scope.moduleName_1 (param $self i64) (result i64)
    (call $src::compiler::scope::Scope.property$1_1 (local.get $self))
  )
  (func $src::compiler::scope::Scope.moduleName_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::Scope.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::scope::Scope.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::scope::Scope.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::scope::Scope.parent_1 (param $self i64) (result i64)
    (call $src::compiler::scope::Scope.property$2_1 (local.get $self))
  )
  (func $src::compiler::scope::Scope.parent_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::Scope.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::scope::Scope.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::scope::NodeScope.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::scope::Scope.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::NodeScope.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::scope::Scope.childrenScopes_1 (param $self i64) (result i64)
    (call $src::compiler::scope::Scope.property$3_1 (local.get $self))
  )
  (func $src::compiler::scope::Scope.childrenScopes_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::Scope.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::scope::Scope.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::scope::NodeScope.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::scope::Scope.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::NodeScope.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::scope::Scope.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::scope::Scope.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::scope::Scope.apply_3 (param $name i64) (param $moduleName i64) (param $parent i64) (result i64)
    (block $B1 (result i64)
      (call $src::compiler::scope::Scope.apply_1 (local.get $name) (local.get $moduleName) (local.get $parent) (call $src::compiler::scope::NoScope.apply_1))
    )
  )
  (func $src::compiler::scope::Scope.isDescendantOf_1 (param $self i64) (param $parentScope i64) (result i32)
    (local $src::compiler::scope::p i64)
    (local $var$3 i64)
    (block $B1 (result i32)
      (local.set $src::compiler::scope::p (call $src::compiler::scope::Scope.parent_1 (local.get $self)))
      (block $B7 (result i32)
          (local.set $var$3 (local.get $src::compiler::scope::p))
          (block $B7_0
              (block $B7_1
                  (br_if $B7_0 (call $src::compiler::scope::Scope.is_1 (local.get $var$3)))
                )
              (block $B6 (result i32)
                  (i32.const 0)
                )
              (br $B7)
            )
          (block $B2 (result i32)
              (if $IF3 (result i32) (call $src::compiler::scope::Scope.==_1 (local.get $parentScope) (local.get $var$3))
                  (then
                    (block $B4 (result i32)
                        (i32.const 1)
                      )
                  )
                  (else
                    (block $B5 (result i32)
                        (call $src::compiler::scope::Scope.isDescendantOf_1 (local.get $var$3) (local.get $parentScope))
                      )
                  )
                )
            )
          (br $B7)
        )
    )
  )
  (func $src::compiler::scope::Scope.newChildScope_1 (param $self i64) (param $nameHint i64) (result i64)
    (local $src::compiler::scope::newScope i64)
    (local $src::compiler::scope::ch i64)
    (local $src::compiler::scope::newChildScope i64)
    (local $var$5 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::scope::newScope (call $src::compiler::scope::Scope.apply_1 (local.get $nameHint) (call $src::compiler::scope::Scope.moduleName_1 (local.get $self)) (local.get $self) (call $src::compiler::scope::NoScope.apply_1)))
      (local.set $src::compiler::scope::ch (call $src::compiler::scope::Scope.childrenScopes_1 (local.get $self)))
      (local.set $src::compiler::scope::newChildScope (block $B4 (result i64)
                (local.set $var$5 (local.get $src::compiler::scope::ch))
                (block $B4_0
                    (block $B4_1
                        (br_if $B4_0 (call $src::compiler::scope::NoScope.is_1 (local.get $var$5)))
                      )
                    (block $B3 (result i64)
                        (call $src::compiler::scope::ScopeCons.apply_1 (call $src::compiler::scope::Scope.childrenScopes_1 (local.get $self)) (local.get $src::compiler::scope::newScope))
                      )
                    (br $B4)
                  )
                (block $B2 (result i64)
                    (local.get $src::compiler::scope::newScope)
                  )
                (br $B4)
              ))
      (call $src::compiler::scope::Scope.childrenScopes_2 (local.get $self) (local.get $src::compiler::scope::newChildScope))
      (local.get $src::compiler::scope::newScope)
    )
  )
  (data 0 (i32.const 33829) "\18\00\00\00N\00o\00A\00n\00n\00o\00t\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 33858) "\1c\00\00\00A\00n\00n\00o\00t\00a\00t\00i\00o\00n\00C\00o\00n\00s\00\00")
  (data 0 (i32.const 33891) "\12\00\00\00I\00s\00T\00a\00i\00l\00R\00e\00c\00\00")
  (data 0 (i32.const 33914) "\10\00\00\00I\00n\00j\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 33935) "\18\00\00\00I\00s\00O\00v\00e\00r\00l\00o\00a\00d\00e\00d\00\00")
  (data 0 (i32.const 33964) "\0c\00\00\00I\00n\00l\00i\00n\00e\00\00")
  (data 0 (i32.const 33981) "\0c\00\00\00G\00e\00t\00t\00e\00r\00\00")
  (data 0 (i32.const 33998) "\0c\00\00\00S\00e\00t\00t\00e\00r\00\00")
  (data 0 (i32.const 34015) "\0c\00\00\00M\00e\00t\00h\00o\00d\00\00")
  (data 0 (i32.const 34032) "\14\00\00\00M\00e\00t\00h\00o\00d\00C\00a\00l\00l\00\00")
  (data 0 (i32.const 34057) "(\00\00\00S\00i\00g\00n\00a\00t\00u\00r\00e\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 34102) "\10\00\00\00E\00x\00p\00l\00i\00c\00i\00t\00\00")
  (data 0 (i32.const 34123) "\1c\00\00\00B\00y\00P\00a\00s\00s\00F\00u\00n\00c\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 34156) "\0c\00\00\00E\00x\00t\00e\00r\00n\00\00")
  (data 0 (i32.const 34173) "\0c\00\00\00E\00x\00p\00o\00r\00t\00\00")
  (data 0 (i32.const 34190) "$\00\00\00M\00u\00t\00a\00b\00l\00e\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 34231) "\0e\00\00\00L\00a\00b\00e\00l\00I\00d\00\00")
  (data 0 (i32.const 34250) "\1e\00\00\00L\00o\00c\00a\00l\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 34285) "\1a\00\00\00I\00s\00T\00a\00i\00l\00R\00e\00c\00C\00a\00l\00l\00\00")
  (data 0 (i32.const 34316) "\16\00\00\00C\00u\00r\00r\00e\00n\00t\00L\00o\00o\00p\00\00")
  (data 0 (i32.const 34343) "\18\00\00\00I\00m\00p\00l\00i\00c\00i\00t\00C\00a\00l\00l\00\00")
  (data 0 (i32.const 34372) "\1a\00\00\00I\00s\00U\00n\00r\00e\00a\00c\00h\00a\00b\00l\00e\00\00")
  (data 0 (i32.const 34403) "\16\00\00\00I\00s\00V\00a\00l\00u\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 34430) " \00\00\00I\00s\00A\00s\00s\00i\00g\00n\00a\00t\00i\00o\00n\00L\00H\00S\00\00")
  (data 0 (i32.const 34467) "\14\00\00\00I\00s\00T\00y\00p\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 34492) "\0a\00\00\00N\00o\00S\00t\00d\00\00")
  (data 0 (i32.const 34507) "$\00\00\00I\00s\00R\00e\00t\00u\00r\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 34548) "\00\00\00\00\00")
  (data 0 (i32.const 34553) "\02\00\00\00,\00\00")
  (func $src::compiler::annotations::NodeAnnotation.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::compiler::annotations::NoAnnotation.is_1 (local.get $self)) (call $src::compiler::annotations::AnnotationCons.is_1 (local.get $self))) (call $src::compiler::annotations::IsTailRec.is_1 (local.get $self))) (call $src::compiler::annotations::Injected.is_1 (local.get $self))) (call $src::compiler::annotations::IsOverloaded.is_1 (local.get $self))) (call $src::compiler::annotations::Inline.is_1 (local.get $self))) (call $src::compiler::annotations::Getter.is_1 (local.get $self))) (call $src::compiler::annotations::Setter.is_1 (local.get $self))) (call $src::compiler::annotations::Method.is_1 (local.get $self))) (call $src::compiler::annotations::MethodCall.is_1 (local.get $self))) (call $src::compiler::annotations::SignatureDeclaration.is_1 (local.get $self))) (call $src::compiler::annotations::Explicit.is_1 (local.get $self))) (call $src::compiler::annotations::ByPassFunction.is_1 (local.get $self))) (call $src::compiler::annotations::Extern.is_1 (local.get $self))) (call $src::compiler::annotations::Export.is_1 (local.get $self))) (call $src::compiler::annotations::MutableDeclaration.is_1 (local.get $self))) (call $src::compiler::annotations::LabelId.is_1 (local.get $self))) (call $src::compiler::annotations::LocalIdentifier.is_1 (local.get $self))) (call $src::compiler::annotations::IsTailRecCall.is_1 (local.get $self))) (call $src::compiler::annotations::CurrentLoop.is_1 (local.get $self))) (call $src::compiler::annotations::ImplicitCall.is_1 (local.get $self))) (call $src::compiler::annotations::IsUnreachable.is_1 (local.get $self))) (call $src::compiler::annotations::IsValueNode.is_1 (local.get $self))) (call $src::compiler::annotations::IsAssignationLHS.is_1 (local.get $self))) (call $src::compiler::annotations::IsTypeNode.is_1 (local.get $self))) (call $src::compiler::annotations::NoStd.is_1 (local.get $self))) (call $src::compiler::annotations::IsReturnExpression.is_1 (local.get $self)))
    )
  )
  (func $src::compiler::annotations::NodeAnnotation.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::annotations::NodeAnnotation.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::annotations::NodeAnnotation.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::annotations::NodeAnnotation.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::NodeAnnotation.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::NoAnnotation.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::AnnotationCons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsTailRec.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Injected.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsOverloaded.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Inline.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Getter.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Setter.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Method.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::MethodCall.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::SignatureDeclaration.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Explicit.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::ByPassFunction.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Extern.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Export.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::MutableDeclaration.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::LabelId.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::LocalIdentifier.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsTailRecCall.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::CurrentLoop.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::ImplicitCall.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsUnreachable.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsValueNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsAssignationLHS.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsTypeNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::NoStd.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsReturnExpression.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::NoAnnotation.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant (i32.const 17))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant))
    )
  )
  (func $src::compiler::annotations::NoAnnotation.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::NoAnnotation.NoAnnotation$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_1 (i32.const 17))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::NoAnnotation.apply_1 (result i64)
    (call $src::compiler::annotations::NoAnnotation.NoAnnotation$discriminant_1)
  )
  (func $src::compiler::annotations::NoAnnotation.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::NoAnnotation.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::NoAnnotation.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::NoAnnotation.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::AnnotationCons.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_2 (i32.const 18))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_2))
    )
  )
  (func $src::compiler::annotations::AnnotationCons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::AnnotationCons.AnnotationCons$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_3 (i32.const 18))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::annotations::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::AnnotationCons.apply_1 (param $list i64) (param $element i64) (result i64)
    (local $src::compiler::annotations::$ref i64)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::$ref (call $src::compiler::annotations::AnnotationCons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::annotations::AnnotationCons.property$0_2 (local.get $src::compiler::annotations::$ref) (local.get $list))
      (call $src::compiler::annotations::AnnotationCons.property$1_2 (local.get $src::compiler::annotations::$ref) (local.get $element))
      (local.get $src::compiler::annotations::$ref)
    )
  )
  (func $src::compiler::annotations::AnnotationCons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::annotations::AnnotationCons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::annotations::AnnotationCons.AnnotationCons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::annotations::AnnotationCons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::AnnotationCons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::AnnotationCons.list_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::AnnotationCons.property$0_1 (local.get $self))
  )
  (func $src::compiler::annotations::AnnotationCons.list_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::AnnotationCons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::AnnotationCons.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::NodeAnnotation.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::annotations::AnnotationCons.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::NodeAnnotation.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::annotations::AnnotationCons.element_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::AnnotationCons.property$1_1 (local.get $self))
  )
  (func $src::compiler::annotations::AnnotationCons.element_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::AnnotationCons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::AnnotationCons.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::NodeAnnotation.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::annotations::AnnotationCons.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::NodeAnnotation.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::annotations::AnnotationCons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::AnnotationCons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::IsTailRec.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_4 (i32.const 19))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_4))
    )
  )
  (func $src::compiler::annotations::IsTailRec.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsTailRec.IsTailRec$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_5 (i32.const 19))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::IsTailRec.apply_1 (result i64)
    (call $src::compiler::annotations::IsTailRec.IsTailRec$discriminant_1)
  )
  (func $src::compiler::annotations::IsTailRec.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsTailRec.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsTailRec.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::IsTailRec.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::Injected.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_6 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_6 (i32.const 20))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_6))
    )
  )
  (func $src::compiler::annotations::Injected.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Injected.Injected$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_7 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_7 (i32.const 20))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_7)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::Injected.apply_1 (result i64)
    (call $src::compiler::annotations::Injected.Injected$discriminant_1)
  )
  (func $src::compiler::annotations::Injected.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Injected.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Injected.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::Injected.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::IsOverloaded.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_8 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_8 (i32.const 21))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_8))
    )
  )
  (func $src::compiler::annotations::IsOverloaded.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsOverloaded.IsOverloaded$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_9 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_9 (i32.const 21))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_9)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::IsOverloaded.apply_1 (result i64)
    (call $src::compiler::annotations::IsOverloaded.IsOverloaded$discriminant_1)
  )
  (func $src::compiler::annotations::IsOverloaded.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsOverloaded.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsOverloaded.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::IsOverloaded.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::Inline.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_10 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_10 (i32.const 22))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_10))
    )
  )
  (func $src::compiler::annotations::Inline.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Inline.Inline$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_11 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_11 (i32.const 22))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_11)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::Inline.apply_1 (result i64)
    (call $src::compiler::annotations::Inline.Inline$discriminant_1)
  )
  (func $src::compiler::annotations::Inline.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Inline.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Inline.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::Inline.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::Getter.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_12 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_12 (i32.const 23))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_12))
    )
  )
  (func $src::compiler::annotations::Getter.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Getter.Getter$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_13 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_13 (i32.const 23))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_13)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::Getter.apply_1 (result i64)
    (call $src::compiler::annotations::Getter.Getter$discriminant_1)
  )
  (func $src::compiler::annotations::Getter.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Getter.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Getter.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::Getter.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::Setter.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_14 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_14 (i32.const 24))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_14))
    )
  )
  (func $src::compiler::annotations::Setter.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Setter.Setter$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_15 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_15 (i32.const 24))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_15)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::Setter.apply_1 (result i64)
    (call $src::compiler::annotations::Setter.Setter$discriminant_1)
  )
  (func $src::compiler::annotations::Setter.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Setter.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Setter.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::Setter.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::Method.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_16 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_16 (i32.const 25))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_16))
    )
  )
  (func $src::compiler::annotations::Method.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Method.Method$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_17 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_17 (i32.const 25))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_17)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::Method.apply_1 (result i64)
    (call $src::compiler::annotations::Method.Method$discriminant_1)
  )
  (func $src::compiler::annotations::Method.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Method.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Method.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::Method.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::MethodCall.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_18 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_18 (i32.const 26))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_18))
    )
  )
  (func $src::compiler::annotations::MethodCall.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::MethodCall.MethodCall$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_19 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_19 (i32.const 26))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_19)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::MethodCall.apply_1 (result i64)
    (call $src::compiler::annotations::MethodCall.MethodCall$discriminant_1)
  )
  (func $src::compiler::annotations::MethodCall.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::MethodCall.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::MethodCall.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::MethodCall.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::SignatureDeclaration.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_20 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_20 (i32.const 27))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_20))
    )
  )
  (func $src::compiler::annotations::SignatureDeclaration.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::SignatureDeclaration.SignatureDeclaration$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_21 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_21 (i32.const 27))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_21)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::SignatureDeclaration.apply_1 (result i64)
    (call $src::compiler::annotations::SignatureDeclaration.SignatureDeclaration$discriminant_1)
  )
  (func $src::compiler::annotations::SignatureDeclaration.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::SignatureDeclaration.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::SignatureDeclaration.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::SignatureDeclaration.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::Explicit.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_22 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_22 (i32.const 28))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_22))
    )
  )
  (func $src::compiler::annotations::Explicit.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Explicit.Explicit$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_23 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_23 (i32.const 28))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_23)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::Explicit.apply_1 (result i64)
    (call $src::compiler::annotations::Explicit.Explicit$discriminant_1)
  )
  (func $src::compiler::annotations::Explicit.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Explicit.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Explicit.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::Explicit.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::ByPassFunction.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_24 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_24 (i32.const 29))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_24))
    )
  )
  (func $src::compiler::annotations::ByPassFunction.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::ByPassFunction.ByPassFunction$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_25 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_25 (i32.const 29))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_25)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::ByPassFunction.apply_1 (result i64)
    (call $src::compiler::annotations::ByPassFunction.ByPassFunction$discriminant_1)
  )
  (func $src::compiler::annotations::ByPassFunction.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::ByPassFunction.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::ByPassFunction.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::ByPassFunction.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::Extern.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_26 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_26 (i32.const 30))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_26))
    )
  )
  (func $src::compiler::annotations::Extern.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Extern.Extern$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_27 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_27 (i32.const 30))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::annotations::discriminant_27)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::Extern.apply_1 (param $module i64) (param $fn i64) (result i64)
    (local $src::compiler::annotations::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::$ref_1 (call $src::compiler::annotations::Extern.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::annotations::Extern.property$0_2 (local.get $src::compiler::annotations::$ref_1) (local.get $module))
      (call $src::compiler::annotations::Extern.property$1_2 (local.get $src::compiler::annotations::$ref_1) (local.get $fn))
      (local.get $src::compiler::annotations::$ref_1)
    )
  )
  (func $src::compiler::annotations::Extern.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::annotations::Extern.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::annotations::Extern.Extern$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::annotations::Extern.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Extern.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Extern.module_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::Extern.property$0_1 (local.get $self))
  )
  (func $src::compiler::annotations::Extern.module_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::Extern.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::Extern.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::annotations::Extern.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::annotations::Extern.fn_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::Extern.property$1_1 (local.get $self))
  )
  (func $src::compiler::annotations::Extern.fn_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::Extern.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::Extern.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::annotations::Extern.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::annotations::Extern.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::Extern.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::Export.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_28 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_28 (i32.const 31))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_28))
    )
  )
  (func $src::compiler::annotations::Export.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::Export.Export$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_29 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_29 (i32.const 31))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::annotations::discriminant_29)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::Export.apply_1 (param $exportedName i64) (result i64)
    (local $src::compiler::annotations::$ref_2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::$ref_2 (call $src::compiler::annotations::Export.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::annotations::Export.property$0_2 (local.get $src::compiler::annotations::$ref_2) (local.get $exportedName))
      (local.get $src::compiler::annotations::$ref_2)
    )
  )
  (func $src::compiler::annotations::Export.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::annotations::Export.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::annotations::Export.Export$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::annotations::Export.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Export.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::Export.exportedName_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::Export.property$0_1 (local.get $self))
  )
  (func $src::compiler::annotations::Export.exportedName_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::Export.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::Export.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::annotations::Export.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::annotations::Export.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::Export.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::MutableDeclaration.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_30 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_30 (i32.const 32))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_30))
    )
  )
  (func $src::compiler::annotations::MutableDeclaration.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::MutableDeclaration.MutableDeclaration$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_31 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_31 (i32.const 32))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_31)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::MutableDeclaration.apply_1 (result i64)
    (call $src::compiler::annotations::MutableDeclaration.MutableDeclaration$discriminant_1)
  )
  (func $src::compiler::annotations::MutableDeclaration.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::MutableDeclaration.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::MutableDeclaration.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::MutableDeclaration.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::LabelId.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_32 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_32 (i32.const 33))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_32))
    )
  )
  (func $src::compiler::annotations::LabelId.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::LabelId.LabelId$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_33 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_33 (i32.const 33))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::annotations::discriminant_33)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::LabelId.apply_1 (param $label i64) (result i64)
    (local $src::compiler::annotations::$ref_3 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::$ref_3 (call $src::compiler::annotations::LabelId.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::annotations::LabelId.property$0_2 (local.get $src::compiler::annotations::$ref_3) (local.get $label))
      (local.get $src::compiler::annotations::$ref_3)
    )
  )
  (func $src::compiler::annotations::LabelId.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::annotations::LabelId.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::annotations::LabelId.LabelId$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::annotations::LabelId.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::LabelId.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::LabelId.label_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::LabelId.property$0_1 (local.get $self))
  )
  (func $src::compiler::annotations::LabelId.label_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::LabelId.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::LabelId.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::annotations::LabelId.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::annotations::LabelId.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::LabelId.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::LocalIdentifier.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_34 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_34 (i32.const 34))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_34))
    )
  )
  (func $src::compiler::annotations::LocalIdentifier.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::LocalIdentifier.LocalIdentifier$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_35 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_35 (i32.const 34))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::annotations::discriminant_35)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::LocalIdentifier.apply_1 (param $local i64) (result i64)
    (local $src::compiler::annotations::$ref_4 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::$ref_4 (call $src::compiler::annotations::LocalIdentifier.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::annotations::LocalIdentifier.property$0_2 (local.get $src::compiler::annotations::$ref_4) (local.get $local))
      (local.get $src::compiler::annotations::$ref_4)
    )
  )
  (func $src::compiler::annotations::LocalIdentifier.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::annotations::LocalIdentifier.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::annotations::LocalIdentifier.LocalIdentifier$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::annotations::LocalIdentifier.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::LocalIdentifier.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::LocalIdentifier.local_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::LocalIdentifier.property$0_1 (local.get $self))
  )
  (func $src::compiler::annotations::LocalIdentifier.local_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::LocalIdentifier.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::LocalIdentifier.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::LocalIdentifier.loadPropertyWithOffset$0_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::annotations::LocalIdentifier.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::LocalIdentifier.storePropertyWithOffset$0_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::annotations::LocalIdentifier.loadPropertyWithOffset$0_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::annotations::LocalIdentifier.storePropertyWithOffset$0_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::annotations::LocalIdentifier.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::LocalIdentifier.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::IsTailRecCall.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_36 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_36 (i32.const 35))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_36))
    )
  )
  (func $src::compiler::annotations::IsTailRecCall.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsTailRecCall.IsTailRecCall$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_37 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_37 (i32.const 35))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_37)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::IsTailRecCall.apply_1 (result i64)
    (call $src::compiler::annotations::IsTailRecCall.IsTailRecCall$discriminant_1)
  )
  (func $src::compiler::annotations::IsTailRecCall.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsTailRecCall.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsTailRecCall.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::IsTailRecCall.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::CurrentLoop.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_38 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_38 (i32.const 36))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_38))
    )
  )
  (func $src::compiler::annotations::CurrentLoop.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::CurrentLoop.CurrentLoop$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_39 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_39 (i32.const 36))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::annotations::discriminant_39)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::CurrentLoop.apply_1 (param $theLoop i64) (result i64)
    (local $src::compiler::annotations::$ref_5 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::$ref_5 (call $src::compiler::annotations::CurrentLoop.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::annotations::CurrentLoop.property$0_2 (local.get $src::compiler::annotations::$ref_5) (local.get $theLoop))
      (local.get $src::compiler::annotations::$ref_5)
    )
  )
  (func $src::compiler::annotations::CurrentLoop.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::annotations::CurrentLoop.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::annotations::CurrentLoop.CurrentLoop$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::annotations::CurrentLoop.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::CurrentLoop.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::CurrentLoop.theLoop_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::CurrentLoop.property$0_1 (local.get $self))
  )
  (func $src::compiler::annotations::CurrentLoop.theLoop_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::CurrentLoop.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::CurrentLoop.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::LoopNode.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::annotations::CurrentLoop.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::LoopNode.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::annotations::CurrentLoop.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::CurrentLoop.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::ImplicitCall.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_40 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_40 (i32.const 37))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_40))
    )
  )
  (func $src::compiler::annotations::ImplicitCall.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::ImplicitCall.ImplicitCall$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_41 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_41 (i32.const 37))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::annotations::discriminant_41)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::ImplicitCall.apply_1 (param $implicitCall i64) (result i64)
    (local $src::compiler::annotations::$ref_6 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::$ref_6 (call $src::compiler::annotations::ImplicitCall.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::annotations::ImplicitCall.property$0_2 (local.get $src::compiler::annotations::$ref_6) (local.get $implicitCall))
      (local.get $src::compiler::annotations::$ref_6)
    )
  )
  (func $src::compiler::annotations::ImplicitCall.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::annotations::ImplicitCall.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::annotations::ImplicitCall.ImplicitCall$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::annotations::ImplicitCall.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::ImplicitCall.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::ImplicitCall.implicitCall_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::ImplicitCall.property$0_1 (local.get $self))
  )
  (func $src::compiler::annotations::ImplicitCall.implicitCall_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::ImplicitCall.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::ImplicitCall.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionCallNode.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::annotations::ImplicitCall.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionCallNode.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::annotations::ImplicitCall.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::ImplicitCall.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::IsUnreachable.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_42 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_42 (i32.const 38))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_42))
    )
  )
  (func $src::compiler::annotations::IsUnreachable.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsUnreachable.IsUnreachable$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_43 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_43 (i32.const 38))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_43)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::IsUnreachable.apply_1 (result i64)
    (call $src::compiler::annotations::IsUnreachable.IsUnreachable$discriminant_1)
  )
  (func $src::compiler::annotations::IsUnreachable.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsUnreachable.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsUnreachable.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::IsUnreachable.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::IsValueNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_44 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_44 (i32.const 39))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_44))
    )
  )
  (func $src::compiler::annotations::IsValueNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsValueNode.IsValueNode$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_45 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_45 (i32.const 39))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_45)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::IsValueNode.apply_1 (result i64)
    (call $src::compiler::annotations::IsValueNode.IsValueNode$discriminant_1)
  )
  (func $src::compiler::annotations::IsValueNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsValueNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsValueNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::IsValueNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::IsAssignationLHS.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_46 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_46 (i32.const 40))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_46))
    )
  )
  (func $src::compiler::annotations::IsAssignationLHS.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsAssignationLHS.IsAssignationLHS$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_47 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_47 (i32.const 40))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_47)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::IsAssignationLHS.apply_1 (result i64)
    (call $src::compiler::annotations::IsAssignationLHS.IsAssignationLHS$discriminant_1)
  )
  (func $src::compiler::annotations::IsAssignationLHS.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsAssignationLHS.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsAssignationLHS.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::IsAssignationLHS.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::IsTypeNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_48 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_48 (i32.const 41))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_48))
    )
  )
  (func $src::compiler::annotations::IsTypeNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsTypeNode.IsTypeNode$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_49 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_49 (i32.const 41))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_49)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::IsTypeNode.apply_1 (result i64)
    (call $src::compiler::annotations::IsTypeNode.IsTypeNode$discriminant_1)
  )
  (func $src::compiler::annotations::IsTypeNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsTypeNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsTypeNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::IsTypeNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::NoStd.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_50 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_50 (i32.const 42))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_50))
    )
  )
  (func $src::compiler::annotations::NoStd.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::NoStd.NoStd$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_51 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_51 (i32.const 42))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::annotations::discriminant_51)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::NoStd.apply_1 (result i64)
    (call $src::compiler::annotations::NoStd.NoStd$discriminant_1)
  )
  (func $src::compiler::annotations::NoStd.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::NoStd.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::NoStd.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::NoStd.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::IsReturnExpression.is_1 (param $a i64) (result i32)
    (local $src::compiler::annotations::discriminant_52 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::annotations::discriminant_52 (i32.const 43))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::annotations::discriminant_52))
    )
  )
  (func $src::compiler::annotations::IsReturnExpression.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::annotations::IsReturnExpression.IsReturnExpression$discriminant_1 (result i64)
    (local $src::compiler::annotations::discriminant_53 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::discriminant_53 (i32.const 43))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::annotations::discriminant_53)) (i32.const 32))
    )
  )
  (func $src::compiler::annotations::IsReturnExpression.apply_1 (param $targetLocal i64) (result i64)
    (local $src::compiler::annotations::$ref_7 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::annotations::$ref_7 (call $src::compiler::annotations::IsReturnExpression.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::annotations::IsReturnExpression.property$0_2 (local.get $src::compiler::annotations::$ref_7) (local.get $targetLocal))
      (local.get $src::compiler::annotations::$ref_7)
    )
  )
  (func $src::compiler::annotations::IsReturnExpression.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::annotations::IsReturnExpression.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::annotations::IsReturnExpression.IsReturnExpression$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::annotations::IsReturnExpression.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsReturnExpression.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::annotations::IsReturnExpression.targetLocal_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::IsReturnExpression.property$0_1 (local.get $self))
  )
  (func $src::compiler::annotations::IsReturnExpression.targetLocal_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::IsReturnExpression.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::annotations::IsReturnExpression.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::IsReturnExpression.loadPropertyWithOffset$0_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::annotations::IsReturnExpression.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::IsReturnExpression.storePropertyWithOffset$0_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::annotations::IsReturnExpression.loadPropertyWithOffset$0_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::annotations::IsReturnExpression.storePropertyWithOffset$0_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::annotations::IsReturnExpression.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::annotations::IsReturnExpression.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::annotations::NodeAnnotation.name_1 (param $self i64) (result i64)
    (local $var$1 i64)
    (block $B1 (result i64)
      (local.set $var$1 (local.get $self))
      (block $B1_0
          (block $B1_1
              (block $B1_2
                  (block $B1_3
                      (block $B1_4
                          (block $B1_5
                              (block $B1_6
                                  (block $B1_7
                                      (block $B1_8
                                          (block $B1_9
                                              (block $B1_10
                                                  (block $B1_11
                                                      (block $B1_12
                                                          (block $B1_13
                                                              (block $B1_14
                                                                  (block $B1_15
                                                                      (block $B1_16
                                                                          (block $B1_17
                                                                              (block $B1_18
                                                                                  (block $B1_19
                                                                                      (block $B1_20
                                                                                          (block $B1_21
                                                                                              (block $B1_22
                                                                                                  (block $B1_23
                                                                                                      (block $B1_24
                                                                                                          (block $B1_25
                                                                                                              (block $B1_26
                                                                                                                  (br_if $B1_0 (call $src::compiler::annotations::NoAnnotation.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_1 (call $src::compiler::annotations::AnnotationCons.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_2 (call $src::compiler::annotations::IsTailRec.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_3 (call $src::compiler::annotations::Injected.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_4 (call $src::compiler::annotations::IsOverloaded.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_5 (call $src::compiler::annotations::Inline.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_6 (call $src::compiler::annotations::Getter.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_7 (call $src::compiler::annotations::Setter.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_8 (call $src::compiler::annotations::Method.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_9 (call $src::compiler::annotations::MethodCall.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_10 (call $src::compiler::annotations::SignatureDeclaration.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_11 (call $src::compiler::annotations::Explicit.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_12 (call $src::compiler::annotations::ByPassFunction.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_13 (call $src::compiler::annotations::Extern.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_14 (call $src::compiler::annotations::Export.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_15 (call $src::compiler::annotations::MutableDeclaration.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_16 (call $src::compiler::annotations::LabelId.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_17 (call $src::compiler::annotations::LocalIdentifier.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_18 (call $src::compiler::annotations::IsTailRecCall.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_19 (call $src::compiler::annotations::CurrentLoop.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_20 (call $src::compiler::annotations::ImplicitCall.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_21 (call $src::compiler::annotations::IsUnreachable.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_22 (call $src::compiler::annotations::IsValueNode.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_23 (call $src::compiler::annotations::IsAssignationLHS.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_24 (call $src::compiler::annotations::IsTypeNode.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_25 (call $src::compiler::annotations::NoStd.is_1 (local.get $var$1)))
                                                                                                                  (br_if $B1_26 (call $src::compiler::annotations::IsReturnExpression.is_1 (local.get $var$1)))
                                                                                                                )
                                                                                                              (i64.const 0x00000004000086cb)
                                                                                                              (br $B1)
                                                                                                            )
                                                                                                          (i64.const 0x00000004000086bc)
                                                                                                          (br $B1)
                                                                                                        )
                                                                                                      (i64.const 0x00000004000086a3)
                                                                                                      (br $B1)
                                                                                                    )
                                                                                                  (i64.const 0x000000040000867e)
                                                                                                  (br $B1)
                                                                                                )
                                                                                              (i64.const 0x0000000400008663)
                                                                                              (br $B1)
                                                                                            )
                                                                                          (i64.const 0x0000000400008644)
                                                                                          (br $B1)
                                                                                        )
                                                                                      (i64.const 0x0000000400008627)
                                                                                      (br $B1)
                                                                                    )
                                                                                  (i64.const 0x000000040000860c)
                                                                                  (br $B1)
                                                                                )
                                                                              (i64.const 0x00000004000085ed)
                                                                              (br $B1)
                                                                            )
                                                                          (i64.const 0x00000004000085ca)
                                                                          (br $B1)
                                                                        )
                                                                      (i64.const 0x00000004000085b7)
                                                                      (br $B1)
                                                                    )
                                                                  (i64.const 0x000000040000858e)
                                                                  (br $B1)
                                                                )
                                                              (i64.const 0x000000040000857d)
                                                              (br $B1)
                                                            )
                                                          (i64.const 0x000000040000856c)
                                                          (br $B1)
                                                        )
                                                      (i64.const 0x000000040000854b)
                                                      (br $B1)
                                                    )
                                                  (i64.const 0x0000000400008536)
                                                  (br $B1)
                                                )
                                              (i64.const 0x0000000400008509)
                                              (br $B1)
                                            )
                                          (i64.const 0x00000004000084f0)
                                          (br $B1)
                                        )
                                      (i64.const 0x00000004000084df)
                                      (br $B1)
                                    )
                                  (i64.const 0x00000004000084ce)
                                  (br $B1)
                                )
                              (i64.const 0x00000004000084bd)
                              (br $B1)
                            )
                          (i64.const 0x00000004000084ac)
                          (br $B1)
                        )
                      (i64.const 0x000000040000848f)
                      (br $B1)
                    )
                  (i64.const 0x000000040000847a)
                  (br $B1)
                )
              (i64.const 0x0000000400008463)
              (br $B1)
            )
          (i64.const 0x0000000400008442)
          (br $B1)
        )
      (i64.const 0x0000000400008425)
      (br $B1)
    )
  )
  (func $src::compiler::annotations::NodeAnnotation.toString_1 (param $self i64) (result i64)
    (local $src::compiler::annotations::list_1 i64)
    (local $src::compiler::annotations::element_1 i64)
    (local $var$3 i64)
    (block $B2 (result i64)
      (local.set $var$3 (local.get $self))
      (block $B2_0
          (block $B2_1
              (block $B2_2
                  (br_if $B2_0 (call $src::compiler::annotations::NoAnnotation.is_1 (local.get $var$3)))
                  (br_if $B2_1 (call $src::compiler::annotations::AnnotationCons.is_1 (local.get $var$3)))
                )
              (call $src::compiler::annotations::NodeAnnotation.name_1 (local.get $self))
              (br $B2)
            )
          (block $B1 (result i64)
              (local.set $src::compiler::annotations::list_1 (call $src::compiler::annotations::AnnotationCons.list_1 (local.get $var$3)))
              (local.set $src::compiler::annotations::element_1 (call $src::compiler::annotations::AnnotationCons.element_1 (local.get $var$3)))
              (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::compiler::annotations::NodeAnnotation.toString_1 (local.get $src::compiler::annotations::list_1)) (i64.const 0x00000004000086f9)) (call $src::compiler::annotations::NodeAnnotation.toString_1 (local.get $src::compiler::annotations::element_1)))
            )
          (br $B2)
        )
      (i64.const 0x00000004000086f4)
      (br $B2)
    )
  )
  (func $src::compiler::annotations::NodeAnnotation.get_1 (param $self i64) (param $findDiscriminant i32) (result i64)
    (local $src::compiler::annotations::list_2 i64)
    (local $src::compiler::annotations::element_2 i64)
    (local $src::compiler::annotations::result i64)
    (local $var$5 i64)
    (block $B1 (result i64)
      (if $IF2 (result i64) (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (call $src::compiler::annotations::NodeAnnotation.as_1 (local.get $self))) (local.get $findDiscriminant))
          (then
            (block $B3 (result i64)
                (local.get $self)
              )
          )
          (else
            (block $B8 (result i64)
                (local.set $var$5 (local.get $self))
                (block $B8_0
                    (block $B8_1
                        (br_if $B8_0 (call $src::compiler::annotations::AnnotationCons.is_1 (local.get $var$5)))
                      )
                    (call $src::compiler::annotations::NoAnnotation.apply_1)
                    (br $B8)
                  )
                (block $B4 (result i64)
                    (local.set $src::compiler::annotations::list_2 (call $src::compiler::annotations::AnnotationCons.list_1 (local.get $var$5)))
                    (local.set $src::compiler::annotations::element_2 (call $src::compiler::annotations::AnnotationCons.element_1 (local.get $var$5)))
                    (local.set $src::compiler::annotations::result (call $src::compiler::annotations::NodeAnnotation.get_1 (local.get $src::compiler::annotations::element_2) (local.get $findDiscriminant)))
                    (if $IF5 (result i64) (call $src::compiler::annotations::NoAnnotation.is_1 (local.get $src::compiler::annotations::result))
                        (then
                          (block $B6 (result i64)
                              (call $src::compiler::annotations::NodeAnnotation.get_1 (local.get $src::compiler::annotations::list_2) (local.get $findDiscriminant))
                            )
                        )
                        (else
                          (block $B7 (result i64)
                              (local.get $src::compiler::annotations::result)
                            )
                        )
                      )
                  )
                (br $B8)
              )
          )
        )
    )
  )
  (func $src::compiler::annotations::NodeAnnotation.has_1 (param $self i64) (param $findDiscriminant i32) (result i32)
    (call $system::core::boolean::boolean.!_1 (call $src::compiler::annotations::NoAnnotation.is_1 (call $src::compiler::annotations::NodeAnnotation.get_1 (local.get $self) (local.get $findDiscriminant))))
  )
  (func $support::env::printf_8 (param $str i64) (param $extra i32)
    (call $support::env::printf_1 (call $system::core::u32::u32.-_1 (call $system::core::string::string.ptr_1 (local.get $str)) (call $system::core::i32::i32.as_4 (i32.const 4))) (local.get $extra))
  )
  (func $support::env::printf_9 (param $str i64) (param $extra i32)
    (call $support::env::printf_2 (call $system::core::u32::u32.-_1 (call $system::core::string::string.ptr_1 (local.get $str)) (call $system::core::i32::i32.as_4 (i32.const 4))) (local.get $extra))
  )
  (func $support::env::printf_10 (param $str i64) (param $extra f32)
    (call $support::env::printf_3 (call $system::core::u32::u32.-_1 (call $system::core::string::string.ptr_1 (local.get $str)) (call $system::core::i32::i32.as_4 (i32.const 4))) (local.get $extra))
  )
  (func $support::env::printf_11 (param $str i64) (param $extra f64)
    (call $support::env::printf_4 (call $system::core::u32::u32.-_1 (call $system::core::string::string.ptr_1 (local.get $str)) (call $system::core::i32::i32.as_4 (i32.const 4))) (local.get $extra))
  )
  (func $support::env::printf_12 (param $str i64) (param $extra i32)
    (call $support::env::printf_6 (call $system::core::u32::u32.-_1 (call $system::core::string::string.ptr_1 (local.get $str)) (call $system::core::i32::i32.as_4 (i32.const 4))) (local.get $extra))
  )
  (func $support::env::printf_13 (param $str i64) (param $extra i32)
    (call $support::env::printf_5 (call $system::core::u32::u32.-_1 (call $system::core::string::string.ptr_1 (local.get $str)) (call $system::core::i32::i32.as_4 (i32.const 4))) (local.get $extra))
  )
  (func $support::env::printf_14 (param $str i64) (param $extra i32)
    (call $support::env::printf_7 (call $system::core::u32::u32.-_1 (call $system::core::string::string.ptr_1 (local.get $str)) (call $system::core::i32::i32.as_4 (i32.const 4))) (local.get $extra))
  )
  (func $support::env::printf_15 (param $str i64)
    (call $support::env::printf_8 (local.get $str) (i32.const 0))
  )
  (data 0 (i32.const 33310) "\02\00\00\00<\00\00")
  (data 0 (i32.const 33317) "\02\00\00\00>\00\00")
  (data 0 (i32.const 33324) "\02\00\00\00\22\00\00")
  (data 0 (i32.const 33331) "\02\00\00\00\22\00\00")
  (data 0 (i32.const 33338) "\06\00\00\00o\00r\00(\00\00")
  (data 0 (i32.const 33349) "\04\00\00\00,\00 \00\00")
  (data 0 (i32.const 33358) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33365) "\0a\00\00\00c\00o\00n\00s\00(\00\00")
  (data 0 (i32.const 33380) "\04\00\00\00,\00 \00\00")
  (data 0 (i32.const 33389) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33396) "\08\00\00\00c\00u\00t\00(\00\00")
  (data 0 (i32.const 33409) "\04\00\00\00,\00 \00\00")
  (data 0 (i32.const 33418) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33425) "\14\00\00\00o\00n\00e\00O\00r\00M\00o\00r\00e\00(\00\00")
  (data 0 (i32.const 33450) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33457) "\16\00\00\00z\00e\00r\00o\00O\00r\00M\00o\00r\00e\00(\00\00")
  (data 0 (i32.const 33484) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33491) "\12\00\00\00o\00p\00t\00i\00o\00n\00a\00l\00(\00\00")
  (data 0 (i32.const 33514) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33521) "\0c\00\00\00f\00a\00i\00l\00(\00`\00\00")
  (data 0 (i32.const 33538) "\04\00\00\00`\00)\00\00")
  (data 0 (i32.const 33547) "\04\00\00\00&\00(\00\00")
  (data 0 (i32.const 33556) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33563) "\04\00\00\00!\00(\00\00")
  (data 0 (i32.const 33572) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33579) "\10\00\00\00d\00i\00s\00c\00a\00r\00d\00(\00\00")
  (data 0 (i32.const 33600) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33607) "\0c\00\00\00p\00u\00s\00h\00(\00'\00\00")
  (data 0 (i32.const 33624) "\06\00\00\00'\00,\00 \00\00")
  (data 0 (i32.const 33635) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33642) "(\00\00\00p\00u\00s\00h\00I\00f\00M\00a\00n\00y\00C\00h\00i\00l\00d\00r\00e\00n\00(\00'\00\00")
  (data 0 (i32.const 33687) "\06\00\00\00'\00,\00 \00\00")
  (data 0 (i32.const 33698) "\02\00\00\00)\00\00")
  (data 0 (i32.const 33705) "\0c\00\00\00\09\00 \00:\00:\00=\00 \00\00")
  (data 0 (i32.const 33722) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 33729) "T\00\00\00o\00p\00t\00i\00m\00i\00z\00e\00(\00r\00u\00l\00e\00,\00f\00u\00l\00l\00G\00r\00a\00m\00m\00a\00r\00)\00:\00 \00m\00i\00s\00s\00i\00n\00g\00 \00r\00u\00l\00e\00:\00 \00\00")
  (data 0 (i32.const 33818) "\06\00\00\00?\00?\00 \00\00")
  (func $src::parser::grammar::ParserRule.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::parser::grammar::Terminal.is_1 (local.get $self)) (call $src::parser::grammar::StrictTerminal.is_1 (local.get $self))) (call $src::parser::grammar::NonTerminal.is_1 (local.get $self))) (call $src::parser::grammar::Or.is_1 (local.get $self))) (call $src::parser::grammar::OneOrMore.is_1 (local.get $self))) (call $src::parser::grammar::ZeroOrMore.is_1 (local.get $self))) (call $src::parser::grammar::Cons.is_1 (local.get $self))) (call $src::parser::grammar::Cut.is_1 (local.get $self))) (call $src::parser::grammar::Optional.is_1 (local.get $self))) (call $src::parser::grammar::Fail.is_1 (local.get $self))) (call $src::parser::grammar::LookAhead.is_1 (local.get $self))) (call $src::parser::grammar::NegativeLookAhead.is_1 (local.get $self))) (call $src::parser::grammar::Discard.is_1 (local.get $self))) (call $src::parser::grammar::Push.is_1 (local.get $self))) (call $src::parser::grammar::PushIfManyChildren.is_1 (local.get $self)))
    )
  )
  (func $src::parser::grammar::ParserRule.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::parser::grammar::ParserRule.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::parser::grammar::ParserRule.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::parser::grammar::ParserRule.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::ParserRule.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Terminal.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::StrictTerminal.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::NonTerminal.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Or.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::OneOrMore.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::ZeroOrMore.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Cons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Cut.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Optional.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Fail.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::LookAhead.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::NegativeLookAhead.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Discard.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Push.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::PushIfManyChildren.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Terminal.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant (i32.const 120))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant))
    )
  )
  (func $src::parser::grammar::Terminal.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Terminal.Terminal$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_1 (i32.const 120))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Terminal.apply_1 (param $tokenType i64) (result i64)
    (local $src::parser::grammar::$ref i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref (call $src::parser::grammar::Terminal.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::Terminal.property$0_2 (local.get $src::parser::grammar::$ref) (local.get $tokenType))
      (local.get $src::parser::grammar::$ref)
    )
  )
  (func $src::parser::grammar::Terminal.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Terminal.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Terminal.Terminal$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Terminal.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Terminal.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Terminal.tokenType_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Terminal.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Terminal.tokenType_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Terminal.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Terminal.property$0_1 (param $self i64) (result i64)
    (call $src::lexer::tokens::TokenType.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Terminal.property$0_2 (param $self i64) (param $value i64)
    (call $src::lexer::tokens::TokenType.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Terminal.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Terminal.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::StrictTerminal.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_2 (i32.const 121))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_2))
    )
  )
  (func $src::parser::grammar::StrictTerminal.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::StrictTerminal.StrictTerminal$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_3 (i32.const 121))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::StrictTerminal.apply_1 (param $tokenType i64) (param $value i64) (result i64)
    (local $src::parser::grammar::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_1 (call $src::parser::grammar::StrictTerminal.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::grammar::StrictTerminal.property$0_2 (local.get $src::parser::grammar::$ref_1) (local.get $tokenType))
      (call $src::parser::grammar::StrictTerminal.property$1_2 (local.get $src::parser::grammar::$ref_1) (local.get $value))
      (local.get $src::parser::grammar::$ref_1)
    )
  )
  (func $src::parser::grammar::StrictTerminal.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::StrictTerminal.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::StrictTerminal.StrictTerminal$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::StrictTerminal.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::StrictTerminal.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::StrictTerminal.tokenType_1 (param $self i64) (result i64)
    (call $src::parser::grammar::StrictTerminal.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::StrictTerminal.tokenType_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::StrictTerminal.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::StrictTerminal.property$0_1 (param $self i64) (result i64)
    (call $src::lexer::tokens::TokenType.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::StrictTerminal.property$0_2 (param $self i64) (param $value i64)
    (call $src::lexer::tokens::TokenType.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::StrictTerminal.value_1 (param $self i64) (result i64)
    (call $src::parser::grammar::StrictTerminal.property$1_1 (local.get $self))
  )
  (func $src::parser::grammar::StrictTerminal.value_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::StrictTerminal.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::StrictTerminal.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::parser::grammar::StrictTerminal.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::grammar::StrictTerminal.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::StrictTerminal.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::NonTerminal.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_4 (i32.const 122))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_4))
    )
  )
  (func $src::parser::grammar::NonTerminal.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::NonTerminal.NonTerminal$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_5 (i32.const 122))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::NonTerminal.apply_1 (param $name i64) (result i64)
    (local $src::parser::grammar::$ref_2 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_2 (call $src::parser::grammar::NonTerminal.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::NonTerminal.property$0_2 (local.get $src::parser::grammar::$ref_2) (local.get $name))
      (local.get $src::parser::grammar::$ref_2)
    )
  )
  (func $src::parser::grammar::NonTerminal.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::NonTerminal.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::NonTerminal.NonTerminal$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::NonTerminal.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::NonTerminal.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::NonTerminal.name_1 (param $self i64) (result i64)
    (call $src::parser::grammar::NonTerminal.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::NonTerminal.name_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::NonTerminal.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::NonTerminal.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::NonTerminal.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::NonTerminal.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::NonTerminal.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Or.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_6 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_6 (i32.const 123))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_6))
    )
  )
  (func $src::parser::grammar::Or.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Or.Or$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_7 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_7 (i32.const 123))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_7)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Or.apply_1 (param $lhs i64) (param $rhs i64) (result i64)
    (local $src::parser::grammar::$ref_3 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_3 (call $src::parser::grammar::Or.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::grammar::Or.property$0_2 (local.get $src::parser::grammar::$ref_3) (local.get $lhs))
      (call $src::parser::grammar::Or.property$1_2 (local.get $src::parser::grammar::$ref_3) (local.get $rhs))
      (local.get $src::parser::grammar::$ref_3)
    )
  )
  (func $src::parser::grammar::Or.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Or.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Or.Or$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Or.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Or.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Or.lhs_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Or.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Or.lhs_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Or.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Or.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Or.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Or.rhs_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Or.property$1_1 (local.get $self))
  )
  (func $src::parser::grammar::Or.rhs_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Or.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Or.property$1_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::grammar::Or.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::grammar::Or.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Or.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::OneOrMore.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_8 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_8 (i32.const 124))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_8))
    )
  )
  (func $src::parser::grammar::OneOrMore.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::OneOrMore.OneOrMore$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_9 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_9 (i32.const 124))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_9)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::OneOrMore.apply_1 (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_4 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_4 (call $src::parser::grammar::OneOrMore.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::OneOrMore.property$0_2 (local.get $src::parser::grammar::$ref_4) (local.get $rule))
      (local.get $src::parser::grammar::$ref_4)
    )
  )
  (func $src::parser::grammar::OneOrMore.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::OneOrMore.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::OneOrMore.OneOrMore$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::OneOrMore.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::OneOrMore.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::OneOrMore.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::OneOrMore.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::OneOrMore.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::OneOrMore.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::OneOrMore.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::OneOrMore.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::OneOrMore.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::OneOrMore.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::ZeroOrMore.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_10 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_10 (i32.const 125))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_10))
    )
  )
  (func $src::parser::grammar::ZeroOrMore.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::ZeroOrMore.ZeroOrMore$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_11 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_11 (i32.const 125))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_11)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::ZeroOrMore.apply_1 (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_5 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_5 (call $src::parser::grammar::ZeroOrMore.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::ZeroOrMore.property$0_2 (local.get $src::parser::grammar::$ref_5) (local.get $rule))
      (local.get $src::parser::grammar::$ref_5)
    )
  )
  (func $src::parser::grammar::ZeroOrMore.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::ZeroOrMore.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::ZeroOrMore.ZeroOrMore$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::ZeroOrMore.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::ZeroOrMore.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::ZeroOrMore.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ZeroOrMore.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::ZeroOrMore.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ZeroOrMore.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::ZeroOrMore.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::ZeroOrMore.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::ZeroOrMore.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::ZeroOrMore.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Cons.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_12 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_12 (i32.const 126))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_12))
    )
  )
  (func $src::parser::grammar::Cons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Cons.Cons$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_13 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_13 (i32.const 126))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_13)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Cons.apply_1 (param $head i64) (param $tail i64) (result i64)
    (local $src::parser::grammar::$ref_6 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_6 (call $src::parser::grammar::Cons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::grammar::Cons.property$0_2 (local.get $src::parser::grammar::$ref_6) (local.get $head))
      (call $src::parser::grammar::Cons.property$1_2 (local.get $src::parser::grammar::$ref_6) (local.get $tail))
      (local.get $src::parser::grammar::$ref_6)
    )
  )
  (func $src::parser::grammar::Cons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Cons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Cons.Cons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Cons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Cons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Cons.head_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Cons.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Cons.head_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Cons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Cons.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Cons.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Cons.tail_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Cons.property$1_1 (local.get $self))
  )
  (func $src::parser::grammar::Cons.tail_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Cons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Cons.property$1_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::grammar::Cons.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::grammar::Cons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Cons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Cut.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_14 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_14 (i32.const 127))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_14))
    )
  )
  (func $src::parser::grammar::Cut.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Cut.Cut$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_15 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_15 (i32.const 127))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_15)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Cut.apply_1 (param $head i64) (param $tail i64) (result i64)
    (local $src::parser::grammar::$ref_7 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_7 (call $src::parser::grammar::Cut.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::grammar::Cut.property$0_2 (local.get $src::parser::grammar::$ref_7) (local.get $head))
      (call $src::parser::grammar::Cut.property$1_2 (local.get $src::parser::grammar::$ref_7) (local.get $tail))
      (local.get $src::parser::grammar::$ref_7)
    )
  )
  (func $src::parser::grammar::Cut.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Cut.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Cut.Cut$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Cut.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Cut.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Cut.head_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Cut.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Cut.head_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Cut.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Cut.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Cut.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Cut.tail_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Cut.property$1_1 (local.get $self))
  )
  (func $src::parser::grammar::Cut.tail_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Cut.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Cut.property$1_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::grammar::Cut.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::grammar::Cut.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Cut.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Optional.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_16 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_16 (i32.const 128))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_16))
    )
  )
  (func $src::parser::grammar::Optional.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Optional.Optional$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_17 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_17 (i32.const 128))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_17)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Optional.apply_1 (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_8 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_8 (call $src::parser::grammar::Optional.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::Optional.property$0_2 (local.get $src::parser::grammar::$ref_8) (local.get $rule))
      (local.get $src::parser::grammar::$ref_8)
    )
  )
  (func $src::parser::grammar::Optional.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Optional.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Optional.Optional$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Optional.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Optional.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Optional.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Optional.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Optional.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Optional.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Optional.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Optional.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Optional.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Optional.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Fail.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_18 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_18 (i32.const 129))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_18))
    )
  )
  (func $src::parser::grammar::Fail.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Fail.Fail$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_19 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_19 (i32.const 129))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_19)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Fail.apply_1 (param $message i64) (result i64)
    (local $src::parser::grammar::$ref_9 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_9 (call $src::parser::grammar::Fail.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::Fail.property$0_2 (local.get $src::parser::grammar::$ref_9) (local.get $message))
      (local.get $src::parser::grammar::$ref_9)
    )
  )
  (func $src::parser::grammar::Fail.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Fail.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Fail.Fail$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Fail.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Fail.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Fail.message_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Fail.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Fail.message_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Fail.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Fail.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Fail.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Fail.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Fail.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::LookAhead.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_20 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_20 (i32.const 130))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_20))
    )
  )
  (func $src::parser::grammar::LookAhead.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::LookAhead.LookAhead$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_21 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_21 (i32.const 130))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_21)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::LookAhead.apply_1 (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_10 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_10 (call $src::parser::grammar::LookAhead.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::LookAhead.property$0_2 (local.get $src::parser::grammar::$ref_10) (local.get $rule))
      (local.get $src::parser::grammar::$ref_10)
    )
  )
  (func $src::parser::grammar::LookAhead.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::LookAhead.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::LookAhead.LookAhead$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::LookAhead.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::LookAhead.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::LookAhead.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::LookAhead.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::LookAhead.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::LookAhead.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::LookAhead.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::LookAhead.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::LookAhead.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::LookAhead.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::NegativeLookAhead.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_22 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_22 (i32.const 131))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_22))
    )
  )
  (func $src::parser::grammar::NegativeLookAhead.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::NegativeLookAhead.NegativeLookAhead$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_23 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_23 (i32.const 131))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_23)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::NegativeLookAhead.apply_1 (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_11 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_11 (call $src::parser::grammar::NegativeLookAhead.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::NegativeLookAhead.property$0_2 (local.get $src::parser::grammar::$ref_11) (local.get $rule))
      (local.get $src::parser::grammar::$ref_11)
    )
  )
  (func $src::parser::grammar::NegativeLookAhead.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::NegativeLookAhead.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::NegativeLookAhead.NegativeLookAhead$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::NegativeLookAhead.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::NegativeLookAhead.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::NegativeLookAhead.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::NegativeLookAhead.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::NegativeLookAhead.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::NegativeLookAhead.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::NegativeLookAhead.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::NegativeLookAhead.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::NegativeLookAhead.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::NegativeLookAhead.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Discard.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_24 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_24 (i32.const 132))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_24))
    )
  )
  (func $src::parser::grammar::Discard.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Discard.Discard$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_25 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_25 (i32.const 132))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_25)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Discard.apply_1 (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_12 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_12 (call $src::parser::grammar::Discard.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::parser::grammar::Discard.property$0_2 (local.get $src::parser::grammar::$ref_12) (local.get $rule))
      (local.get $src::parser::grammar::$ref_12)
    )
  )
  (func $src::parser::grammar::Discard.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Discard.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Discard.Discard$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Discard.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Discard.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Discard.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Discard.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Discard.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Discard.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Discard.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Discard.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Discard.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Discard.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Push.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_26 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_26 (i32.const 133))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_26))
    )
  )
  (func $src::parser::grammar::Push.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Push.Push$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_27 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_27 (i32.const 133))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_27)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Push.apply_1 (param $name i64) (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_13 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_13 (call $src::parser::grammar::Push.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::grammar::Push.property$0_2 (local.get $src::parser::grammar::$ref_13) (local.get $name))
      (call $src::parser::grammar::Push.property$1_2 (local.get $src::parser::grammar::$ref_13) (local.get $rule))
      (local.get $src::parser::grammar::$ref_13)
    )
  )
  (func $src::parser::grammar::Push.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Push.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Push.Push$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Push.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Push.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Push.name_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Push.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Push.name_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Push.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Push.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Push.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Push.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Push.property$1_1 (local.get $self))
  )
  (func $src::parser::grammar::Push.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Push.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Push.property$1_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::grammar::Push.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::grammar::Push.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Push.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::PushIfManyChildren.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_28 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_28 (i32.const 134))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_28))
    )
  )
  (func $src::parser::grammar::PushIfManyChildren.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::PushIfManyChildren.PushIfManyChildren$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_29 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_29 (i32.const 134))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_29)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::PushIfManyChildren.apply_1 (param $name i64) (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_14 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_14 (call $src::parser::grammar::PushIfManyChildren.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::grammar::PushIfManyChildren.property$0_2 (local.get $src::parser::grammar::$ref_14) (local.get $name))
      (call $src::parser::grammar::PushIfManyChildren.property$1_2 (local.get $src::parser::grammar::$ref_14) (local.get $rule))
      (local.get $src::parser::grammar::$ref_14)
    )
  )
  (func $src::parser::grammar::PushIfManyChildren.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::PushIfManyChildren.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::PushIfManyChildren.PushIfManyChildren$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::PushIfManyChildren.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::PushIfManyChildren.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::PushIfManyChildren.name_1 (param $self i64) (result i64)
    (call $src::parser::grammar::PushIfManyChildren.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::PushIfManyChildren.name_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::PushIfManyChildren.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::PushIfManyChildren.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::PushIfManyChildren.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::PushIfManyChildren.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::PushIfManyChildren.property$1_1 (local.get $self))
  )
  (func $src::parser::grammar::PushIfManyChildren.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::PushIfManyChildren.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::PushIfManyChildren.property$1_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::grammar::PushIfManyChildren.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::grammar::PushIfManyChildren.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::PushIfManyChildren.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Cons.apply_3 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (param $a8 i64) (param $a9 i64) (result i64)
    (call $src::parser::grammar::Cons.apply_1 (local.get $a1) (call $src::parser::grammar::Cons.apply_1 (local.get $a2) (call $src::parser::grammar::Cons.apply_1 (local.get $a3) (call $src::parser::grammar::Cons.apply_1 (local.get $a4) (call $src::parser::grammar::Cons.apply_1 (local.get $a5) (call $src::parser::grammar::Cons.apply_1 (local.get $a6) (call $src::parser::grammar::Cons.apply_1 (local.get $a7) (call $src::parser::grammar::Cons.apply_1 (local.get $a8) (local.get $a9)))))))))
  )
  (func $src::parser::grammar::Cons.apply_4 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (param $a8 i64) (result i64)
    (call $src::parser::grammar::Cons.apply_1 (local.get $a1) (call $src::parser::grammar::Cons.apply_1 (local.get $a2) (call $src::parser::grammar::Cons.apply_1 (local.get $a3) (call $src::parser::grammar::Cons.apply_1 (local.get $a4) (call $src::parser::grammar::Cons.apply_1 (local.get $a5) (call $src::parser::grammar::Cons.apply_1 (local.get $a6) (call $src::parser::grammar::Cons.apply_1 (local.get $a7) (local.get $a8))))))))
  )
  (func $src::parser::grammar::Cons.apply_5 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (result i64)
    (call $src::parser::grammar::Cons.apply_1 (local.get $a1) (call $src::parser::grammar::Cons.apply_1 (local.get $a2) (call $src::parser::grammar::Cons.apply_1 (local.get $a3) (call $src::parser::grammar::Cons.apply_1 (local.get $a4) (call $src::parser::grammar::Cons.apply_1 (local.get $a5) (call $src::parser::grammar::Cons.apply_1 (local.get $a6) (local.get $a7)))))))
  )
  (func $src::parser::grammar::Cons.apply_6 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (result i64)
    (call $src::parser::grammar::Cons.apply_1 (local.get $a1) (call $src::parser::grammar::Cons.apply_1 (local.get $a2) (call $src::parser::grammar::Cons.apply_1 (local.get $a3) (call $src::parser::grammar::Cons.apply_1 (local.get $a4) (call $src::parser::grammar::Cons.apply_1 (local.get $a5) (local.get $a6))))))
  )
  (func $src::parser::grammar::Cons.apply_7 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (result i64)
    (call $src::parser::grammar::Cons.apply_1 (local.get $a1) (call $src::parser::grammar::Cons.apply_1 (local.get $a2) (call $src::parser::grammar::Cons.apply_1 (local.get $a3) (call $src::parser::grammar::Cons.apply_1 (local.get $a4) (local.get $a5)))))
  )
  (func $src::parser::grammar::Cons.apply_8 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (result i64)
    (call $src::parser::grammar::Cons.apply_1 (local.get $a1) (call $src::parser::grammar::Cons.apply_1 (local.get $a2) (call $src::parser::grammar::Cons.apply_1 (local.get $a3) (local.get $a4))))
  )
  (func $src::parser::grammar::Cons.apply_9 (param $a1 i64) (param $a2 i64) (param $a3 i64) (result i64)
    (call $src::parser::grammar::Cons.apply_1 (local.get $a1) (call $src::parser::grammar::Cons.apply_1 (local.get $a2) (local.get $a3)))
  )
  (func $src::parser::grammar::Cut.apply_3 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (param $a8 i64) (param $a9 i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (local.get $a1) (call $src::parser::grammar::Cut.apply_1 (local.get $a2) (call $src::parser::grammar::Cut.apply_1 (local.get $a3) (call $src::parser::grammar::Cut.apply_1 (local.get $a4) (call $src::parser::grammar::Cut.apply_1 (local.get $a5) (call $src::parser::grammar::Cut.apply_1 (local.get $a6) (call $src::parser::grammar::Cut.apply_1 (local.get $a7) (call $src::parser::grammar::Cut.apply_1 (local.get $a8) (local.get $a9)))))))))
  )
  (func $src::parser::grammar::Cut.apply_4 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (param $a8 i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (local.get $a1) (call $src::parser::grammar::Cut.apply_1 (local.get $a2) (call $src::parser::grammar::Cut.apply_1 (local.get $a3) (call $src::parser::grammar::Cut.apply_1 (local.get $a4) (call $src::parser::grammar::Cut.apply_1 (local.get $a5) (call $src::parser::grammar::Cut.apply_1 (local.get $a6) (call $src::parser::grammar::Cut.apply_1 (local.get $a7) (local.get $a8))))))))
  )
  (func $src::parser::grammar::Cut.apply_5 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (local.get $a1) (call $src::parser::grammar::Cut.apply_1 (local.get $a2) (call $src::parser::grammar::Cut.apply_1 (local.get $a3) (call $src::parser::grammar::Cut.apply_1 (local.get $a4) (call $src::parser::grammar::Cut.apply_1 (local.get $a5) (call $src::parser::grammar::Cut.apply_1 (local.get $a6) (local.get $a7)))))))
  )
  (func $src::parser::grammar::Cut.apply_6 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (local.get $a1) (call $src::parser::grammar::Cut.apply_1 (local.get $a2) (call $src::parser::grammar::Cut.apply_1 (local.get $a3) (call $src::parser::grammar::Cut.apply_1 (local.get $a4) (call $src::parser::grammar::Cut.apply_1 (local.get $a5) (local.get $a6))))))
  )
  (func $src::parser::grammar::Cut.apply_7 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (local.get $a1) (call $src::parser::grammar::Cut.apply_1 (local.get $a2) (call $src::parser::grammar::Cut.apply_1 (local.get $a3) (call $src::parser::grammar::Cut.apply_1 (local.get $a4) (local.get $a5)))))
  )
  (func $src::parser::grammar::Cut.apply_8 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (local.get $a1) (call $src::parser::grammar::Cut.apply_1 (local.get $a2) (call $src::parser::grammar::Cut.apply_1 (local.get $a3) (local.get $a4))))
  )
  (func $src::parser::grammar::Cut.apply_9 (param $a1 i64) (param $a2 i64) (param $a3 i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (local.get $a1) (call $src::parser::grammar::Cut.apply_1 (local.get $a2) (local.get $a3)))
  )
  (func $src::parser::grammar::Or.apply_3 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (param $a8 i64) (param $a9 i64) (result i64)
    (call $src::parser::grammar::Or.apply_1 (local.get $a1) (call $src::parser::grammar::Or.apply_1 (local.get $a2) (call $src::parser::grammar::Or.apply_1 (local.get $a3) (call $src::parser::grammar::Or.apply_1 (local.get $a4) (call $src::parser::grammar::Or.apply_1 (local.get $a5) (call $src::parser::grammar::Or.apply_1 (local.get $a6) (call $src::parser::grammar::Or.apply_1 (local.get $a7) (call $src::parser::grammar::Or.apply_1 (local.get $a8) (local.get $a9)))))))))
  )
  (func $src::parser::grammar::Or.apply_4 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (param $a8 i64) (result i64)
    (call $src::parser::grammar::Or.apply_1 (local.get $a1) (call $src::parser::grammar::Or.apply_1 (local.get $a2) (call $src::parser::grammar::Or.apply_1 (local.get $a3) (call $src::parser::grammar::Or.apply_1 (local.get $a4) (call $src::parser::grammar::Or.apply_1 (local.get $a5) (call $src::parser::grammar::Or.apply_1 (local.get $a6) (call $src::parser::grammar::Or.apply_1 (local.get $a7) (local.get $a8))))))))
  )
  (func $src::parser::grammar::Or.apply_5 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (param $a7 i64) (result i64)
    (call $src::parser::grammar::Or.apply_1 (local.get $a1) (call $src::parser::grammar::Or.apply_1 (local.get $a2) (call $src::parser::grammar::Or.apply_1 (local.get $a3) (call $src::parser::grammar::Or.apply_1 (local.get $a4) (call $src::parser::grammar::Or.apply_1 (local.get $a5) (call $src::parser::grammar::Or.apply_1 (local.get $a6) (local.get $a7)))))))
  )
  (func $src::parser::grammar::Or.apply_6 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (param $a6 i64) (result i64)
    (call $src::parser::grammar::Or.apply_1 (local.get $a1) (call $src::parser::grammar::Or.apply_1 (local.get $a2) (call $src::parser::grammar::Or.apply_1 (local.get $a3) (call $src::parser::grammar::Or.apply_1 (local.get $a4) (call $src::parser::grammar::Or.apply_1 (local.get $a5) (local.get $a6))))))
  )
  (func $src::parser::grammar::Or.apply_7 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (param $a5 i64) (result i64)
    (call $src::parser::grammar::Or.apply_1 (local.get $a1) (call $src::parser::grammar::Or.apply_1 (local.get $a2) (call $src::parser::grammar::Or.apply_1 (local.get $a3) (call $src::parser::grammar::Or.apply_1 (local.get $a4) (local.get $a5)))))
  )
  (func $src::parser::grammar::Or.apply_8 (param $a1 i64) (param $a2 i64) (param $a3 i64) (param $a4 i64) (result i64)
    (call $src::parser::grammar::Or.apply_1 (local.get $a1) (call $src::parser::grammar::Or.apply_1 (local.get $a2) (call $src::parser::grammar::Or.apply_1 (local.get $a3) (local.get $a4))))
  )
  (func $src::parser::grammar::Or.apply_9 (param $a1 i64) (param $a2 i64) (param $a3 i64) (result i64)
    (call $src::parser::grammar::Or.apply_1 (local.get $a1) (call $src::parser::grammar::Or.apply_1 (local.get $a2) (local.get $a3)))
  )
  (func $src::parser::grammar::ParserRule.toString_1 (param $self i64) (result i64)
    (local $src::parser::grammar::tokenType_2 i64)
    (local $src::parser::grammar::tokenType_3 i64)
    (local $src::parser::grammar::value_43 i64)
    (local $src::parser::grammar::name_3 i64)
    (local $src::parser::grammar::lhs_65 i64)
    (local $src::parser::grammar::rhs_19 i64)
    (local $src::parser::grammar::head_2 i64)
    (local $src::parser::grammar::tail_2 i64)
    (local $src::parser::grammar::head_3 i64)
    (local $src::parser::grammar::tail_3 i64)
    (local $src::parser::grammar::rule_8 i64)
    (local $src::parser::grammar::rule_9 i64)
    (local $src::parser::grammar::rule_10 i64)
    (local $src::parser::grammar::message_1 i64)
    (local $src::parser::grammar::rule_11 i64)
    (local $src::parser::grammar::rule_12 i64)
    (local $src::parser::grammar::rule_13 i64)
    (local $src::parser::grammar::name_4 i64)
    (local $src::parser::grammar::rule_14 i64)
    (local $src::parser::grammar::name_5 i64)
    (local $src::parser::grammar::rule_15 i64)
    (local $var$22 i64)
    (block $B16 (result i64)
      (local.set $var$22 (local.get $self))
      (block $B16_0
          (block $B16_1
              (block $B16_2
                  (block $B16_3
                      (block $B16_4
                          (block $B16_5
                              (block $B16_6
                                  (block $B16_7
                                      (block $B16_8
                                          (block $B16_9
                                              (block $B16_10
                                                  (block $B16_11
                                                      (block $B16_12
                                                          (block $B16_13
                                                              (block $B16_14
                                                                  (br_if $B16_0 (call $src::parser::grammar::Terminal.is_1 (local.get $var$22)))
                                                                  (br_if $B16_1 (call $src::parser::grammar::StrictTerminal.is_1 (local.get $var$22)))
                                                                  (br_if $B16_2 (call $src::parser::grammar::NonTerminal.is_1 (local.get $var$22)))
                                                                  (br_if $B16_3 (call $src::parser::grammar::Or.is_1 (local.get $var$22)))
                                                                  (br_if $B16_4 (call $src::parser::grammar::Cons.is_1 (local.get $var$22)))
                                                                  (br_if $B16_5 (call $src::parser::grammar::Cut.is_1 (local.get $var$22)))
                                                                  (br_if $B16_6 (call $src::parser::grammar::OneOrMore.is_1 (local.get $var$22)))
                                                                  (br_if $B16_7 (call $src::parser::grammar::ZeroOrMore.is_1 (local.get $var$22)))
                                                                  (br_if $B16_8 (call $src::parser::grammar::Optional.is_1 (local.get $var$22)))
                                                                  (br_if $B16_9 (call $src::parser::grammar::Fail.is_1 (local.get $var$22)))
                                                                  (br_if $B16_10 (call $src::parser::grammar::LookAhead.is_1 (local.get $var$22)))
                                                                  (br_if $B16_11 (call $src::parser::grammar::NegativeLookAhead.is_1 (local.get $var$22)))
                                                                  (br_if $B16_12 (call $src::parser::grammar::Discard.is_1 (local.get $var$22)))
                                                                  (br_if $B16_13 (call $src::parser::grammar::Push.is_1 (local.get $var$22)))
                                                                  (br_if $B16_14 (call $src::parser::grammar::PushIfManyChildren.is_1 (local.get $var$22)))
                                                                )
                                                              (block $B15 (result i64)
                                                                  (local.set $src::parser::grammar::name_5 (call $src::parser::grammar::PushIfManyChildren.name_1 (local.get $var$22)))
                                                                  (local.set $src::parser::grammar::rule_15 (call $src::parser::grammar::PushIfManyChildren.rule_1 (local.get $var$22)))
                                                                  (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000836a) (local.get $src::parser::grammar::name_5)) (i64.const 0x0000000400008397)) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_15))) (i64.const 0x00000004000083a2))
                                                                )
                                                              (br $B16)
                                                            )
                                                          (block $B14 (result i64)
                                                              (local.set $src::parser::grammar::name_4 (call $src::parser::grammar::Push.name_1 (local.get $var$22)))
                                                              (local.set $src::parser::grammar::rule_14 (call $src::parser::grammar::Push.rule_1 (local.get $var$22)))
                                                              (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400008347) (local.get $src::parser::grammar::name_4)) (i64.const 0x0000000400008358)) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_14))) (i64.const 0x0000000400008363))
                                                            )
                                                          (br $B16)
                                                        )
                                                      (block $B13 (result i64)
                                                          (local.set $src::parser::grammar::rule_13 (call $src::parser::grammar::Discard.rule_1 (local.get $var$22)))
                                                          (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000832b) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_13))) (i64.const 0x0000000400008340))
                                                        )
                                                      (br $B16)
                                                    )
                                                  (block $B12 (result i64)
                                                      (local.set $src::parser::grammar::rule_12 (call $src::parser::grammar::NegativeLookAhead.rule_1 (local.get $var$22)))
                                                      (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000831b) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_12))) (i64.const 0x0000000400008324))
                                                    )
                                                  (br $B16)
                                                )
                                              (block $B11 (result i64)
                                                  (local.set $src::parser::grammar::rule_11 (call $src::parser::grammar::LookAhead.rule_1 (local.get $var$22)))
                                                  (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000830b) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_11))) (i64.const 0x0000000400008314))
                                                )
                                              (br $B16)
                                            )
                                          (block $B10 (result i64)
                                              (local.set $src::parser::grammar::message_1 (call $src::parser::grammar::Fail.message_1 (local.get $var$22)))
                                              (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000082f1) (local.get $src::parser::grammar::message_1)) (i64.const 0x0000000400008302))
                                            )
                                          (br $B16)
                                        )
                                      (block $B9 (result i64)
                                          (local.set $src::parser::grammar::rule_10 (call $src::parser::grammar::Optional.rule_1 (local.get $var$22)))
                                          (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000082d3) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_10))) (i64.const 0x00000004000082ea))
                                        )
                                      (br $B16)
                                    )
                                  (block $B8 (result i64)
                                      (local.set $src::parser::grammar::rule_9 (call $src::parser::grammar::ZeroOrMore.rule_1 (local.get $var$22)))
                                      (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000082b1) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_9))) (i64.const 0x00000004000082cc))
                                    )
                                  (br $B16)
                                )
                              (block $B7 (result i64)
                                  (local.set $src::parser::grammar::rule_8 (call $src::parser::grammar::OneOrMore.rule_1 (local.get $var$22)))
                                  (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400008291) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_8))) (i64.const 0x00000004000082aa))
                                )
                              (br $B16)
                            )
                          (block $B6 (result i64)
                              (local.set $src::parser::grammar::head_3 (call $src::parser::grammar::Cut.head_1 (local.get $var$22)))
                              (local.set $src::parser::grammar::tail_3 (call $src::parser::grammar::Cut.tail_1 (local.get $var$22)))
                              (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400008274) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::head_3))) (i64.const 0x0000000400008281)) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::tail_3))) (i64.const 0x000000040000828a))
                            )
                          (br $B16)
                        )
                      (block $B5 (result i64)
                          (local.set $src::parser::grammar::head_2 (call $src::parser::grammar::Cons.head_1 (local.get $var$22)))
                          (local.set $src::parser::grammar::tail_2 (call $src::parser::grammar::Cons.tail_1 (local.get $var$22)))
                          (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400008255) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::head_2))) (i64.const 0x0000000400008264)) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::tail_2))) (i64.const 0x000000040000826d))
                        )
                      (br $B16)
                    )
                  (block $B4 (result i64)
                      (local.set $src::parser::grammar::lhs_65 (call $src::parser::grammar::Or.lhs_1 (local.get $var$22)))
                      (local.set $src::parser::grammar::rhs_19 (call $src::parser::grammar::Or.rhs_1 (local.get $var$22)))
                      (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000823a) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::lhs_65))) (i64.const 0x0000000400008245)) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rhs_19))) (i64.const 0x000000040000824e))
                    )
                  (br $B16)
                )
              (block $B3 (result i64)
                  (local.set $src::parser::grammar::name_3 (call $src::parser::grammar::NonTerminal.name_1 (local.get $var$22)))
                  (local.get $src::parser::grammar::name_3)
                )
              (br $B16)
            )
          (block $B2 (result i64)
              (local.set $src::parser::grammar::tokenType_3 (call $src::parser::grammar::StrictTerminal.tokenType_1 (local.get $var$22)))
              (local.set $src::parser::grammar::value_43 (call $src::parser::grammar::StrictTerminal.value_1 (local.get $var$22)))
              (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000822c) (local.get $src::parser::grammar::value_43)) (i64.const 0x0000000400008233))
            )
          (br $B16)
        )
      (block $B1 (result i64)
          (local.set $src::parser::grammar::tokenType_2 (call $src::parser::grammar::Terminal.tokenType_1 (local.get $var$22)))
          (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000821e) (call $src::lexer::tokens::TokenType.toString_1 (local.get $src::parser::grammar::tokenType_2))) (i64.const 0x0000000400008225))
        )
      (br $B16)
    )
  )
  (func $src::parser::grammar::Grammar.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $src::parser::grammar::Nominal.is_1 (local.get $self)) (call $src::parser::grammar::GrammarConj.is_1 (local.get $self)))
    )
  )
  (func $src::parser::grammar::Grammar.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::parser::grammar::Grammar.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::parser::grammar::Grammar.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::parser::grammar::Grammar.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Grammar.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Nominal.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::GrammarConj.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Nominal.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_30 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_30 (i32.const 135))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_30))
    )
  )
  (func $src::parser::grammar::Nominal.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::Nominal.Nominal$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_31 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_31 (i32.const 135))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_31)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::Nominal.apply_1 (param $name i64) (param $rule i64) (result i64)
    (local $src::parser::grammar::$ref_15 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_15 (call $src::parser::grammar::Nominal.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::grammar::Nominal.property$0_2 (local.get $src::parser::grammar::$ref_15) (local.get $name))
      (call $src::parser::grammar::Nominal.property$1_2 (local.get $src::parser::grammar::$ref_15) (local.get $rule))
      (local.get $src::parser::grammar::$ref_15)
    )
  )
  (func $src::parser::grammar::Nominal.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::Nominal.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::Nominal.Nominal$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::Nominal.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Nominal.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::Nominal.name_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Nominal.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::Nominal.name_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Nominal.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Nominal.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::Nominal.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::Nominal.rule_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Nominal.property$1_1 (local.get $self))
  )
  (func $src::parser::grammar::Nominal.rule_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Nominal.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::Nominal.property$1_1 (param $self i64) (result i64)
    (call $src::parser::grammar::ParserRule.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::grammar::Nominal.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::ParserRule.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::grammar::Nominal.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::Nominal.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::GrammarConj.is_1 (param $a i64) (result i32)
    (local $src::parser::grammar::discriminant_32 i32)
    (block $B1 (result i32)
      (local.set $src::parser::grammar::discriminant_32 (i32.const 136))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::grammar::discriminant_32))
    )
  )
  (func $src::parser::grammar::GrammarConj.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::grammar::GrammarConj.GrammarConj$discriminant_1 (result i64)
    (local $src::parser::grammar::discriminant_33 i32)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::discriminant_33 (i32.const 136))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::grammar::discriminant_33)) (i32.const 32))
    )
  )
  (func $src::parser::grammar::GrammarConj.apply_1 (param $tail i64) (param $head i64) (result i64)
    (local $src::parser::grammar::$ref_16 i64)
    (block $B1 (result i64)
      (local.set $src::parser::grammar::$ref_16 (call $src::parser::grammar::GrammarConj.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::grammar::GrammarConj.property$0_2 (local.get $src::parser::grammar::$ref_16) (local.get $tail))
      (call $src::parser::grammar::GrammarConj.property$1_2 (local.get $src::parser::grammar::$ref_16) (local.get $head))
      (local.get $src::parser::grammar::$ref_16)
    )
  )
  (func $src::parser::grammar::GrammarConj.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::grammar::GrammarConj.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::grammar::GrammarConj.GrammarConj$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::grammar::GrammarConj.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::GrammarConj.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::grammar::GrammarConj.tail_1 (param $self i64) (result i64)
    (call $src::parser::grammar::GrammarConj.property$0_1 (local.get $self))
  )
  (func $src::parser::grammar::GrammarConj.tail_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::GrammarConj.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::GrammarConj.property$0_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Grammar.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::grammar::GrammarConj.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Grammar.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::grammar::GrammarConj.head_1 (param $self i64) (result i64)
    (call $src::parser::grammar::GrammarConj.property$1_1 (local.get $self))
  )
  (func $src::parser::grammar::GrammarConj.head_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::GrammarConj.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::grammar::GrammarConj.property$1_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Nominal.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::grammar::GrammarConj.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Nominal.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::grammar::GrammarConj.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::grammar::GrammarConj.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::grammar::Grammar.++_1 (param $tail i64) (param $head i64) (result i64)
    (call $src::parser::grammar::GrammarConj.apply_1 (local.get $tail) (local.get $head))
  )
  (func $src::parser::grammar::Grammar.toString_1 (param $self i64) (result i64)
    (local $src::parser::grammar::name_7 i64)
    (local $src::parser::grammar::rule_17 i64)
    (local $src::parser::grammar::head_6 i64)
    (local $src::parser::grammar::tail_6 i64)
    (local $var$5 i64)
    (block $B3 (result i64)
      (local.set $var$5 (local.get $self))
      (block $B3_0
          (block $B3_1
              (br_if $B3_0 (call $src::parser::grammar::Nominal.is_1 (local.get $var$5)))
              (br_if $B3_1 (call $src::parser::grammar::GrammarConj.is_1 (local.get $var$5)))
            )
          (block $B2 (result i64)
              (local.set $src::parser::grammar::head_6 (call $src::parser::grammar::GrammarConj.head_1 (local.get $var$5)))
              (local.set $src::parser::grammar::tail_6 (call $src::parser::grammar::GrammarConj.tail_1 (local.get $var$5)))
              (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::parser::grammar::Grammar.toString_1 (local.get $src::parser::grammar::tail_6)) (i64.const 0x00000004000083ba)) (call $src::parser::grammar::Grammar.toString_1 (local.get $src::parser::grammar::head_6)))
            )
          (br $B3)
        )
      (block $B1 (result i64)
          (local.set $src::parser::grammar::name_7 (call $src::parser::grammar::Nominal.name_1 (local.get $var$5)))
          (local.set $src::parser::grammar::rule_17 (call $src::parser::grammar::Nominal.rule_1 (local.get $var$5)))
          (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (local.get $src::parser::grammar::name_7) (i64.const 0x00000004000083a9)) (call $src::parser::grammar::ParserRule.toString_1 (local.get $src::parser::grammar::rule_17)))
        )
      (br $B3)
    )
  )
  (func $src::parser::grammar::Grammar.findRule_1 (param $self i64) (param $ruleName i64) (result i64)
    (local $src::parser::grammar::name_8 i64)
    (local $src::parser::grammar::rule_18 i64)
    (local $src::parser::grammar::tail_7 i64)
    (local $src::parser::grammar::head_7 i64)
    (local $var$6 i64)
    (block $B1 (result i64)
      (block $B6 (result i64)
          (local.set $var$6 (local.get $self))
          (block $B6_0
              (block $B6_1
                  (br_if $B6_0 (call $src::parser::grammar::Nominal.is_1 (local.get $var$6)))
                  (br_if $B6_1 (call $src::parser::grammar::GrammarConj.is_1 (local.get $var$6)))
                )
              (block $B4 (result i64)
                  (local.set $src::parser::grammar::tail_7 (call $src::parser::grammar::GrammarConj.tail_1 (local.get $var$6)))
                  (local.set $src::parser::grammar::head_7 (call $src::parser::grammar::GrammarConj.head_1 (local.get $var$6)))
                  (if $IF5 (result i64) (call $system::core::string::string.==_1 (call $src::parser::grammar::Nominal.name_1 (local.get $src::parser::grammar::head_7)) (local.get $ruleName))
                      (then
                        (call $src::parser::grammar::Nominal.rule_1 (local.get $src::parser::grammar::head_7))
                      )
                      (else
                        (call $src::parser::grammar::Grammar.findRule_1 (local.get $src::parser::grammar::tail_7) (local.get $ruleName))
                      )
                    )
                )
              (br $B6)
            )
          (block $B2 (result i64)
              (local.set $src::parser::grammar::name_8 (call $src::parser::grammar::Nominal.name_1 (local.get $var$6)))
              (local.set $src::parser::grammar::rule_18 (call $src::parser::grammar::Nominal.rule_1 (local.get $var$6)))
              (if $IF3 (result i64) (call $system::core::string::string.==_1 (local.get $src::parser::grammar::name_8) (local.get $ruleName))
                  (then
                    (local.get $src::parser::grammar::rule_18)
                  )
                  (else
                    (call $src::helpers::Nil.apply_1)
                  )
                )
            )
          (br $B6)
        )
    )
  )
  (func $src::parser::grammar::Grammar.compile_1 (param $fullGrammar i64) (param $ruleName i64) (result i64)
    (local $var$2 i64)
    (block $B1 (result i64)
      (local.set $var$2 (call $src::parser::grammar::Grammar.findRule_1 (local.get $fullGrammar) (local.get $ruleName)))
      (block $B1_0
          (block $B1_1
              (br_if $B1_0 (call $src::helpers::Nil.is_1 (local.get $var$2)))
              (br_if $B1_1 (call $src::parser::grammar::ParserRule.is_1 (local.get $var$2)))
            )
          (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $var$2))
          (br $B1)
        )
      (call $src::helpers::Nil.apply_1)
      (br $B1)
    )
  )
  (func $src::parser::grammar::Grammar.optimize_1 (param $fullGrammar i64) (param $rule i64) (result i64)
    (local $src::parser::grammar::name_9 i64)
    (local $src::parser::grammar::lhs_78 i64)
    (local $src::parser::grammar::rhs_25 i64)
    (local $src::parser::grammar::head_8 i64)
    (local $src::parser::grammar::tail_8 i64)
    (local $src::parser::grammar::head_9 i64)
    (local $src::parser::grammar::tail_9 i64)
    (local $src::parser::grammar::rule_21 i64)
    (local $src::parser::grammar::rule_22 i64)
    (local $src::parser::grammar::rule_23 i64)
    (local $src::parser::grammar::rule_24 i64)
    (local $src::parser::grammar::rule_25 i64)
    (local $src::parser::grammar::rule_26 i64)
    (local $src::parser::grammar::name_10 i64)
    (local $src::parser::grammar::rule_27 i64)
    (local $src::parser::grammar::name_11 i64)
    (local $src::parser::grammar::rule_28 i64)
    (local $var$19 i64)
    (local $var$20 i64)
    (block $B16 (result i64)
      (local.set $var$19 (local.get $rule))
      (block $B16_0
          (block $B16_1
              (block $B16_2
                  (block $B16_3
                      (block $B16_4
                          (block $B16_5
                              (block $B16_6
                                  (block $B16_7
                                      (block $B16_8
                                          (block $B16_9
                                              (block $B16_10
                                                  (block $B16_11
                                                      (block $B16_12
                                                          (br_if $B16_0 (call $src::parser::grammar::NonTerminal.is_1 (local.get $var$19)))
                                                          (br_if $B16_1 (call $src::parser::grammar::Or.is_1 (local.get $var$19)))
                                                          (br_if $B16_2 (call $src::parser::grammar::Cons.is_1 (local.get $var$19)))
                                                          (br_if $B16_3 (call $src::parser::grammar::Cut.is_1 (local.get $var$19)))
                                                          (br_if $B16_4 (call $src::parser::grammar::OneOrMore.is_1 (local.get $var$19)))
                                                          (br_if $B16_5 (call $src::parser::grammar::ZeroOrMore.is_1 (local.get $var$19)))
                                                          (br_if $B16_6 (call $src::parser::grammar::Optional.is_1 (local.get $var$19)))
                                                          (br_if $B16_7 (call $src::parser::grammar::LookAhead.is_1 (local.get $var$19)))
                                                          (br_if $B16_8 (call $src::parser::grammar::NegativeLookAhead.is_1 (local.get $var$19)))
                                                          (br_if $B16_9 (call $src::parser::grammar::Discard.is_1 (local.get $var$19)))
                                                          (br_if $B16_10 (call $src::parser::grammar::Push.is_1 (local.get $var$19)))
                                                          (br_if $B16_11 (call $src::parser::grammar::PushIfManyChildren.is_1 (local.get $var$19)))
                                                        )
                                                      (block $B15 (result i64)
                                                          (call $support::env::printf_15 (call $system::core::string::string.++_1 (i64.const 0x000000040000841a) (call $src::parser::grammar::ParserRule.toString_1 (local.get $rule))))
                                                          (local.get $rule)
                                                        )
                                                      (br $B16)
                                                    )
                                                  (block $B14 (result i64)
                                                      (local.set $src::parser::grammar::name_11 (call $src::parser::grammar::PushIfManyChildren.name_1 (local.get $var$19)))
                                                      (local.set $src::parser::grammar::rule_28 (call $src::parser::grammar::PushIfManyChildren.rule_1 (local.get $var$19)))
                                                      (call $src::parser::grammar::PushIfManyChildren.apply_1 (local.get $src::parser::grammar::name_11) (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::rule_28)))
                                                    )
                                                  (br $B16)
                                                )
                                              (block $B13 (result i64)
                                                  (local.set $src::parser::grammar::name_10 (call $src::parser::grammar::Push.name_1 (local.get $var$19)))
                                                  (local.set $src::parser::grammar::rule_27 (call $src::parser::grammar::Push.rule_1 (local.get $var$19)))
                                                  (call $src::parser::grammar::Push.apply_1 (local.get $src::parser::grammar::name_10) (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::rule_27)))
                                                )
                                              (br $B16)
                                            )
                                          (block $B12 (result i64)
                                              (local.set $src::parser::grammar::rule_26 (call $src::parser::grammar::Discard.rule_1 (local.get $var$19)))
                                              (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::rule_26)))
                                            )
                                          (br $B16)
                                        )
                                      (block $B11 (result i64)
                                          (local.set $src::parser::grammar::rule_25 (call $src::parser::grammar::NegativeLookAhead.rule_1 (local.get $var$19)))
                                          (call $src::parser::grammar::NegativeLookAhead.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::rule_25)))
                                        )
                                      (br $B16)
                                    )
                                  (block $B10 (result i64)
                                      (local.set $src::parser::grammar::rule_24 (call $src::parser::grammar::LookAhead.rule_1 (local.get $var$19)))
                                      (call $src::parser::grammar::LookAhead.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::rule_24)))
                                    )
                                  (br $B16)
                                )
                              (block $B9 (result i64)
                                  (local.set $src::parser::grammar::rule_23 (call $src::parser::grammar::Optional.rule_1 (local.get $var$19)))
                                  (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::rule_23)))
                                )
                              (br $B16)
                            )
                          (block $B8 (result i64)
                              (local.set $src::parser::grammar::rule_22 (call $src::parser::grammar::ZeroOrMore.rule_1 (local.get $var$19)))
                              (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::rule_22)))
                            )
                          (br $B16)
                        )
                      (block $B7 (result i64)
                          (local.set $src::parser::grammar::rule_21 (call $src::parser::grammar::OneOrMore.rule_1 (local.get $var$19)))
                          (call $src::parser::grammar::OneOrMore.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::rule_21)))
                        )
                      (br $B16)
                    )
                  (block $B6 (result i64)
                      (local.set $src::parser::grammar::head_9 (call $src::parser::grammar::Cut.head_1 (local.get $var$19)))
                      (local.set $src::parser::grammar::tail_9 (call $src::parser::grammar::Cut.tail_1 (local.get $var$19)))
                      (call $src::parser::grammar::Cut.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::head_9)) (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::tail_9)))
                    )
                  (br $B16)
                )
              (block $B5 (result i64)
                  (local.set $src::parser::grammar::head_8 (call $src::parser::grammar::Cons.head_1 (local.get $var$19)))
                  (local.set $src::parser::grammar::tail_8 (call $src::parser::grammar::Cons.tail_1 (local.get $var$19)))
                  (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::head_8)) (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::tail_8)))
                )
              (br $B16)
            )
          (block $B4 (result i64)
              (local.set $src::parser::grammar::lhs_78 (call $src::parser::grammar::Or.lhs_1 (local.get $var$19)))
              (local.set $src::parser::grammar::rhs_25 (call $src::parser::grammar::Or.rhs_1 (local.get $var$19)))
              (call $src::parser::grammar::Or.apply_1 (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::lhs_78)) (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $src::parser::grammar::lhs_78)))
            )
          (br $B16)
        )
      (block $B1 (result i64)
          (local.set $src::parser::grammar::name_9 (call $src::parser::grammar::NonTerminal.name_1 (local.get $var$19)))
          (block $B3 (result i64)
              (local.set $var$20 (call $src::parser::grammar::Grammar.findRule_1 (local.get $fullGrammar) (local.get $src::parser::grammar::name_9)))
              (block $B3_0
                  (block $B3_1
                      (br_if $B3_0 (call $src::helpers::Nil.is_1 (local.get $var$20)))
                      (br_if $B3_1 (call $src::parser::grammar::ParserRule.is_1 (local.get $var$20)))
                    )
                  (call $src::parser::grammar::Grammar.optimize_1 (local.get $fullGrammar) (local.get $rule))
                  (br $B3)
                )
              (block $B2 (result i64)
                  (call $support::env::printf_15 (call $system::core::string::string.++_1 (i64.const 0x00000004000083c1) (local.get $src::parser::grammar::name_9)))
                  (call $system::core::native::panic_1)
                  (local.get $rule)
                )
              (br $B3)
            )
        )
      (br $B16)
    )
  )
  (func $src::parser::grammar::Nominal.++_1 (param $lhs i64) (param $rhs i64) (result i64)
    (call $src::parser::grammar::GrammarConj.apply_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::lexer::unicode::isUnicodeLeter_1 (param $char i32) (result i32)
    (local $src::lexer::unicode::valid i32)
    (block $B1 (result i32)
      (local.set $src::lexer::unicode::valid (i32.const 1))
      (if $IF2 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0041)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x005A)))
          (then
            (if $IF3 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0061)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x007A)))
                (then
                  (if $IF4 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x00AA))
                      (then
                        (if $IF5 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x00B5))
                            (then
                              (if $IF6 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x00BA))
                                  (then
                                    (if $IF7 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x00C0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x00D6)))
                                        (then
                                          (if $IF8 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x00D8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x00F6)))
                                              (then
                                                (if $IF9 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x00F8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x021F)))
                                                    (then
                                                      (if $IF10 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0222)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0233)))
                                                          (then
                                                            (if $IF11 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0250)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x02AD)))
                                                                (then
                                                                  (if $IF12 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x02B0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x02B8)))
                                                                      (then
                                                                        (if $IF13 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x02BB)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x02C1)))
                                                                            (then
                                                                              (if $IF14 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x02D0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x02D1)))
                                                                                  (then
                                                                                    (if $IF15 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x02E0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x02E4)))
                                                                                        (then
                                                                                          (if $IF16 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x02EE))
                                                                                              (then
                                                                                                (if $IF17 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x037A))
                                                                                                    (then
                                                                                                      (if $IF18 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0386))
                                                                                                          (then
                                                                                                            (if $IF19 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0388)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x038A)))
                                                                                                                (then
                                                                                                                  (if $IF20 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x038C))
                                                                                                                      (then
                                                                                                                        (if $IF21 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x038E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x03A1)))
                                                                                                                            (then
                                                                                                                              (if $IF22 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x03A3)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x03CE)))
                                                                                                                                  (then
                                                                                                                                    (if $IF23 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x03D0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x03D7)))
                                                                                                                                        (then
                                                                                                                                          (if $IF24 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x03DA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x03F3)))
                                                                                                                                              (then
                                                                                                                                                (if $IF25 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0400)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0481)))
                                                                                                                                                    (then
                                                                                                                                                      (if $IF26 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x048C)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x04C4)))
                                                                                                                                                          (then
                                                                                                                                                            (if $IF27 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x04C7)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x04C8)))
                                                                                                                                                                (then
                                                                                                                                                                  (if $IF28 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x04CB)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x04CC)))
                                                                                                                                                                      (then
                                                                                                                                                                        (if $IF29 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x04D0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x04F5)))
                                                                                                                                                                            (then
                                                                                                                                                                              (if $IF30 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x04F8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x04F9)))
                                                                                                                                                                                  (then
                                                                                                                                                                                    (if $IF31 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0531)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0556)))
                                                                                                                                                                                        (then
                                                                                                                                                                                          (if $IF32 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0559))
                                                                                                                                                                                              (then
                                                                                                                                                                                                (if $IF33 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0561)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0587)))
                                                                                                                                                                                                    (then
                                                                                                                                                                                                      (if $IF34 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x05D0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x05EA)))
                                                                                                                                                                                                          (then
                                                                                                                                                                                                            (if $IF35 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x05F0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x05F2)))
                                                                                                                                                                                                                (then
                                                                                                                                                                                                                  (if $IF36 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0621)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x063A)))
                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                        (if $IF37 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0640)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x064A)))
                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                              (if $IF38 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0671)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x06D3)))
                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                    (if $IF39 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x06D5))
                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                          (if $IF40 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x06E5)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x06E6)))
                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                (if $IF41 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x06FA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x06FC)))
                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                      (if $IF42 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0710))
                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                            (if $IF43 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0712)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x072C)))
                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                  (if $IF44 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0780)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x07A5)))
                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                        (if $IF45 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0905)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0939)))
                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                              (if $IF46 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x093D))
                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                    (if $IF47 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0950))
                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                          (if $IF48 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0958)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0961)))
                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                (if $IF49 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0985)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x098C)))
                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                      (if $IF50 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x098F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0990)))
                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                            (if $IF51 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0993)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09A8)))
                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                  (if $IF52 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09AA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09B0)))
                                                                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                                                                        (if $IF53 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x09B2))
                                                                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                                                                              (if $IF54 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09B6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09B9)))
                                                                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                                                                    (if $IF55 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09DC)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09DD)))
                                                                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                                                                          (if $IF56 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09DF)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09E1)))
                                                                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                                                                (if $IF57 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09F0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09F1)))
                                                                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                                                                      (if $IF58 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A05)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A0A)))
                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                            (if $IF59 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A0F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A10)))
                                                                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                                                                  (if $IF60 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A13)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A28)))
                                                                                                                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                                                                                                                        (if $IF61 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A2A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A30)))
                                                                                                                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                                                                                                                              (if $IF62 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A32)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A33)))
                                                                                                                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                                                                                                                    (if $IF63 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A35)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A36)))
                                                                                                                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                                                                                                                          (if $IF64 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A38)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A39)))
                                                                                                                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                                                                                                                (if $IF65 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A59)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A5C)))
                                                                                                                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                                                                                                                      (if $IF66 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0A5E))
                                                                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF67 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A72)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A74)))
                                                                                                                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF68 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A85)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A8B)))
                                                                                                                                                                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                                                                                                                                                                        (if $IF69 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0A8D))
                                                                                                                                                                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                                                                                                                                                                              (if $IF70 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A8F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A91)))
                                                                                                                                                                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF71 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A93)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0AA8)))
                                                                                                                                                                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                                                                                                                                                                          (if $IF72 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0AAA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0AB0)))
                                                                                                                                                                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                (if $IF73 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0AB2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0AB3)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                      (if $IF74 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0AB5)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0AB9)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF75 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0ABD))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF76 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0AD0))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (if $IF77 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0AE0))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (if $IF78 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B05)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B0C)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF79 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B0F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B10)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (if $IF80 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B13)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B28)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (if $IF81 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B2A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B30)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (if $IF82 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B32)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B33)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF83 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B36)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B39)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF84 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0B3D))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (then
if $IF85 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B5C)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B5D)))
then
if $IF86 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B5F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B61)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF87 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B85)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B8A)))
then
if $IF88 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B8E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B90)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (if $IF89 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B92)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B95)))
then
if $IF90 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B99)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B9A)))
then
if $IF91 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0B9C))
then
if $IF92 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B9E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B9F)))
then
if $IF93 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0BA3)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0BA4)))
then
if $IF94 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0BA8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0BAA)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (then
if $IF95 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0BAE)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0BB5)))
then
if $IF96 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0BB7)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0BB9)))
then
if $IF97 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C05)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C0C)))
then
if $IF98 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C0E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C10)))
then
if $IF99 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C12)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C28)))
then
if $IF100 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C2A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C33)))
then
if $IF101 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C35)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C39)))
then
if $IF102 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C60)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C61)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF103 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C85)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C8C)))
then
if $IF104 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C8E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C90)))
then
if $IF105 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C92)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CA8)))
then
if $IF106 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0CAA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CB3)))
then
if $IF107 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0CB5)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CB9)))
then
if $IF108 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0CDE))
then
if $IF109 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0CE0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CE1)))
then
if $IF110 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D05)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D0C)))
then
if $IF111 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D0E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D10)))
then
if $IF112 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D12)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D28)))
then
if $IF113 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D2A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D39)))
then
if $IF114 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D60)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D61)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF115 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D85)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D96)))
then
if $IF116 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D9A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0DB1)))
then
if $IF117 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0DB3)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0DBB)))
then
if $IF118 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0DBD))
then
if $IF119 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0DC0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0DC6)))
then
if $IF120 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E01)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E30)))
then
if $IF121 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E32)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E33)))
then
if $IF122 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E40)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E46)))
then
if $IF123 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E81)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E82)))
then
if $IF124 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0E84))
then
if $IF125 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E87)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E88)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (if $IF126 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0E8A))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF127 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0E8D))
then
if $IF128 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E94)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E97)))
then
if $IF129 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E99)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E9F)))
then
if $IF130 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EA1)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0EA3)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF131 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0EA5))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF132 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0EA7))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (then
if $IF133 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EAA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0EAB)))
then
if $IF134 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EAD)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0EB0)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (then
if $IF135 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EB2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0EB3)))
then
if $IF136 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EBD)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0EC4)))
then
if $IF137 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0EC6))
then
if $IF138 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EDC)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0EDD)))
then
if $IF139 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0F00))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF140 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F40)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0F6A)))
then
if $IF141 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F88)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0F8B)))
then
if $IF142 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1000)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1021)))
then
if $IF143 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1023)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1027)))
then
if $IF144 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1029)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x102A)))
then
if $IF145 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1050)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1055)))
then
if $IF146 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x10A0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x10C5)))
then
if $IF147 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x10D0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x10F6)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (then
if $IF148 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1100)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1159)))
then
if $IF149 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x115F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x11A2)))
then
if $IF150 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x11A8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x11F9)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (then
if $IF151 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1200)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1206)))
then
if $IF152 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1208)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1246)))
then
if $IF153 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x1248))
then
if $IF154 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x124A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x124D)))
then
if $IF155 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1250)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1256)))
then
if $IF156 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x1258))
then
if $IF157 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x125A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x125D)))
then
if $IF158 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1260)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1286)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF159 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x1288))
then
if $IF160 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x128A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x128D)))
then
if $IF161 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1290)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x12AE)))
then
if $IF162 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x12B0))
then
if $IF163 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x12B2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x12B5)))
then
if $IF164 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x12B8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x12BE)))
then
if $IF165 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x12C0))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (if $IF166 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x12C2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x12C5)))
then
if $IF167 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x12C8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x12CE)))
then
if $IF168 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x12D0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x12D6)))
then
if $IF169 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x12D8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x12EE)))
then
if $IF170 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x12F0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x130E)))
then
if $IF171 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x1310))
then
if $IF172 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1312)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1315)))
then
if $IF173 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1318)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x131E)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (if $IF174 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1320)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1346)))
then
if $IF175 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1348)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x135A)))
then
if $IF176 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x13A0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x13B0)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (then
if $IF177 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x13B1)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x13F4)))
then
if $IF178 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1401)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1676)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF179 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1681)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x169A)))
then
if $IF180 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x16A0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x16EA)))
then
if $IF181 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1780)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x17B3)))
then
if $IF182 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1820)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1877)))
then
if $IF183 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1880)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x18A8)))
then
if $IF184 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1E00)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1E9B)))
then
if $IF185 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1EA0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1EE0)))
then
if $IF186 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1EE1)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1EF9)))
then
if $IF187 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1F00)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1F15)))
then
if $IF188 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1F18)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1F1D)))
then
if $IF189 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1F20)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1F39)))
then
if $IF190 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1F3A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1F45)))
then
if $IF191 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1F48)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1F4D)))
then
if $IF192 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1F50)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1F57)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (then
if $IF193 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x1F59))
then
if $IF194 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x1F5B))
then
if $IF195 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x1F5D))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (then
if $IF196 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1F5F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1F7D)))
then
if $IF197 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1F80)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FB4)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (then
if $IF198 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1FB6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FBC)))
then
if $IF199 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x1FBE))
then
if $IF200 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1FC2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FC4)))
then
if $IF201 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1FC6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FCC)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (then
if $IF202 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1FD0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FD3)))
then
if $IF203 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1FD6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FDB)))
then
if $IF204 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1FE0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FEC)))
then
if $IF205 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1FF2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FF4)))
then
if $IF206 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1FF6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1FFC)))
then
if $IF207 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x207F))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (if $IF208 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x2102))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (if $IF209 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x2107))
then
if $IF210 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x210A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x2113)))
then
if $IF211 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x2115))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF212 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x2119)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x211D)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (then
if $IF213 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x2124))
then
if $IF214 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x2126))
then
if $IF215 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x2128))
then
if $IF216 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x212A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x212D)))
then
if $IF217 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x212F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x2131)))
then
if $IF218 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x2133)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x2139)))
then
if $IF219 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x2160)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x2183)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (then
if $IF220 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3005)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x3007)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (if $IF221 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3021)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x3029)))
then
if $IF222 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3031)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x3035)))
then
if $IF223 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3038)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x303A)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (then
if $IF224 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3041)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x3094)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (if $IF225 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x309D)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x309E)))
then
if $IF226 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x30A1)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x30FA)))
then
if $IF227 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x30FC)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x30FE)))
then
if $IF228 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3105)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x312C)))
then
if $IF229 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3131)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x318E)))
then
if $IF230 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x31A0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x31B7)))
then
if $IF231 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3400)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x4DBF)))
then
if $IF232 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x4E00)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x9FFF)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (then
if $IF233 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xA000)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xA48C)))
then
if $IF234 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0xAC00))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (then
if $IF235 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0xD7A3))
then
if $IF236 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xF900)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFA2D)))
then
if $IF237 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFB00)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFB06)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (if $IF238 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFB13)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFB17)))
then
if $IF239 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0xFB1D))
then
if $IF240 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFB1F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFB28)))
then
if $IF241 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFB2A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFB36)))
then
if $IF242 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFB38)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFB3C)))
then
if $IF243 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0xFB3E))
then
if $IF244 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFB40)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFB41)))
then
if $IF245 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFB43)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFB44)))
then
if $IF246 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFB46)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFBB1)))
then
if $IF247 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFBD3)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFD3D)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (if $IF248 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFD50)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFD8F)))
then
if $IF249 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFD92)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFDC7)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (if $IF250 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFDF0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFDFB)))
then
if $IF251 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFE70)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFE72)))
then
if $IF252 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0xFE74))
then
if $IF253 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFE76)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFEFC)))
then
if $IF254 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFF21)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFF3A)))
then
if $IF255 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFF41)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFF5A)))
then
if $IF256 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFF66)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFFBE)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (if $IF257 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFFC2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFFC7)))
then
if $IF258 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFFCA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFFCF)))
then
if $IF259 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFFD2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFFD7)))
then
if $IF260 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFFDA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFFDC)))
then
local.set $src::lexer::unicode::valid (i32.const 0))

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          )
else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )

else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
else)


else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        )
else)


else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        )

else)


else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )

else)


else)


else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )

else)


else)


else)


else)


else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        )
else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )
else)


else)


else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
else)


else)


else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        )

else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  )

else)


else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  )

else)


else)


else)


else)


else)


else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
else)


else)


else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (else)


else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (else)


else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          )

else)


else)


else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  )

else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  )
else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          )

else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )
else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (else)


else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (else)


else)


else)


else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )
else)


else)


                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (else)


else)


else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )

else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (else)


else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          )

else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )

else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                          )
                                                                                                                                                                                                                      )
                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                )
                                                                                                                                                                                                                (else)
                                                                                                                                                                                                              )
                                                                                                                                                                                                          )
                                                                                                                                                                                                          (else)
                                                                                                                                                                                                        )
                                                                                                                                                                                                    )
                                                                                                                                                                                                    (else)
                                                                                                                                                                                                  )
                                                                                                                                                                                              )
                                                                                                                                                                                              (else)
                                                                                                                                                                                            )
                                                                                                                                                                                        )
                                                                                                                                                                                        (else)
                                                                                                                                                                                      )
                                                                                                                                                                                  )
                                                                                                                                                                                  (else)
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                            (else)
                                                                                                                                                                          )
                                                                                                                                                                      )
                                                                                                                                                                      (else)
                                                                                                                                                                    )
                                                                                                                                                                )
                                                                                                                                                                (else)
                                                                                                                                                              )
                                                                                                                                                          )
                                                                                                                                                          (else)
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                    (else)
                                                                                                                                                  )
                                                                                                                                              )
                                                                                                                                              (else)
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                        (else)
                                                                                                                                      )
                                                                                                                                  )
                                                                                                                                  (else)
                                                                                                                                )
                                                                                                                            )
                                                                                                                            (else)
                                                                                                                          )
                                                                                                                      )
                                                                                                                      (else)
                                                                                                                    )
                                                                                                                )
                                                                                                                (else)
                                                                                                              )
                                                                                                          )
                                                                                                          (else)
                                                                                                        )
                                                                                                    )
                                                                                                    (else)
                                                                                                  )
                                                                                              )
                                                                                              (else)
                                                                                            )
                                                                                        )
                                                                                        (else)
                                                                                      )
                                                                                  )
                                                                                  (else)
                                                                                )
                                                                            )
                                                                            (else)
                                                                          )
                                                                      )
                                                                      (else)
                                                                    )
                                                                )
                                                                (else)
                                                              )
                                                          )
                                                          (else)
                                                        )
                                                    )
                                                    (else)
                                                  )
                                              )
                                              (else)
                                            )
                                        )
                                        (else)
                                      )
                                  )
                                  (else)
                                )
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                )
                (else)
              )
          )
          (else)
        )
      (local.get $src::lexer::unicode::valid)
    )
  )
  (func $src::lexer::unicode::isUnicodeCombiningMark_1 (param $char i32) (result i32)
    (local $src::lexer::unicode::valid_1 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::unicode::valid_1 (i32.const 1))
      (if $IF2 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0300)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x034E)))
          (then
            (if $IF3 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0360)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0362)))
                (then
                  (if $IF4 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0483)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0486)))
                      (then
                        (if $IF5 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0591)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x05A1)))
                            (then
                              (if $IF6 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x05A3)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x05B9)))
                                  (then
                                    (if $IF7 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x05BB)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x05BD)))
                                        (then
                                          (if $IF8 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x05BF))
                                              (then
                                                (if $IF9 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x05C1)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x05C2)))
                                                    (then
                                                      (if $IF10 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x05C4))
                                                          (then
                                                            (if $IF11 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x064B)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0655)))
                                                                (then
                                                                  (if $IF12 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0670))
                                                                      (then
                                                                        (if $IF13 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x06D6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x06DC)))
                                                                            (then
                                                                              (if $IF14 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x06DF)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x06E4)))
                                                                                  (then
                                                                                    (if $IF15 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x06E7)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x06E8)))
                                                                                        (then
                                                                                          (if $IF16 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x06EA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x06ED)))
                                                                                              (then
                                                                                                (if $IF17 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0711))
                                                                                                    (then
                                                                                                      (if $IF18 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0730)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x074A)))
                                                                                                          (then
                                                                                                            (if $IF19 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x07A6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x07B0)))
                                                                                                                (then
                                                                                                                  (if $IF20 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0901)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0903)))
                                                                                                                      (then
                                                                                                                        (if $IF21 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x093C))
                                                                                                                            (then
                                                                                                                              (if $IF22 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x093E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x094D)))
                                                                                                                                  (then
                                                                                                                                    (if $IF23 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0951)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0954)))
                                                                                                                                        (then
                                                                                                                                          (if $IF24 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0962)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0963)))
                                                                                                                                              (then
                                                                                                                                                (if $IF25 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0981)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0983)))
                                                                                                                                                    (then
                                                                                                                                                      (if $IF26 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09BC)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09C4)))
                                                                                                                                                          (then
                                                                                                                                                            (if $IF27 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09C7)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09C8)))
                                                                                                                                                                (then
                                                                                                                                                                  (if $IF28 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09CB)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09CD)))
                                                                                                                                                                      (then
                                                                                                                                                                        (if $IF29 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x09D7))
                                                                                                                                                                            (then
                                                                                                                                                                              (if $IF30 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09E2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09E3)))
                                                                                                                                                                                  (then
                                                                                                                                                                                    (if $IF31 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0A02))
                                                                                                                                                                                        (then
                                                                                                                                                                                          (if $IF32 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0A3C))
                                                                                                                                                                                              (then
                                                                                                                                                                                                (if $IF33 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A3E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A42)))
                                                                                                                                                                                                    (then
                                                                                                                                                                                                      (if $IF34 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A47)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A48)))
                                                                                                                                                                                                          (then
                                                                                                                                                                                                            (if $IF35 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A4B)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A4D)))
                                                                                                                                                                                                                (then
                                                                                                                                                                                                                  (if $IF36 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A70)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A71)))
                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                        (if $IF37 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A81)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A83)))
                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                              (if $IF38 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0ABC))
                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                    (if $IF39 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0ABE)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0AC5)))
                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                          (if $IF40 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0AC7)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0AC9)))
                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                (if $IF41 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0ACB)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0ACD)))
                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                      (if $IF42 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B01)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B03)))
                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                            (if $IF43 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0B3C))
                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                  (if $IF44 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B3E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B43)))
                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                        (if $IF45 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B47)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B48)))
                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                              (if $IF46 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B4B)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B4D)))
                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                    (if $IF47 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B56)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B57)))
                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                          (if $IF48 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B82)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B83)))
                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                (if $IF49 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0BBE)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0BC2)))
                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                      (if $IF50 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0BC6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0BC8)))
                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                            (if $IF51 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0BCA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0BCD)))
                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                  (if $IF52 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0BD7))
                                                                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                                                                        (if $IF53 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C01)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C03)))
                                                                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                                                                              (if $IF54 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C3E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C44)))
                                                                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                                                                    (if $IF55 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C46)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C48)))
                                                                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                                                                          (if $IF56 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C4A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C4D)))
                                                                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                                                                (if $IF57 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C55)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C56)))
                                                                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                                                                      (if $IF58 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C82)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C83)))
                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                            (if $IF59 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0CBE)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CC4)))
                                                                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                                                                  (if $IF60 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0CC6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CC8)))
                                                                                                                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                                                                                                                        (if $IF61 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0CCA)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CCD)))
                                                                                                                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                                                                                                                              (if $IF62 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0CD5)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CD6)))
                                                                                                                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                                                                                                                    (if $IF63 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D02)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D03)))
                                                                                                                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                                                                                                                          (if $IF64 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D3E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D43)))
                                                                                                                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                                                                                                                (if $IF65 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D46)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D48)))
                                                                                                                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                                                                                                                      (if $IF66 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D4A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D4D)))
                                                                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF67 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0D57))
                                                                                                                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF68 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D82)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D83)))
                                                                                                                                                                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                                                                                                                                                                        (if $IF69 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0DCA))
                                                                                                                                                                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                                                                                                                                                                              (if $IF70 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0DCF)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0DD4)))
                                                                                                                                                                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF71 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0DD6))
                                                                                                                                                                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                                                                                                                                                                          (if $IF72 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0DD8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0DDF)))
                                                                                                                                                                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                (if $IF73 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0DF2)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0DF3)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                      (if $IF74 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0E31))
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF75 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E34)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E3A)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF76 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E47)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E4E)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (if $IF77 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0EB1))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (if $IF78 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EB4)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0EB9)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF79 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EBB)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0EBC)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (if $IF80 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0EC8)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0ECD)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (if $IF81 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F18)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0F19)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (if $IF82 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0F35))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF83 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0F37))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (if $IF84 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0F39))
then
if $IF85 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F3E)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0F3F)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (then
if $IF86 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F71)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0F84)))
then
if $IF87 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F86)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0F87)))
then
if $IF88 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F90)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0F97)))
then
if $IF89 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F99)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0FBC)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (if $IF90 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x0FC6))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (if $IF91 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x102C)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1032)))
then
if $IF92 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1036)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1039)))
then
if $IF93 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1056)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1059)))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (then
if $IF94 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x17B4)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x17D3)))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (if $IF95 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x18A9))
then
if $IF96 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x20D0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x20DC)))
then
if $IF97 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x20E1))
then
if $IF98 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x302A)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x302F)))
then
if $IF99 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x3099)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x309A)))
then
if $IF100 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0xFB1E))
then
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (if $IF101 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFE20)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFE23)))
then
local.set $src::lexer::unicode::valid_1 (i32.const 0))

else)


else)


else)


else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )

else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )

else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )

else)


else)


else)


else)


else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )

else)


else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )

else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (else)

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                                (else)
                                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                    (else)
                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                        (else)
                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                            (else)
                                                                                                                                                                                                                          )
                                                                                                                                                                                                                      )
                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                )
                                                                                                                                                                                                                (else)
                                                                                                                                                                                                              )
                                                                                                                                                                                                          )
                                                                                                                                                                                                          (else)
                                                                                                                                                                                                        )
                                                                                                                                                                                                    )
                                                                                                                                                                                                    (else)
                                                                                                                                                                                                  )
                                                                                                                                                                                              )
                                                                                                                                                                                              (else)
                                                                                                                                                                                            )
                                                                                                                                                                                        )
                                                                                                                                                                                        (else)
                                                                                                                                                                                      )
                                                                                                                                                                                  )
                                                                                                                                                                                  (else)
                                                                                                                                                                                )
                                                                                                                                                                            )
                                                                                                                                                                            (else)
                                                                                                                                                                          )
                                                                                                                                                                      )
                                                                                                                                                                      (else)
                                                                                                                                                                    )
                                                                                                                                                                )
                                                                                                                                                                (else)
                                                                                                                                                              )
                                                                                                                                                          )
                                                                                                                                                          (else)
                                                                                                                                                        )
                                                                                                                                                    )
                                                                                                                                                    (else)
                                                                                                                                                  )
                                                                                                                                              )
                                                                                                                                              (else)
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                        (else)
                                                                                                                                      )
                                                                                                                                  )
                                                                                                                                  (else)
                                                                                                                                )
                                                                                                                            )
                                                                                                                            (else)
                                                                                                                          )
                                                                                                                      )
                                                                                                                      (else)
                                                                                                                    )
                                                                                                                )
                                                                                                                (else)
                                                                                                              )
                                                                                                          )
                                                                                                          (else)
                                                                                                        )
                                                                                                    )
                                                                                                    (else)
                                                                                                  )
                                                                                              )
                                                                                              (else)
                                                                                            )
                                                                                        )
                                                                                        (else)
                                                                                      )
                                                                                  )
                                                                                  (else)
                                                                                )
                                                                            )
                                                                            (else)
                                                                          )
                                                                      )
                                                                      (else)
                                                                    )
                                                                )
                                                                (else)
                                                              )
                                                          )
                                                          (else)
                                                        )
                                                    )
                                                    (else)
                                                  )
                                              )
                                              (else)
                                            )
                                        )
                                        (else)
                                      )
                                  )
                                  (else)
                                )
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                )
                (else)
              )
          )
          (else)
        )
      (local.get $src::lexer::unicode::valid_1)
    )
  )
  (func $src::lexer::unicode::isUnicodeDigit_1 (param $char i32) (result i32)
    (local $src::lexer::unicode::valid_2 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::unicode::valid_2 (i32.const 1))
      (if $IF2 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0030)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0039)))
          (then
            (if $IF3 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0660)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0669)))
                (then
                  (if $IF4 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x06F0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x06F9)))
                      (then
                        (if $IF5 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0966)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x096F)))
                            (then
                              (if $IF6 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x09E6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x09EF)))
                                  (then
                                    (if $IF7 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0A66)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0A6F)))
                                        (then
                                          (if $IF8 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0AE6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0AEF)))
                                              (then
                                                (if $IF9 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0B66)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0B6F)))
                                                    (then
                                                      (if $IF10 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0BE7)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0BEF)))
                                                          (then
                                                            (if $IF11 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0C66)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0C6F)))
                                                                (then
                                                                  (if $IF12 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0CE6)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0CEF)))
                                                                      (then
                                                                        (if $IF13 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0D66)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0D6F)))
                                                                            (then
                                                                              (if $IF14 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0E50)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0E59)))
                                                                                  (then
                                                                                    (if $IF15 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0ED0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0ED9)))
                                                                                        (then
                                                                                          (if $IF16 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x0F20)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x0F29)))
                                                                                              (then
                                                                                                (if $IF17 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1040)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1049)))
                                                                                                    (then
                                                                                                      (if $IF18 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1369)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1371)))
                                                                                                          (then
                                                                                                            (if $IF19 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x17E0)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x17E9)))
                                                                                                                (then
                                                                                                                  (if $IF20 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x1810)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x1819)))
                                                                                                                      (then
                                                                                                                        (if $IF21 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFF10)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFF19)))
                                                                                                                            (then
                                                                                                                              (local.set $src::lexer::unicode::valid_2 (i32.const 0))
                                                                                                                            )
                                                                                                                            (else)
                                                                                                                          )
                                                                                                                      )
                                                                                                                      (else)
                                                                                                                    )
                                                                                                                )
                                                                                                                (else)
                                                                                                              )
                                                                                                          )
                                                                                                          (else)
                                                                                                        )
                                                                                                    )
                                                                                                    (else)
                                                                                                  )
                                                                                              )
                                                                                              (else)
                                                                                            )
                                                                                        )
                                                                                        (else)
                                                                                      )
                                                                                  )
                                                                                  (else)
                                                                                )
                                                                            )
                                                                            (else)
                                                                          )
                                                                      )
                                                                      (else)
                                                                    )
                                                                )
                                                                (else)
                                                              )
                                                          )
                                                          (else)
                                                        )
                                                    )
                                                    (else)
                                                  )
                                              )
                                              (else)
                                            )
                                        )
                                        (else)
                                      )
                                  )
                                  (else)
                                )
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                )
                (else)
              )
          )
          (else)
        )
      (local.get $src::lexer::unicode::valid_2)
    )
  )
  (func $src::lexer::unicode::isUnicodeConnectorPunctuation_1 (param $char i32) (result i32)
    (local $src::lexer::unicode::valid_3 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::unicode::valid_3 (i32.const 1))
      (if $IF2 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x005F))
          (then
            (if $IF3 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0x203F)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0x2040)))
                (then
                  (if $IF4 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0x30FB))
                      (then
                        (if $IF5 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFE33)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFE34)))
                            (then
                              (if $IF6 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $char) (i32.const 0xFE4D)) (call $system::core::u32::u32.>_1 (local.get $char) (i32.const 0xFE4F)))
                                  (then
                                    (if $IF7 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0xFF3F))
                                        (then
                                          (if $IF8 (call $system::core::u32::u32.!=_1 (local.get $char) (i32.const 0xFF65))
                                              (then
                                                (local.set $src::lexer::unicode::valid_3 (i32.const 0))
                                              )
                                              (else)
                                            )
                                        )
                                        (else)
                                      )
                                  )
                                  (else)
                                )
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                )
                (else)
              )
          )
          (else)
        )
      (local.get $src::lexer::unicode::valid_3)
    )
  )
  (data 0 (i32.const 32766) "\12\00\00\00E\00n\00d\00O\00f\00F\00i\00l\00e\00\00")
  (data 0 (i32.const 32789) "\14\00\00\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 32814) "\0e\00\00\00U\00n\00k\00n\00o\00w\00n\00\00")
  (data 0 (i32.const 32833) "\0e\00\00\00N\00e\00w\00L\00i\00n\00e\00\00")
  (data 0 (i32.const 32852) "\14\00\00\00W\00h\00i\00t\00e\00s\00p\00a\00c\00e\00\00")
  (data 0 (i32.const 32877) "\1a\00\00\00S\00t\00r\00i\00n\00g\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 32908) "\1a\00\00\00N\00u\00m\00b\00e\00r\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 32939) "\16\00\00\00L\00i\00n\00e\00C\00o\00m\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 32966) " \00\00\00M\00u\00l\00t\00i\00L\00i\00n\00e\00C\00o\00m\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 33003) "\1e\00\00\00P\00a\00r\00e\00n\00t\00h\00e\00s\00e\00s\00O\00p\00e\00n\00\00")
  (data 0 (i32.const 33038) " \00\00\00P\00a\00r\00e\00n\00t\00h\00e\00s\00e\00s\00C\00l\00o\00s\00e\00\00")
  (data 0 (i32.const 33075) "\1e\00\00\00M\00a\00c\00r\00o\00D\00e\00c\00o\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 33110) "\14\00\00\00V\00e\00c\00t\00o\00r\00O\00p\00e\00n\00\00")
  (data 0 (i32.const 33135) "\16\00\00\00V\00e\00c\00t\00o\00r\00C\00l\00o\00s\00e\00\00")
  (data 0 (i32.const 33162) "\10\00\00\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 33183) "\1e\00\00\00C\00u\00r\00l\00y\00B\00r\00a\00c\00e\00s\00O\00p\00e\00n\00\00")
  (data 0 (i32.const 33218) " \00\00\00C\00u\00r\00l\00y\00B\00r\00a\00c\00e\00s\00C\00l\00o\00s\00e\00\00")
  (data 0 (i32.const 33255) "\0a\00\00\00C\00o\00m\00m\00a\00\00")
  (data 0 (i32.const 33270) "\0e\00\00\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 33289) "\02\00\00\00(\00\00")
  (data 0 (i32.const 33296) "\02\00\00\00,\00\00")
  (data 0 (i32.const 33303) "\02\00\00\00)\00\00")
  (func $src::lexer::tokens::TokenType.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::lexer::tokens::EndOfFile.is_1 (local.get $self)) (call $src::lexer::tokens::Identifier.is_1 (local.get $self))) (call $src::lexer::tokens::Unknown.is_1 (local.get $self))) (call $src::lexer::tokens::NewLine.is_1 (local.get $self))) (call $src::lexer::tokens::Whitespace.is_1 (local.get $self))) (call $src::lexer::tokens::StringLiteral.is_1 (local.get $self))) (call $src::lexer::tokens::NumberLiteral.is_1 (local.get $self))) (call $src::lexer::tokens::ParenthesesOpen.is_1 (local.get $self))) (call $src::lexer::tokens::ParenthesesClose.is_1 (local.get $self))) (call $src::lexer::tokens::MacroDecoration.is_1 (local.get $self))) (call $src::lexer::tokens::VectorOpen.is_1 (local.get $self))) (call $src::lexer::tokens::VectorClose.is_1 (local.get $self))) (call $src::lexer::tokens::Operator.is_1 (local.get $self))) (call $src::lexer::tokens::LineComment.is_1 (local.get $self))) (call $src::lexer::tokens::MultiLineComment.is_1 (local.get $self))) (call $src::lexer::tokens::CurlyBracesOpen.is_1 (local.get $self))) (call $src::lexer::tokens::CurlyBracesClose.is_1 (local.get $self))) (call $src::lexer::tokens::Comma.is_1 (local.get $self))) (call $src::lexer::tokens::Keyword.is_1 (local.get $self)))
    )
  )
  (func $src::lexer::tokens::TokenType.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::lexer::tokens::TokenType.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::lexer::tokens::TokenType.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::lexer::tokens::TokenType.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::TokenType.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::EndOfFile.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Identifier.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Unknown.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::NewLine.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Whitespace.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::StringLiteral.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::NumberLiteral.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::ParenthesesOpen.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::ParenthesesClose.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::MacroDecoration.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::VectorOpen.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::VectorClose.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Operator.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::LineComment.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::MultiLineComment.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::CurlyBracesOpen.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::CurlyBracesClose.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Comma.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Keyword.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::EndOfFile.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant (i32.const 147))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant))
    )
  )
  (func $src::lexer::tokens::EndOfFile.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::EndOfFile.EndOfFile$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_1 (i32.const 147))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::EndOfFile.apply_1 (result i64)
    (call $src::lexer::tokens::EndOfFile.EndOfFile$discriminant_1)
  )
  (func $src::lexer::tokens::EndOfFile.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::EndOfFile.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::EndOfFile.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::EndOfFile.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::Identifier.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_2 (i32.const 148))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_2))
    )
  )
  (func $src::lexer::tokens::Identifier.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Identifier.Identifier$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_3 (i32.const 148))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::Identifier.apply_1 (result i64)
    (call $src::lexer::tokens::Identifier.Identifier$discriminant_1)
  )
  (func $src::lexer::tokens::Identifier.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Identifier.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Identifier.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::Identifier.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::Unknown.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_4 (i32.const 149))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_4))
    )
  )
  (func $src::lexer::tokens::Unknown.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Unknown.Unknown$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_5 (i32.const 149))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::Unknown.apply_1 (result i64)
    (call $src::lexer::tokens::Unknown.Unknown$discriminant_1)
  )
  (func $src::lexer::tokens::Unknown.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Unknown.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Unknown.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::Unknown.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::NewLine.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_6 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_6 (i32.const 150))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_6))
    )
  )
  (func $src::lexer::tokens::NewLine.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::NewLine.NewLine$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_7 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_7 (i32.const 150))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_7)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::NewLine.apply_1 (result i64)
    (call $src::lexer::tokens::NewLine.NewLine$discriminant_1)
  )
  (func $src::lexer::tokens::NewLine.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::NewLine.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::NewLine.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::NewLine.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::Whitespace.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_8 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_8 (i32.const 151))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_8))
    )
  )
  (func $src::lexer::tokens::Whitespace.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Whitespace.Whitespace$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_9 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_9 (i32.const 151))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_9)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::Whitespace.apply_1 (result i64)
    (call $src::lexer::tokens::Whitespace.Whitespace$discriminant_1)
  )
  (func $src::lexer::tokens::Whitespace.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Whitespace.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Whitespace.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::Whitespace.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::StringLiteral.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_10 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_10 (i32.const 152))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_10))
    )
  )
  (func $src::lexer::tokens::StringLiteral.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::StringLiteral.StringLiteral$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_11 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_11 (i32.const 152))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_11)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::StringLiteral.apply_1 (result i64)
    (call $src::lexer::tokens::StringLiteral.StringLiteral$discriminant_1)
  )
  (func $src::lexer::tokens::StringLiteral.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::StringLiteral.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::StringLiteral.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::StringLiteral.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::NumberLiteral.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_12 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_12 (i32.const 153))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_12))
    )
  )
  (func $src::lexer::tokens::NumberLiteral.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::NumberLiteral.NumberLiteral$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_13 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_13 (i32.const 153))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_13)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::NumberLiteral.apply_1 (result i64)
    (call $src::lexer::tokens::NumberLiteral.NumberLiteral$discriminant_1)
  )
  (func $src::lexer::tokens::NumberLiteral.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::NumberLiteral.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::NumberLiteral.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::NumberLiteral.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::ParenthesesOpen.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_14 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_14 (i32.const 154))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_14))
    )
  )
  (func $src::lexer::tokens::ParenthesesOpen.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::ParenthesesOpen.ParenthesesOpen$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_15 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_15 (i32.const 154))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_15)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::ParenthesesOpen.apply_1 (result i64)
    (call $src::lexer::tokens::ParenthesesOpen.ParenthesesOpen$discriminant_1)
  )
  (func $src::lexer::tokens::ParenthesesOpen.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::ParenthesesOpen.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::ParenthesesOpen.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::ParenthesesOpen.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::ParenthesesClose.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_16 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_16 (i32.const 155))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_16))
    )
  )
  (func $src::lexer::tokens::ParenthesesClose.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::ParenthesesClose.ParenthesesClose$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_17 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_17 (i32.const 155))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_17)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::ParenthesesClose.apply_1 (result i64)
    (call $src::lexer::tokens::ParenthesesClose.ParenthesesClose$discriminant_1)
  )
  (func $src::lexer::tokens::ParenthesesClose.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::ParenthesesClose.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::ParenthesesClose.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::ParenthesesClose.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::MacroDecoration.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_18 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_18 (i32.const 156))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_18))
    )
  )
  (func $src::lexer::tokens::MacroDecoration.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::MacroDecoration.MacroDecoration$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_19 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_19 (i32.const 156))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_19)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::MacroDecoration.apply_1 (result i64)
    (call $src::lexer::tokens::MacroDecoration.MacroDecoration$discriminant_1)
  )
  (func $src::lexer::tokens::MacroDecoration.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::MacroDecoration.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::MacroDecoration.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::MacroDecoration.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::VectorOpen.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_20 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_20 (i32.const 157))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_20))
    )
  )
  (func $src::lexer::tokens::VectorOpen.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::VectorOpen.VectorOpen$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_21 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_21 (i32.const 157))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_21)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::VectorOpen.apply_1 (result i64)
    (call $src::lexer::tokens::VectorOpen.VectorOpen$discriminant_1)
  )
  (func $src::lexer::tokens::VectorOpen.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::VectorOpen.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::VectorOpen.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::VectorOpen.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::VectorClose.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_22 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_22 (i32.const 158))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_22))
    )
  )
  (func $src::lexer::tokens::VectorClose.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::VectorClose.VectorClose$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_23 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_23 (i32.const 158))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_23)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::VectorClose.apply_1 (result i64)
    (call $src::lexer::tokens::VectorClose.VectorClose$discriminant_1)
  )
  (func $src::lexer::tokens::VectorClose.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::VectorClose.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::VectorClose.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::VectorClose.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::Operator.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_24 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_24 (i32.const 159))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_24))
    )
  )
  (func $src::lexer::tokens::Operator.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Operator.Operator$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_25 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_25 (i32.const 159))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_25)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::Operator.apply_1 (result i64)
    (call $src::lexer::tokens::Operator.Operator$discriminant_1)
  )
  (func $src::lexer::tokens::Operator.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Operator.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Operator.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::Operator.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::LineComment.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_26 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_26 (i32.const 160))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_26))
    )
  )
  (func $src::lexer::tokens::LineComment.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::LineComment.LineComment$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_27 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_27 (i32.const 160))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_27)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::LineComment.apply_1 (result i64)
    (call $src::lexer::tokens::LineComment.LineComment$discriminant_1)
  )
  (func $src::lexer::tokens::LineComment.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::LineComment.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::LineComment.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::LineComment.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::MultiLineComment.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_28 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_28 (i32.const 161))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_28))
    )
  )
  (func $src::lexer::tokens::MultiLineComment.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::MultiLineComment.MultiLineComment$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_29 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_29 (i32.const 161))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_29)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::MultiLineComment.apply_1 (result i64)
    (call $src::lexer::tokens::MultiLineComment.MultiLineComment$discriminant_1)
  )
  (func $src::lexer::tokens::MultiLineComment.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::MultiLineComment.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::MultiLineComment.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::MultiLineComment.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::CurlyBracesOpen.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_30 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_30 (i32.const 162))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_30))
    )
  )
  (func $src::lexer::tokens::CurlyBracesOpen.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::CurlyBracesOpen.CurlyBracesOpen$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_31 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_31 (i32.const 162))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_31)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::CurlyBracesOpen.apply_1 (result i64)
    (call $src::lexer::tokens::CurlyBracesOpen.CurlyBracesOpen$discriminant_1)
  )
  (func $src::lexer::tokens::CurlyBracesOpen.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::CurlyBracesOpen.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::CurlyBracesOpen.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::CurlyBracesOpen.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::CurlyBracesClose.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_32 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_32 (i32.const 163))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_32))
    )
  )
  (func $src::lexer::tokens::CurlyBracesClose.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::CurlyBracesClose.CurlyBracesClose$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_33 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_33 (i32.const 163))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_33)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::CurlyBracesClose.apply_1 (result i64)
    (call $src::lexer::tokens::CurlyBracesClose.CurlyBracesClose$discriminant_1)
  )
  (func $src::lexer::tokens::CurlyBracesClose.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::CurlyBracesClose.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::CurlyBracesClose.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::CurlyBracesClose.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::Comma.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_34 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_34 (i32.const 164))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_34))
    )
  )
  (func $src::lexer::tokens::Comma.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Comma.Comma$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_35 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_35 (i32.const 164))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_35)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::Comma.apply_1 (result i64)
    (call $src::lexer::tokens::Comma.Comma$discriminant_1)
  )
  (func $src::lexer::tokens::Comma.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Comma.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Comma.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::Comma.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::Keyword.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_36 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_36 (i32.const 165))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_36))
    )
  )
  (func $src::lexer::tokens::Keyword.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Keyword.Keyword$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_37 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_37 (i32.const 165))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::lexer::tokens::discriminant_37)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::Keyword.apply_1 (result i64)
    (call $src::lexer::tokens::Keyword.Keyword$discriminant_1)
  )
  (func $src::lexer::tokens::Keyword.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Keyword.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Keyword.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::Keyword.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::Token.is_1 (param $a i64) (result i32)
    (local $src::lexer::tokens::discriminant_38 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::tokens::discriminant_38 (i32.const 166))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::tokens::discriminant_38))
    )
  )
  (func $src::lexer::tokens::Token.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::tokens::Token.Token$discriminant_1 (result i64)
    (local $src::lexer::tokens::discriminant_39 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::discriminant_39 (i32.const 166))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::lexer::tokens::discriminant_39)) (i32.const 32))
    )
  )
  (func $src::lexer::tokens::Token.apply_1 (param $tokenType i64) (param $start i32) (param $end i32) (result i64)
    (local $src::lexer::tokens::$ref i64)
    (block $B1 (result i64)
      (local.set $src::lexer::tokens::$ref (call $src::lexer::tokens::Token.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::lexer::tokens::Token.property$0_2 (local.get $src::lexer::tokens::$ref) (local.get $tokenType))
      (call $src::lexer::tokens::Token.property$1_2 (local.get $src::lexer::tokens::$ref) (local.get $start))
      (call $src::lexer::tokens::Token.property$2_2 (local.get $src::lexer::tokens::$ref) (local.get $end))
      (local.get $src::lexer::tokens::$ref)
    )
  )
  (func $src::lexer::tokens::Token.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::lexer::tokens::Token.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::lexer::tokens::Token.Token$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::lexer::tokens::Token.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Token.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::tokens::Token.tokenType_1 (param $self i64) (result i64)
    (call $src::lexer::tokens::Token.property$0_1 (local.get $self))
  )
  (func $src::lexer::tokens::Token.tokenType_2 (param $self i64) (param $value i64)
    (call $src::lexer::tokens::Token.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::lexer::tokens::Token.property$0_1 (param $self i64) (result i64)
    (call $src::lexer::tokens::TokenType.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::lexer::tokens::Token.property$0_2 (param $self i64) (param $value i64)
    (call $src::lexer::tokens::TokenType.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::lexer::tokens::Token.start_1 (param $self i64) (result i32)
    (call $src::lexer::tokens::Token.property$1_1 (local.get $self))
  )
  (func $src::lexer::tokens::Token.start_2 (param $self i64) (param $value i32)
    (call $src::lexer::tokens::Token.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::lexer::tokens::Token.property$1_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::lexer::tokens::Token.property$1_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::lexer::tokens::Token.end_1 (param $self i64) (result i32)
    (call $src::lexer::tokens::Token.property$2_1 (local.get $self))
  )
  (func $src::lexer::tokens::Token.end_2 (param $self i64) (param $value i32)
    (call $src::lexer::tokens::Token.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::lexer::tokens::Token.property$2_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 12))
  )
  (func $src::lexer::tokens::Token.property$2_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 12))
  )
  (func $src::lexer::tokens::Token.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::tokens::Token.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::tokens::TokenType.toString_1 (param $self i64) (result i64)
    (local $var$1 i64)
    (block $B1 (result i64)
      (local.set $var$1 (local.get $self))
      (block $B1_0
          (block $B1_1
              (block $B1_2
                  (block $B1_3
                      (block $B1_4
                          (block $B1_5
                              (block $B1_6
                                  (block $B1_7
                                      (block $B1_8
                                          (block $B1_9
                                              (block $B1_10
                                                  (block $B1_11
                                                      (block $B1_12
                                                          (block $B1_13
                                                              (block $B1_14
                                                                  (block $B1_15
                                                                      (block $B1_16
                                                                          (block $B1_17
                                                                              (block $B1_18
                                                                                  (br_if $B1_0 (call $src::lexer::tokens::EndOfFile.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_1 (call $src::lexer::tokens::Identifier.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_2 (call $src::lexer::tokens::Unknown.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_3 (call $src::lexer::tokens::NewLine.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_4 (call $src::lexer::tokens::Whitespace.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_5 (call $src::lexer::tokens::StringLiteral.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_6 (call $src::lexer::tokens::NumberLiteral.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_7 (call $src::lexer::tokens::LineComment.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_8 (call $src::lexer::tokens::MultiLineComment.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_9 (call $src::lexer::tokens::ParenthesesOpen.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_10 (call $src::lexer::tokens::ParenthesesClose.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_11 (call $src::lexer::tokens::MacroDecoration.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_12 (call $src::lexer::tokens::VectorOpen.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_13 (call $src::lexer::tokens::VectorClose.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_14 (call $src::lexer::tokens::Operator.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_15 (call $src::lexer::tokens::CurlyBracesOpen.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_16 (call $src::lexer::tokens::CurlyBracesClose.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_17 (call $src::lexer::tokens::Comma.is_1 (local.get $var$1)))
                                                                                  (br_if $B1_18 (call $src::lexer::tokens::Keyword.is_1 (local.get $var$1)))
                                                                                )
                                                                              (i64.const 0x00000004000081f6)
                                                                              (br $B1)
                                                                            )
                                                                          (i64.const 0x00000004000081e7)
                                                                          (br $B1)
                                                                        )
                                                                      (i64.const 0x00000004000081c2)
                                                                      (br $B1)
                                                                    )
                                                                  (i64.const 0x000000040000819f)
                                                                  (br $B1)
                                                                )
                                                              (i64.const 0x000000040000818a)
                                                              (br $B1)
                                                            )
                                                          (i64.const 0x000000040000816f)
                                                          (br $B1)
                                                        )
                                                      (i64.const 0x0000000400008156)
                                                      (br $B1)
                                                    )
                                                  (i64.const 0x0000000400008133)
                                                  (br $B1)
                                                )
                                              (i64.const 0x000000040000810e)
                                              (br $B1)
                                            )
                                          (i64.const 0x00000004000080eb)
                                          (br $B1)
                                        )
                                      (i64.const 0x00000004000080c6)
                                      (br $B1)
                                    )
                                  (i64.const 0x00000004000080ab)
                                  (br $B1)
                                )
                              (i64.const 0x000000040000808c)
                              (br $B1)
                            )
                          (i64.const 0x000000040000806d)
                          (br $B1)
                        )
                      (i64.const 0x0000000400008054)
                      (br $B1)
                    )
                  (i64.const 0x0000000400008041)
                  (br $B1)
                )
              (i64.const 0x000000040000802e)
              (br $B1)
            )
          (i64.const 0x0000000400008015)
          (br $B1)
        )
      (i64.const 0x0000000400007ffe)
      (br $B1)
    )
  )
  (func $src::lexer::tokens::Token.textIn_1 (param $self i64) (param $source i64) (result i64)
    (call $system::core::string::string.substring_1 (local.get $source) (call $system::core::u32::u32.as_5 (call $src::lexer::tokens::Token.start_1 (local.get $self))) (call $system::core::u32::u32.as_5 (call $src::lexer::tokens::Token.end_1 (local.get $self))))
  )
  (func $src::lexer::tokens::Token.toString_1 (param $self i64) (result i64)
    (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::lexer::tokens::TokenType.toString_1 (call $src::lexer::tokens::Token.tokenType_1 (local.get $self))) (i64.const 0x0000000400008209)) (call $system::core::string::string.stringify_6 (call $src::lexer::tokens::Token.start_1 (local.get $self)))) (i64.const 0x0000000400008210)) (call $system::core::string::string.stringify_6 (call $src::lexer::tokens::Token.end_1 (local.get $self)))) (i64.const 0x0000000400008217))
  )
  (data 0 (i32.const 32761) "\00\00\00\00\00")
  (func $src::helpers::Nil.is_1 (param $a i64) (result i32)
    (local $src::helpers::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::helpers::discriminant (i32.const 168))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::helpers::discriminant))
    )
  )
  (func $src::helpers::Nil.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::helpers::Nil.Nil$discriminant_1 (result i64)
    (local $src::helpers::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::helpers::discriminant_1 (i32.const 168))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::helpers::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::helpers::Nil.apply_1 (result i64)
    (call $src::helpers::Nil.Nil$discriminant_1)
  )
  (func $src::helpers::Nil.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::helpers::Nil.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::helpers::Nil.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::helpers::Nil.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::helpers::Nil.as_3 (param $self i64) (result i32)
    (i32.const 0)
  )
  (func $src::helpers::repeat_1 (param $str i64) (param $times i32) (result i64)
    (local $src::helpers::ret i64)
    (local $src::helpers::i i32)
    (block $B1 (result i64)
      (local.set $src::helpers::ret (i64.const 0x0000000400007ff9))
      (local.set $src::helpers::i (i32.const 0))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::i32::i32.>=_1 (local.get $src::helpers::i) (local.get $times))
                      (then
                        (block $B5
                            (br $Break2)
                          )
                      )
                      (else)
                    )
                  (local.set $src::helpers::ret (call $system::core::string::string.++_1 (local.get $src::helpers::ret) (local.get $str)))
                  (local.set $src::helpers::i (call $system::core::i32::i32.+_1 (local.get $src::helpers::i) (i32.const 1)))
                  (br $Loop2)
                )
            )
        )
      (local.get $src::helpers::ret)
    )
  )
  (func $system::core::math::min_1 (param $a i32) (param $b i32) (result i32)
    (if $IF1 (result i32) (call $system::core::i32::i32.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $b)
      )
      (else
        (local.get $a)
      )
    )
  )
  (func $system::core::math::min_2 (param $a i32) (param $b i32) (result i32)
    (if $IF1 (result i32) (call $system::core::u32::u32.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $b)
      )
      (else
        (local.get $a)
      )
    )
  )
  (func $system::core::math::min_3 (param $a i64) (param $b i64) (result i64)
    (if $IF1 (result i64) (call $system::core::i64::i64.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $b)
      )
      (else
        (local.get $a)
      )
    )
  )
  (func $system::core::math::min_4 (param $a i64) (param $b i64) (result i64)
    (if $IF1 (result i64) (call $system::core::u64::u64.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $b)
      )
      (else
        (local.get $a)
      )
    )
  )
  (func $system::core::math::min_5 (param $a f32) (param $b f32) (result f32)
    (if $IF1 (result f32) (call $system::core::f32::f32.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $b)
      )
      (else
        (local.get $a)
      )
    )
  )
  (func $system::core::math::min_6 (param $a f64) (param $b f64) (result f64)
    (if $IF1 (result f64) (call $system::core::f64::f64.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $b)
      )
      (else
        (local.get $a)
      )
    )
  )
  (func $system::core::math::max_1 (param $a i32) (param $b i32) (result i32)
    (if $IF1 (result i32) (call $system::core::i32::i32.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $a)
      )
      (else
        (local.get $b)
      )
    )
  )
  (func $system::core::math::max_2 (param $a i32) (param $b i32) (result i32)
    (if $IF1 (result i32) (call $system::core::u32::u32.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $a)
      )
      (else
        (local.get $b)
      )
    )
  )
  (func $system::core::math::max_3 (param $a i64) (param $b i64) (result i64)
    (if $IF1 (result i64) (call $system::core::i64::i64.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $a)
      )
      (else
        (local.get $b)
      )
    )
  )
  (func $system::core::math::max_4 (param $a i64) (param $b i64) (result i64)
    (if $IF1 (result i64) (call $system::core::u64::u64.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $a)
      )
      (else
        (local.get $b)
      )
    )
  )
  (func $system::core::math::max_5 (param $a f32) (param $b f32) (result f32)
    (if $IF1 (result f32) (call $system::core::f32::f32.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $a)
      )
      (else
        (local.get $b)
      )
    )
  )
  (func $system::core::math::max_6 (param $a f64) (param $b f64) (result f64)
    (if $IF1 (result f64) (call $system::core::f64::f64.>_1 (local.get $a) (local.get $b))
      (then
        (local.get $a)
      )
      (else
        (local.get $b)
      )
    )
  )
  (global $system::core::memory::AL_BITS (mut i32) (i32.const 0))
  (global $system::core::memory::AL_SIZE (mut i32) (i32.const 0))
  (global $system::core::memory::AL_MASK (mut i32) (i32.const 0))
  (global $system::core::memory::MAX_SIZE_32 (mut i32) (i32.const 0))
  (global $system::core::memory::HEAP_BASE (mut i32) (i32.const 0))
  (global $system::core::memory::startOffset (mut i32) (i32.const 0))
  (global $system::core::memory::offset (mut i32) (i32.const 0))
  (export "test_getMaxMemory" (func $system::core::memory::getMaxMemory_1))
  (func $system::core::memory::getMaxMemory_1 (result i32)
    (global.get $system::core::memory::offset)
  )
  (func $system::core::memory::growMemory_1 (param $pages i32) (result i32)
    (memory.grow (get_local $pages))
  )
  (func $system::core::memory::currentMemory_1 (result i32)
    (memory.size)
  )
  (func $system::core::memory::calloc_1 (param $itemCount i32) (param $itemSize i32) (result i32)
    (local $system::core::memory::size i32)
    (local $system::core::memory::$ret i32)
    (block $B1 (result i32)
      (local.set $system::core::memory::size (call $system::core::u32::u32.*_1 (local.get $itemCount) (local.get $itemSize)))
      (local.set $system::core::memory::$ret (call $system::core::memory::malloc_1 (local.get $system::core::memory::size)))
      (call $system::core::memory::memset_1 (local.get $system::core::memory::$ret) (call $system::core::i32::i32.as_8 (i32.const 0)) (local.get $system::core::memory::size))
      (local.get $system::core::memory::$ret)
    )
  )
  (func $system::core::memory::malloc_1 (param $size i32) (result i32)
    (local $system::core::memory::ptr i32)
    (local $system::core::memory::newPtr i32)
    (local $system::core::memory::pagesBefore i32)
    (local $system::core::memory::pagesNeeded i32)
    (local $system::core::memory::pagesWanted i32)
    (block $B1 (result i32)
      (if $IF2 (call $system::core::u32::u32.==_1 (local.get $size) (call $system::core::i32::i32.as_4 (i32.const 0)))
          (then
            (call $system::core::native::panic_1)
          )
          (else)
        )
      (if $IF3 (call $system::core::u32::u32.>_1 (local.get $size) (global.get $system::core::memory::MAX_SIZE_32))
          (then
            (call $system::core::native::panic_1)
          )
          (else)
        )
      (local.set $system::core::memory::ptr (global.get $system::core::memory::offset))
      (local.set $system::core::memory::newPtr (call $system::core::u32::u32.&_1 (call $system::core::u32::u32.+_1 (call $system::core::u32::u32.+_1 (call $system::core::u32::u32.+_1 (local.get $system::core::memory::ptr) (call $system::core::i32::i32.as_4 (i32.const 16))) (call $system::core::math::max_2 (local.get $size) (call $system::core::i32::i32.as_4 (i32.const 16)))) (global.get $system::core::memory::AL_MASK)) (call $system::core::u32::u32.~_1 (global.get $system::core::memory::AL_MASK))))
      (local.set $system::core::memory::pagesBefore (call $system::core::memory::currentMemory_1))
      (if $IF4 (call $system::core::u32::u32.>_1 (local.get $system::core::memory::newPtr) (call $system::core::u32::u32.<<_1 (local.get $system::core::memory::pagesBefore) (i32.const 16)))
          (then
            (block $B5
                (local.set $system::core::memory::pagesNeeded (call $system::core::u32::u32.>>_1 (call $system::core::u32::u32.&_1 (call $system::core::u32::u32.+_1 (call $system::core::u32::u32.-_1 (local.get $system::core::memory::newPtr) (local.get $system::core::memory::ptr)) (i32.const 0xffff)) (call $system::core::u32::u32.~_1 (i32.const 0xffff))) (i32.const 16)))
                (local.set $system::core::memory::pagesWanted (call $system::core::math::max_2 (local.get $system::core::memory::pagesBefore) (local.get $system::core::memory::pagesNeeded)))
                (if $IF6 (call $system::core::u32::u32.<_1 (call $system::core::memory::growMemory_1 (local.get $system::core::memory::pagesWanted)) (call $system::core::i32::i32.as_4 (i32.const 0)))
                    (then
                      (block $B7
                          (if $IF8 (call $system::core::u32::u32.<_1 (call $system::core::memory::growMemory_1 (local.get $system::core::memory::pagesNeeded)) (call $system::core::i32::i32.as_4 (i32.const 0)))
                              (then
                                (block $B9
                                    (call $system::core::native::panic_1)
                                  )
                              )
                              (else)
                            )
                        )
                    )
                    (else)
                  )
              )
          )
          (else)
        )
      (global.set $system::core::memory::offset (local.get $system::core::memory::newPtr))
      (call $system::core::u32::u32.+_1 (local.get $system::core::memory::ptr) (call $system::core::i32::i32.as_4 (i32.const 16)))
    )
  )
  (func $system::core::memory::free_1 (param $ptr i32)
    (block $B1
      (nop)
    )
  )
  (func $system::core::memory::memcpy_1 (param $dst i32) (param $src i32) (param $length i32) (result i32)
    (local $system::core::memory::i i32)
    (local $system::core::memory::SRC i64)
    (local $system::core::memory::DST i64)
    (block $B1 (result i32)
      (local.set $system::core::memory::i (call $system::core::i32::i32.as_4 (i32.const 0)))
      (local.set $system::core::memory::SRC (call $system::core::u32::u32.as_8 (local.get $src)))
      (local.set $system::core::memory::DST (call $system::core::u32::u32.as_8 (local.get $dst)))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $system::core::memory::i) (local.get $length))
                      (then
                        (block $B5
                            (br $Break2)
                          )
                      )
                      (else)
                    )
                  (call $system::core::u8::u8.store_2 (local.get $system::core::memory::DST) (call $system::core::u8::u8.load_2 (local.get $system::core::memory::SRC) (local.get $system::core::memory::i)) (local.get $system::core::memory::i))
                  (local.set $system::core::memory::i (call $system::core::u32::u32.+_1 (local.get $system::core::memory::i) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (br $Loop2)
                )
            )
        )
      (call $system::core::u32::u32.+_1 (local.get $dst) (local.get $length))
    )
  )
  (func $system::core::memory::memset_1 (param $ptr i32) (param $content i32) (param $len i32)
    (local $end i32)
    (set_local $end (i32.add (get_local $ptr) (get_local $len)))
    (block $exit (loop $cont (br_if $exit (i32.eq (get_local $ptr) (get_local $end))) (i32.store8 (get_local $ptr) (i32.load8_u (get_local $content))) (set_local $ptr (i32.add (get_local $ptr) (i32.const 1))) (br $cont)))
  )
  (data 0 (i32.const 24494) "\1a\00\00\00E\00n\00u\00m\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 24525) "\22\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 24564) "\1e\00\00\00S\00t\00r\00u\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 24599) "\0c\00\00\00C\00a\00s\00e\00I\00s\00\00")
  (data 0 (i32.const 24616) "\12\00\00\00U\00n\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 24639) "\1a\00\00\00T\00y\00p\00e\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 24670) "\22\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 24709) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 24732) "\0a\00\00\00Q\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 24747) "\22\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 24786) "\12\00\00\00U\00n\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 24809) "\1a\00\00\00T\00y\00p\00e\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 24840) "\12\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00\00")
  (data 0 (i32.const 24863) "\12\00\00\00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 24886) "\0e\00\00\00(\00$\00r\00e\00f\00,\00 \00\00")
  (data 0 (i32.const 24905) "\02\00\00\00)\00\00")
  (data 0 (i32.const 24912) "\04\00\00\00,\00 \00\00")
  (data 0 (i32.const 24921) "\04\00\00\00:\00 \00\00")
  (data 0 (i32.const 24930) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 24953) "\16\00\00\00 \00 \00#\00[\00g\00e\00t\00t\00e\00r\00]\00\00")
  (data 0 (i32.const 24980) "\0c\00\00\00 \00 \00f\00u\00n\00 \00\00")
  (data 0 (i32.const 24997) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 25016) "\06\00\00\00)\00:\00 \00\00")
  (data 0 (i32.const 25027) "\04\00\00\00 \00=\00\00")
  (data 0 (i32.const 25036) "\1a\00\00\00 \00 \00 \00 \00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 25067) "\0c\00\00\00(\00s\00e\00l\00f\00)\00\00")
  (data 0 (i32.const 25084) "\16\00\00\00 \00 \00#\00[\00s\00e\00t\00t\00e\00r\00]\00\00")
  (data 0 (i32.const 25111) "\0c\00\00\00 \00 \00f\00u\00n\00 \00\00")
  (data 0 (i32.const 25128) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 25147) "\12\00\00\00,\00 \00v\00a\00l\00u\00e\00:\00 \00\00")
  (data 0 (i32.const 25170) "\12\00\00\00)\00:\00 \00v\00o\00i\00d\00 \00=\00\00")
  (data 0 (i32.const 25193) "\1a\00\00\00 \00 \00 \00 \00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 25224) "\1a\00\00\00(\00s\00e\00l\00f\00,\00 \00v\00a\00l\00u\00e\00)\00\00")
  (data 0 (i32.const 25255) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 25282) ".\00\00\00 \00 \00p\00r\00i\00v\00a\00t\00e\00 \00f\00u\00n\00 \00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 25333) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 25352) "\06\00\00\00)\00:\00 \00\00")
  (data 0 (i32.const 25363) "\04\00\00\00 \00=\00\00")
  (data 0 (i32.const 25372) "6\00\00\00 \00 \00 \00 \00l\00o\00a\00d\00P\00r\00o\00p\00e\00r\00t\00y\00W\00i\00t\00h\00O\00f\00f\00s\00e\00t\00$\00\00")
  (data 0 (i32.const 25431) "\02\00\00\00(\00\00")
  (data 0 (i32.const 25438) "\16\00\00\00 \00 \00 \00 \00 \00 \00s\00e\00l\00f\00,\00\00")
  (data 0 (i32.const 25465) "\0c\00\00\00 \00 \00 \00 \00 \00 \00\00")
  (data 0 (i32.const 25482) "\16\00\00\00.\00^\00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 25509) "\0e\00\00\00_\00o\00f\00f\00s\00e\00t\00\00")
  (data 0 (i32.const 25528) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 25543) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 25570) ".\00\00\00 \00 \00p\00r\00i\00v\00a\00t\00e\00 \00f\00u\00n\00 \00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 25621) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 25640) "\12\00\00\00,\00 \00v\00a\00l\00u\00e\00:\00 \00\00")
  (data 0 (i32.const 25663) "\12\00\00\00)\00:\00 \00v\00o\00i\00d\00 \00=\00\00")
  (data 0 (i32.const 25686) "8\00\00\00 \00 \00 \00 \00s\00t\00o\00r\00e\00P\00r\00o\00p\00e\00r\00t\00y\00W\00i\00t\00h\00O\00f\00f\00s\00e\00t\00$\00\00")
  (data 0 (i32.const 25747) "\02\00\00\00(\00\00")
  (data 0 (i32.const 25754) "\16\00\00\00 \00 \00 \00 \00 \00 \00s\00e\00l\00f\00,\00\00")
  (data 0 (i32.const 25781) "\18\00\00\00 \00 \00 \00 \00 \00 \00v\00a\00l\00u\00e\00,\00\00")
  (data 0 (i32.const 25810) "\0c\00\00\00 \00 \00 \00 \00 \00 \00\00")
  (data 0 (i32.const 25827) "\16\00\00\00.\00^\00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 25854) "\0e\00\00\00_\00o\00f\00f\00s\00e\00t\00\00")
  (data 0 (i32.const 25873) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 25888) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 25915) "J\00\00\00 \00 \00p\00r\00i\00v\00a\00t\00e\00 \00f\00u\00n\00 \00l\00o\00a\00d\00P\00r\00o\00p\00e\00r\00t\00y\00W\00i\00t\00h\00O\00f\00f\00s\00e\00t\00$\00\00")
  (data 0 (i32.const 25994) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 26013) " \00\00\00,\00 \00o\00f\00f\00s\00e\00t\00:\00 \00u\003\002\00)\00:\00 \00\00")
  (data 0 (i32.const 26050) "\14\00\00\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 26075) "\1a\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00l\00o\00a\00d\00\00")
  (data 0 (i32.const 26106) "\1c\00\00\00 \00 \00 \00 \00 \00 \00(\00i\003\002\00.\00a\00d\00d\00\00")
  (data 0 (i32.const 26139) "6\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00o\00f\00f\00s\00e\00t\00)\00\00")
  (data 0 (i32.const 26198) "`\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00c\00a\00l\00l\00 \00$\00a\00d\00d\00r\00e\00s\00s\00F\00r\00o\00m\00R\00e\00f\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00s\00e\00l\00f\00)\00)\00\00")
  (data 0 (i32.const 26299) "\0e\00\00\00 \00 \00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 26318) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 26333) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 26344) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 26371) "L\00\00\00 \00 \00p\00r\00i\00v\00a\00t\00e\00 \00f\00u\00n\00 \00s\00t\00o\00r\00e\00P\00r\00o\00p\00e\00r\00t\00y\00W\00i\00t\00h\00O\00f\00f\00s\00e\00t\00$\00\00")
  (data 0 (i32.const 26452) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 26471) "\12\00\00\00,\00 \00v\00a\00l\00u\00e\00:\00 \00\00")
  (data 0 (i32.const 26494) "<\00\00\00,\00 \00o\00f\00f\00s\00e\00t\00:\00 \00u\003\002\00)\00:\00 \00v\00o\00i\00d\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 26559) "\1c\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00s\00t\00o\00r\00e\00\00")
  (data 0 (i32.const 26592) "\1c\00\00\00 \00 \00 \00 \00 \00 \00(\00i\003\002\00.\00a\00d\00d\00\00")
  (data 0 (i32.const 26625) "6\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00o\00f\00f\00s\00e\00t\00)\00\00")
  (data 0 (i32.const 26684) "`\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00c\00a\00l\00l\00 \00$\00a\00d\00d\00r\00e\00s\00s\00F\00r\00o\00m\00R\00e\00f\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00s\00e\00l\00f\00)\00)\00\00")
  (data 0 (i32.const 26785) "\0e\00\00\00 \00 \00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 26804) "0\00\00\00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00v\00a\00l\00u\00e\00)\00\00")
  (data 0 (i32.const 26857) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 26872) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 26883) "\12\00\00\00#\00[\00g\00e\00t\00t\00e\00r\00]\00\00")
  (data 0 (i32.const 26906) "\08\00\00\00f\00u\00n\00 \00\00")
  (data 0 (i32.const 26919) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 26938) "\06\00\00\00)\00:\00 \00\00")
  (data 0 (i32.const 26949) "\04\00\00\00 \00=\00\00")
  (data 0 (i32.const 26958) "\16\00\00\00 \00 \00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 26985) "\0c\00\00\00(\00s\00e\00l\00f\00)\00\00")
  (data 0 (i32.const 27002) "\12\00\00\00#\00[\00s\00e\00t\00t\00e\00r\00]\00\00")
  (data 0 (i32.const 27025) "\08\00\00\00f\00u\00n\00 \00\00")
  (data 0 (i32.const 27038) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 27057) "\12\00\00\00,\00 \00v\00a\00l\00u\00e\00:\00 \00\00")
  (data 0 (i32.const 27080) "\12\00\00\00)\00:\00 \00v\00o\00i\00d\00 \00=\00\00")
  (data 0 (i32.const 27103) "\16\00\00\00 \00 \00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 27130) "\1a\00\00\00(\00s\00e\00l\00f\00,\00 \00v\00a\00l\00u\00e\00)\00\00")
  (data 0 (i32.const 27161) "\12\00\00\00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 27184) "*\00\00\00p\00r\00i\00v\00a\00t\00e\00 \00f\00u\00n\00 \00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 27231) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 27250) "\06\00\00\00)\00:\00 \00\00")
  (data 0 (i32.const 27261) "\04\00\00\00 \00=\00\00")
  (data 0 (i32.const 27270) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 27279) "\18\00\00\00.\00l\00o\00a\00d\00(\00s\00e\00l\00f\00,\00 \00\00")
  (data 0 (i32.const 27308) "\16\00\00\00.\00^\00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 27335) "\10\00\00\00_\00o\00f\00f\00s\00e\00t\00)\00\00")
  (data 0 (i32.const 27356) "\12\00\00\00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 27379) "*\00\00\00p\00r\00i\00v\00a\00t\00e\00 \00f\00u\00n\00 \00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 27426) "\0e\00\00\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 27445) "\12\00\00\00,\00 \00v\00a\00l\00u\00e\00:\00 \00\00")
  (data 0 (i32.const 27468) "\12\00\00\00)\00:\00 \00v\00o\00i\00d\00 \00=\00\00")
  (data 0 (i32.const 27491) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 27500) "(\00\00\00.\00s\00t\00o\00r\00e\00(\00s\00e\00l\00f\00,\00 \00v\00a\00l\00u\00e\00,\00 \00\00")
  (data 0 (i32.const 27545) "\16\00\00\00.\00^\00p\00r\00o\00p\00e\00r\00t\00y\00$\00\00")
  (data 0 (i32.const 27572) "\10\00\00\00_\00o\00f\00f\00s\00e\00t\00)\00\00")
  (data 0 (i32.const 27593) "\0c\00\00\00(\00L\00i\00s\00t\00)\00\00")
  (data 0 (i32.const 27610) "\1a\00\00\00S\00t\00r\00u\00c\00t\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 27641) "\1a\00\00\00T\00y\00p\00e\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 27672) "\14\00\00\00N\00o\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 27697) "&\00\00\00i\00m\00p\00l\00 \00R\00e\00f\00e\00r\00e\00n\00c\00e\00 \00f\00o\00r\00 \00\00")
  (data 0 (i32.const 27740) "\04\00\00\00 \00{\00\00")
  (data 0 (i32.const 27749) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 27776) "H\00\00\00 \00 \00f\00u\00n\00 \00i\00s\00(\00a\00:\00 \00S\00e\00l\00f\00 \00|\00 \00r\00e\00f\00)\00:\00 \00b\00o\00o\00l\00e\00a\00n\00 \00=\00 \00{\00\00")
  (data 0 (i32.const 27853) "\5c\00\00\00 \00 \00 \00 \00v\00a\00l\00 \00d\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00:\00 \00u\003\002\00 \00=\00 \00S\00e\00l\00f\00.\00^\00d\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00\00")
  (data 0 (i32.const 27950) "T\00\00\00 \00 \00 \00 \00r\00e\00f\00.\00g\00e\00t\00D\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00(\00a\00)\00 \00=\00=\00 \00d\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00\00")
  (data 0 (i32.const 28039) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 28050) "\1a\00\00\00 \00 \00#\00[\00e\00x\00p\00l\00i\00c\00i\00t\00]\00\00")
  (data 0 (i32.const 28081) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 28108) "l\00\00\00 \00 \00f\00u\00n\00 \00a\00s\00(\00l\00h\00s\00:\00 \00S\00e\00l\00f\00)\00:\00 \00r\00e\00f\00 \00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00l\00h\00s\00)\00 \00}\00\00")
  (data 0 (i32.const 28221) "\02\00\00\00}\00\00")
  (data 0 (i32.const 28228) "\0a\00\00\00i\00m\00p\00l\00 \00\00")
  (data 0 (i32.const 28243) "\04\00\00\00 \00{\00\00")
  (data 0 (i32.const 28252) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 28279) "\1c\00\00\00 \00 \00p\00r\00i\00v\00a\00t\00e\00 \00f\00u\00n\00 \00\00")
  (data 0 (i32.const 28312) "0\00\00\00$\00d\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00(\00)\00:\00 \00u\006\004\00 \00=\00 \00{\00\00")
  (data 0 (i32.const 28365) "8\00\00\00 \00 \00 \00 \00v\00a\00l\00 \00d\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00:\00 \00u\003\002\00 \00=\00 \00\00")
  (data 0 (i32.const 28426) "\1c\00\00\00.\00^\00d\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00\00")
  (data 0 (i32.const 28459) ":\00\00\00 \00 \00 \00 \00d\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00 \00a\00s\00 \00u\006\004\00 \00<\00<\00 \003\002\00\00")
  (data 0 (i32.const 28522) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 28533) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 28560) "\18\00\00\00 \00 \00f\00u\00n\00 \00a\00p\00p\00l\00y\00(\00\00")
  (data 0 (i32.const 28589) "\06\00\00\00)\00:\00 \00\00")
  (data 0 (i32.const 28600) "\08\00\00\00 \00=\00 \00{\00\00")
  (data 0 (i32.const 28613) "6\00\00\00 \00 \00 \00 \00v\00a\00r\00 \00$\00r\00e\00f\00 \00=\00 \00f\00r\00o\00m\00P\00o\00i\00n\00t\00e\00r\00(\00\00")
  (data 0 (i32.const 28672) "Z\00\00\00 \00 \00 \00 \00 \00 \00s\00y\00s\00t\00e\00m\00:\00:\00c\00o\00r\00e\00:\00:\00m\00e\00m\00o\00r\00y\00:\00:\00c\00a\00l\00l\00o\00c\00(\001\00 \00a\00s\00 \00u\003\002\00,\00 \00\00")
  (data 0 (i32.const 28767) "\22\00\00\00.\00^\00a\00l\00l\00o\00c\00a\00t\00i\00o\00n\00S\00i\00z\00e\00)\00\00")
  (data 0 (i32.const 28806) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 28821) "\10\00\00\00 \00 \00 \00 \00$\00r\00e\00f\00\00")
  (data 0 (i32.const 28842) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 28853) "\0a\00\00\00 \00 \00/\00*\00*\00\00")
  (data 0 (i32.const 28868) "@\00\00\00 \00 \00 \00*\00 \00C\00P\00o\00i\00n\00t\00e\00r\00 \00i\00m\00p\00l\00i\00c\00i\00t\00 \00c\00o\00e\00r\00c\00i\00o\00n\00.\00\00")
  (data 0 (i32.const 28937) "\0a\00\00\00 \00 \00 \00*\00/\00\00")
  (data 0 (i32.const 28952) "\1e\00\00\00 \00 \00f\00u\00n\00 \00a\00s\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 28987) "6\00\00\00)\00:\00 \00U\00n\00s\00a\00f\00e\00C\00P\00o\00i\00n\00t\00e\00r\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 29046) "X\00\00\00 \00 \00 \00 \00(\00c\00a\00l\00l\00 \00$\00a\00d\00d\00r\00e\00s\00s\00F\00r\00o\00m\00R\00e\00f\00 \00(\00g\00e\00t\00_\00l\00o\00c\00a\00l\00 \00$\00s\00e\00l\00f\00)\00)\00\00")
  (data 0 (i32.const 29139) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 29150) "J\00\00\00 \00 \00p\00r\00i\00v\00a\00t\00e\00 \00f\00u\00n\00 \00f\00r\00o\00m\00P\00o\00i\00n\00t\00e\00r\00(\00p\00t\00r\00:\00 \00u\003\002\00)\00:\00 \00\00")
  (data 0 (i32.const 29229) "\14\00\00\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 29254) "\16\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00o\00r\00\00")
  (data 0 (i32.const 29281) "\1a\00\00\00 \00 \00 \00 \00 \00 \00(\00c\00a\00l\00l\00 \00$\00\00")
  (data 0 (i32.const 29312) "\1c\00\00\00$\00d\00i\00s\00c\00r\00i\00m\00i\00n\00a\00n\00t\00)\00\00")
  (data 0 (i32.const 29345) "R\00\00\00 \00 \00 \00 \00 \00 \00(\00i\006\004\00.\00e\00x\00t\00e\00n\00d\00_\00u\00/\00i\003\002\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00p\00t\00r\00)\00)\00\00")
  (data 0 (i32.const 29432) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 29447) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 29458) "\18\00\00\00 \00 \00f\00u\00n\00 \00=\00=\00(\00a\00:\00 \00\00")
  (data 0 (i32.const 29487) "\0a\00\00\00,\00 \00b\00:\00 \00\00")
  (data 0 (i32.const 29502) "(\00\00\00)\00:\00 \00b\00o\00o\00l\00e\00a\00n\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 29547) "\16\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00e\00q\00\00")
  (data 0 (i32.const 29574) "(\00\00\00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00a\00)\00\00")
  (data 0 (i32.const 29619) "(\00\00\00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00b\00)\00\00")
  (data 0 (i32.const 29664) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 29679) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 29690) "\18\00\00\00 \00 \00f\00u\00n\00 \00!\00=\00(\00a\00:\00 \00\00")
  (data 0 (i32.const 29719) "\0a\00\00\00,\00 \00b\00:\00 \00\00")
  (data 0 (i32.const 29734) "(\00\00\00)\00:\00 \00b\00o\00o\00l\00e\00a\00n\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 29779) "\16\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00n\00e\00\00")
  (data 0 (i32.const 29806) "(\00\00\00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00a\00)\00\00")
  (data 0 (i32.const 29851) "(\00\00\00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00b\00)\00\00")
  (data 0 (i32.const 29896) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 29911) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 29922) "6\00\00\00 \00 \00f\00u\00n\00 \00s\00t\00o\00r\00e\00(\00l\00h\00s\00:\00 \00r\00e\00f\00,\00 \00r\00h\00s\00:\00 \00\00")
  (data 0 (i32.const 29981) "<\00\00\00,\00 \00o\00f\00f\00s\00e\00t\00:\00 \00u\003\002\00)\00:\00 \00v\00o\00i\00d\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 30046) "\1c\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00s\00t\00o\00r\00e\00\00")
  (data 0 (i32.const 30079) "\1c\00\00\00 \00 \00 \00 \00 \00 \00(\00i\003\002\00.\00a\00d\00d\00\00")
  (data 0 (i32.const 30112) "6\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00o\00f\00f\00s\00e\00t\00)\00\00")
  (data 0 (i32.const 30171) "^\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00c\00a\00l\00l\00 \00$\00a\00d\00d\00r\00e\00s\00s\00F\00r\00o\00m\00R\00e\00f\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00l\00h\00s\00)\00)\00\00")
  (data 0 (i32.const 30270) "\0e\00\00\00 \00 \00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 30289) ",\00\00\00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00r\00h\00s\00)\00\00")
  (data 0 (i32.const 30338) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 30353) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 30364) "F\00\00\00 \00 \00f\00u\00n\00 \00l\00o\00a\00d\00(\00l\00h\00s\00:\00 \00r\00e\00f\00,\00 \00o\00f\00f\00s\00e\00t\00:\00 \00u\003\002\00)\00:\00 \00\00")
  (data 0 (i32.const 30439) "\14\00\00\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 30464) "\1a\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00l\00o\00a\00d\00\00")
  (data 0 (i32.const 30495) "\1c\00\00\00 \00 \00 \00 \00 \00 \00(\00i\003\002\00.\00a\00d\00d\00\00")
  (data 0 (i32.const 30528) "6\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00o\00f\00f\00s\00e\00t\00)\00\00")
  (data 0 (i32.const 30587) "^\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00c\00a\00l\00l\00 \00$\00a\00d\00d\00r\00e\00s\00s\00F\00r\00o\00m\00R\00e\00f\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00l\00h\00s\00)\00)\00\00")
  (data 0 (i32.const 30686) "\0e\00\00\00 \00 \00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 30705) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 30720) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 30731) "\02\00\00\00}\00\00")
  (data 0 (i32.const 30738) "\02\00\00\00#\00\00")
  (data 0 (i32.const 30745) "\02\00\00\00#\00\00")
  (data 0 (i32.const 30752) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 30775) "\08\00\00\00 \00|\00|\00 \00\00")
  (data 0 (i32.const 30788) "\12\00\00\00 \00s\00e\00l\00f\00 \00i\00s\00 \00\00")
  (data 0 (i32.const 30811) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 30834) "\0a\00\00\00i\00m\00p\00l\00 \00\00")
  (data 0 (i32.const 30849) "\02\00\00\00{\00\00")
  (data 0 (i32.const 30856) "\1e\00\00\00 \00 \00f\00u\00n\00 \00a\00s\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 30891) "\06\00\00\00)\00:\00 \00\00")
  (data 0 (i32.const 30902) "<\00\00\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00s\00e\00l\00f\00)\00 \00}\00\00")
  (data 0 (i32.const 30967) "\02\00\00\00}\00\00")
  (data 0 (i32.const 30974) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 31007) "\02\00\00\00_\00\00")
  (data 0 (i32.const 31014) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 31037) "\0a\00\00\00Q\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 31052) "\1c\00\00\00V\00a\00l\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 31085) " \00\00\00A\00t\00o\00m\00i\00c\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 31122) " \00\00\00M\00e\00m\00b\00e\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 31159) "\10\00\00\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 31180) "\02\00\00\00.\00\00")
  (data 0 (i32.const 31187) "\12\00\00\00C\00o\00d\00e\00B\00l\00o\00c\00k\00\00")
  (data 0 (i32.const 31210) "\12\00\00\00C\00o\00d\00e\00B\00l\00o\00c\00k\00\00")
  (data 0 (i32.const 31233) "\12\00\00\00C\00o\00d\00e\00B\00l\00o\00c\00k\00\00")
  (data 0 (i32.const 31256) "\12\00\00\00C\00o\00d\00e\00B\00l\00o\00c\00k\00\00")
  (data 0 (i32.const 31279) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 31312) "\02\00\00\00$\00\00")
  (data 0 (i32.const 31319) "\18\00\00\00D\00e\00c\00l\00a\00r\00e\00d\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 31348) "&\00\00\00i\00m\00p\00l\00 \00R\00e\00f\00e\00r\00e\00n\00c\00e\00 \00f\00o\00r\00 \00\00")
  (data 0 (i32.const 31391) "\04\00\00\00 \00{\00\00")
  (data 0 (i32.const 31400) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 31427) "\1e\00\00\00 \00 \00f\00u\00n\00 \00i\00s\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 31462) "(\00\00\00 \00|\00 \00r\00e\00f\00)\00:\00 \00b\00o\00o\00l\00e\00a\00n\00 \00=\00 \00{\00\00")
  (data 0 (i32.const 31507) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 31518) "\1a\00\00\00 \00 \00#\00[\00e\00x\00p\00l\00i\00c\00i\00t\00]\00\00")
  (data 0 (i32.const 31549) "\16\00\00\00 \00 \00#\00[\00i\00n\00l\00i\00n\00e\00]\00\00")
  (data 0 (i32.const 31576) "\1e\00\00\00 \00 \00f\00u\00n\00 \00a\00s\00(\00s\00e\00l\00f\00:\00 \00\00")
  (data 0 (i32.const 31611) "J\00\00\00)\00:\00 \00r\00e\00f\00 \00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00s\00e\00l\00f\00)\00 \00}\00\00")
  (data 0 (i32.const 31690) "\02\00\00\00}\00\00")
  (data 0 (i32.const 31697) "\0a\00\00\00i\00m\00p\00l\00 \00\00")
  (data 0 (i32.const 31712) "\04\00\00\00 \00{\00\00")
  (data 0 (i32.const 31721) "d\00\00\00 \00 \00f\00u\00n\00 \00=\00=\00(\00l\00h\00s\00:\00 \00r\00e\00f\00,\00 \00r\00h\00s\00:\00 \00r\00e\00f\00)\00:\00 \00b\00o\00o\00l\00e\00a\00n\00 \00=\00 \00l\00h\00s\00 \00=\00=\00 \00r\00h\00s\00\00")
  (data 0 (i32.const 31826) "d\00\00\00 \00 \00f\00u\00n\00 \00!\00=\00(\00l\00h\00s\00:\00 \00r\00e\00f\00,\00 \00r\00h\00s\00:\00 \00r\00e\00f\00)\00:\00 \00b\00o\00o\00l\00e\00a\00n\00 \00=\00 \00l\00h\00s\00 \00!\00=\00 \00r\00h\00s\00\00")
  (data 0 (i32.const 31931) "6\00\00\00 \00 \00f\00u\00n\00 \00s\00t\00o\00r\00e\00(\00l\00h\00s\00:\00 \00r\00e\00f\00,\00 \00r\00h\00s\00:\00 \00\00")
  (data 0 (i32.const 31990) "<\00\00\00,\00 \00o\00f\00f\00s\00e\00t\00:\00 \00u\003\002\00)\00:\00 \00v\00o\00i\00d\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 32055) "\1c\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00s\00t\00o\00r\00e\00\00")
  (data 0 (i32.const 32088) "\1c\00\00\00 \00 \00 \00 \00 \00 \00(\00i\003\002\00.\00a\00d\00d\00\00")
  (data 0 (i32.const 32121) "6\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00o\00f\00f\00s\00e\00t\00)\00\00")
  (data 0 (i32.const 32180) "^\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00c\00a\00l\00l\00 \00$\00a\00d\00d\00r\00e\00s\00s\00F\00r\00o\00m\00R\00e\00f\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00l\00h\00s\00)\00)\00\00")
  (data 0 (i32.const 32279) "\0e\00\00\00 \00 \00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 32298) ",\00\00\00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00r\00h\00s\00)\00\00")
  (data 0 (i32.const 32347) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 32362) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 32373) "F\00\00\00 \00 \00f\00u\00n\00 \00l\00o\00a\00d\00(\00l\00h\00s\00:\00 \00r\00e\00f\00,\00 \00o\00f\00f\00s\00e\00t\00:\00 \00u\003\002\00)\00:\00 \00\00")
  (data 0 (i32.const 32448) "\14\00\00\00 \00=\00 \00%\00w\00a\00s\00m\00 \00{\00\00")
  (data 0 (i32.const 32473) "\1a\00\00\00 \00 \00 \00 \00(\00i\006\004\00.\00l\00o\00a\00d\00\00")
  (data 0 (i32.const 32504) "\1c\00\00\00 \00 \00 \00 \00 \00 \00(\00i\003\002\00.\00a\00d\00d\00\00")
  (data 0 (i32.const 32537) "6\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00o\00f\00f\00s\00e\00t\00)\00\00")
  (data 0 (i32.const 32596) "^\00\00\00 \00 \00 \00 \00 \00 \00 \00 \00(\00c\00a\00l\00l\00 \00$\00a\00d\00d\00r\00e\00s\00s\00F\00r\00o\00m\00R\00e\00f\00 \00(\00l\00o\00c\00a\00l\00.\00g\00e\00t\00 \00$\00l\00h\00s\00)\00)\00\00")
  (data 0 (i32.const 32695) "\0e\00\00\00 \00 \00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 32714) "\0a\00\00\00 \00 \00 \00 \00)\00\00")
  (data 0 (i32.const 32729) "\06\00\00\00 \00 \00}\00\00")
  (data 0 (i32.const 32740) "\02\00\00\00}\00\00")
  (data 0 (i32.const 32747) "\02\00\00\00#\00\00")
  (data 0 (i32.const 32754) "\02\00\00\00#\00\00")
  (func $src::compiler::phases::transformation::runPhase_1 (param $currentPath i64) (param $currentModule i64) (param $astNode i64) (param $ctx i64) (result i64)
    (block $B1 (result i64)
      (call $src::compiler::phases::transformation::desugar_1 (local.get $currentPath) (local.get $currentModule) (local.get $astNode) (local.get $ctx))
    )
  )
  (func $src::compiler::phases::transformation::desugar_1 (param $currentPath i64) (param $currentModule i64) (param $astNode i64) (param $ctx i64) (result i64)
    (local $src::compiler::phases::transformation::token i64)
    (local $src::compiler::phases::transformation::value i64)
    (local $src::compiler::phases::transformation::head i64)
    (local $src::compiler::phases::transformation::tail i64)
    (local $src::compiler::phases::transformation::nhead i64)
    (local $src::compiler::phases::transformation::ntail i64)
    (local $src::compiler::phases::transformation::name i64)
    (local $src::compiler::phases::transformation::child i64)
    (local $src::compiler::phases::transformation::start i32)
    (local $src::compiler::phases::transformation::end i32)
    (local $src::compiler::phases::transformation::newNode i64)
    (local $src::compiler::phases::transformation::newNode_1 i64)
    (local $src::compiler::phases::transformation::newChild i64)
    (local $src::compiler::phases::transformation::modifier i64)
    (local $src::compiler::phases::transformation::resto i64)
    (local $src::compiler::phases::transformation::nameNode i64)
    (local $src::compiler::phases::transformation::typeValue i64)
    (local $src::compiler::phases::transformation::name_1 i64)
    (local $src::compiler::phases::transformation::child_1 i64)
    (local $src::compiler::phases::transformation::newChild_1 i64)
    (local $var$24 i64)
    (local $var$25 i64)
    (local $var$26 i64)
    (block $B18 (result i64)
      (local.set $var$24 (local.get $astNode))
      (block $B18_0
          (block $B18_1
              (block $B18_2
                  (block $B18_3
                      (block $B18_4
                          (block $B18_5
                              (br_if $B18_0 (call $src::parser::parser::Rule0.is_1 (local.get $var$24)))
                              (br_if $B18_1 (call $src::parser::parser::UnexpectedToken.is_1 (local.get $var$24)))
                              (br_if $B18_2 (call $src::parser::parser::SyntaxError.is_1 (local.get $var$24)))
                              (br_if $B18_3 (call $src::parser::parser::Leaf.is_1 (local.get $var$24)))
                              (br_if $B18_4 (call $src::parser::parser::AstCons.is_1 (local.get $var$24)))
                              (br_if $B18_5 (call $src::parser::parser::Node.is_1 (local.get $var$24)))
                            )
                          (block $B4 (result i64)
                              (local.set $src::compiler::phases::transformation::name (call $src::parser::parser::Node.name_1 (local.get $var$24)))
                              (local.set $src::compiler::phases::transformation::child (call $src::parser::parser::Node.child_1 (local.get $var$24)))
                              (local.set $src::compiler::phases::transformation::start (call $src::parser::parser::Node.start_1 (local.get $var$24)))
                              (local.set $src::compiler::phases::transformation::end (call $src::parser::parser::Node.end_1 (local.get $var$24)))
                              (block $B17 (result i64)
                                  (local.set $var$25 (local.get $src::compiler::phases::transformation::name))
                                  (block $B17_0
                                      (block $B17_1
                                          (block $B17_2
                                              (block $B17_3
                                                  (block $B17_4
                                                      (block $B17_5
                                                          (br_if $B17_0 (call $system::core::string::string.==_1 (local.get $var$25) (i64.const 0x0000000400005fae)))
                                                          (br_if $B17_1 (call $system::core::string::string.==_1 (local.get $var$25) (i64.const 0x0000000400005fcd)))
                                                          (br_if $B17_2 (call $system::core::string::string.==_1 (local.get $var$25) (i64.const 0x0000000400005ff4)))
                                                          (br_if $B17_3 (call $system::core::string::string.==_1 (local.get $var$25) (i64.const 0x0000000400006017)))
                                                          (br_if $B17_4 (call $system::core::string::string.==_1 (local.get $var$25) (i64.const 0x000000040000603f)))
                                                        )
                                                      (block $B15 (result i64)
                                                          (local.set $src::compiler::phases::transformation::newChild_1 (call $src::compiler::phases::transformation::desugar_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::child) (local.get $ctx)))
                                                          (if $IF16 (result i64) (call $src::parser::parser::AstNode.==_1 (local.get $src::compiler::phases::transformation::newChild_1) (local.get $src::compiler::phases::transformation::child))
                                                              (then
                                                                (local.get $var$24)
                                                              )
                                                              (else
                                                                (call $src::parser::parser::Node.apply_1 (local.get $src::compiler::phases::transformation::name) (local.get $src::compiler::phases::transformation::newChild_1) (local.get $src::compiler::phases::transformation::start) (local.get $src::compiler::phases::transformation::end))
                                                              )
                                                            )
                                                        )
                                                      (br $B17)
                                                    )
                                                  (block $B9 (result i64)
                                                      (local.set $src::compiler::phases::transformation::modifier (call $src::parser::parser::first_1 (local.get $src::compiler::phases::transformation::child)))
                                                      (local.set $src::compiler::phases::transformation::resto (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::transformation::child)))
                                                      (local.set $src::compiler::phases::transformation::nameNode (call $src::parser::parser::first_1 (local.get $src::compiler::phases::transformation::resto)))
                                                      (local.set $src::compiler::phases::transformation::typeValue (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::transformation::resto)))
                                                      (block $B14 (result i64)
                                                          (local.set $var$26 (local.get $src::compiler::phases::transformation::typeValue))
                                                          (block $B14_0
                                                              (block $B14_1
                                                                  (br_if $B14_0 (call $src::parser::parser::Node.is_1 (local.get $var$26)))
                                                                )
                                                              (local.get $var$24)
                                                              (br $B14)
                                                            )
                                                          (block $B10 (result i64)
                                                              (local.set $src::compiler::phases::transformation::name_1 (call $src::parser::parser::Node.name_1 (local.get $var$26)))
                                                              (local.set $src::compiler::phases::transformation::child_1 (call $src::parser::parser::Node.child_1 (local.get $var$26)))
                                                              (if $IF11 (result i64) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::transformation::name_1) (i64.const 0x0000000400006028))
                                                                  (then
                                                                    (block $B12 (result i64)
                                                                        (call $src::parser::parser::AstCons.apply_1 (local.get $var$24) (call $src::compiler::phases::transformation::processUnionType_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::nameNode) (local.get $src::compiler::phases::transformation::child_1) (local.get $ctx)))
                                                                      )
                                                                  )
                                                                  (else
                                                                    (block $B13 (result i64)
                                                                        (local.get $var$24)
                                                                      )
                                                                  )
                                                                )
                                                            )
                                                          (br $B14)
                                                        )
                                                    )
                                                  (br $B17)
                                                )
                                              (block $B7 (result i64)
                                                  (local.set $src::compiler::phases::transformation::newChild (call $src::compiler::phases::transformation::desugar_1 (local.get $currentPath) (local.get $currentModule) (call $src::compiler::phases::transformation::processDestructure_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::child) (local.get $ctx)) (local.get $ctx)))
                                                  (if $IF8 (result i64) (call $src::parser::parser::AstNode.==_1 (local.get $src::compiler::phases::transformation::newChild) (local.get $src::compiler::phases::transformation::child))
                                                      (then
                                                        (local.get $var$24)
                                                      )
                                                      (else
                                                        (call $src::parser::parser::Node.apply_1 (local.get $src::compiler::phases::transformation::name) (local.get $src::compiler::phases::transformation::newChild) (local.get $src::compiler::phases::transformation::start) (local.get $src::compiler::phases::transformation::end))
                                                      )
                                                    )
                                                )
                                              (br $B17)
                                            )
                                          (call $src::compiler::phases::transformation::desugar_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::child) (local.get $ctx))
                                          (br $B17)
                                        )
                                      (block $B6 (result i64)
                                          (local.set $src::compiler::phases::transformation::newNode_1 (call $src::compiler::phases::transformation::processStruct_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::child) (local.get $ctx)))
                                          (call $src::compiler::phases::transformation::desugar_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::newNode_1) (local.get $ctx))
                                        )
                                      (br $B17)
                                    )
                                  (block $B5 (result i64)
                                      (local.set $src::compiler::phases::transformation::newNode (call $src::compiler::phases::transformation::processEnum_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::child) (local.get $ctx)))
                                      (call $src::compiler::phases::transformation::desugar_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::newNode) (local.get $ctx))
                                    )
                                  (br $B17)
                                )
                            )
                          (br $B18)
                        )
                      (block $B2 (result i64)
                          (local.set $src::compiler::phases::transformation::head (call $src::parser::parser::AstCons.head_1 (local.get $var$24)))
                          (local.set $src::compiler::phases::transformation::tail (call $src::parser::parser::AstCons.tail_1 (local.get $var$24)))
                          (local.set $src::compiler::phases::transformation::nhead (call $src::compiler::phases::transformation::desugar_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::head) (local.get $ctx)))
                          (local.set $src::compiler::phases::transformation::ntail (call $src::compiler::phases::transformation::desugar_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::tail) (local.get $ctx)))
                          (if $IF3 (result i64) (call $system::core::boolean::boolean.&&_1 (call $src::parser::parser::AstNode.==_1 (local.get $src::compiler::phases::transformation::nhead) (local.get $src::compiler::phases::transformation::head)) (call $src::parser::parser::AstNode.==_1 (local.get $src::compiler::phases::transformation::ntail) (local.get $src::compiler::phases::transformation::tail)))
                              (then
                                (local.get $var$24)
                              )
                              (else
                                (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::nhead) (local.get $src::compiler::phases::transformation::ntail))
                              )
                            )
                        )
                      (br $B18)
                    )
                  (block $B1 (result i64)
                      (local.set $src::compiler::phases::transformation::token (call $src::parser::parser::Leaf.token_1 (local.get $var$24)))
                      (local.set $src::compiler::phases::transformation::value (call $src::parser::parser::Leaf.value_1 (local.get $var$24)))
                      (local.get $var$24)
                    )
                  (br $B18)
                )
              (local.get $var$24)
              (br $B18)
            )
          (local.get $var$24)
          (br $B18)
        )
      (local.get $var$24)
      (br $B18)
    )
  )
  (func $src::compiler::phases::transformation::extractStructNames_1 (param $node i64) (result i64)
    (local $src::compiler::phases::transformation::name_2 i64)
    (local $src::compiler::phases::transformation::child_2 i64)
    (local $src::compiler::phases::transformation::head_1 i64)
    (local $src::compiler::phases::transformation::tail_1 i64)
    (local $var$5 i64)
    (block $B4 (result i64)
      (local.set $var$5 (local.get $node))
      (block $B4_0
          (block $B4_1
              (block $B4_2
                  (br_if $B4_0 (call $src::parser::parser::Node.is_1 (local.get $var$5)))
                  (br_if $B4_1 (call $src::parser::parser::AstCons.is_1 (local.get $var$5)))
                )
              (call $src::parser::parser::Rule0.apply_1)
              (br $B4)
            )
          (block $B3 (result i64)
              (local.set $src::compiler::phases::transformation::head_1 (call $src::parser::parser::AstCons.head_1 (local.get $var$5)))
              (local.set $src::compiler::phases::transformation::tail_1 (call $src::parser::parser::AstCons.tail_1 (local.get $var$5)))
              (call $src::parser::parser::list_1 (call $src::compiler::phases::transformation::extractStructNames_1 (local.get $src::compiler::phases::transformation::head_1)) (call $src::compiler::phases::transformation::extractStructNames_1 (local.get $src::compiler::phases::transformation::tail_1)))
            )
          (br $B4)
        )
      (block $B1 (result i64)
          (local.set $src::compiler::phases::transformation::name_2 (call $src::parser::parser::Node.name_1 (local.get $var$5)))
          (local.set $src::compiler::phases::transformation::child_2 (call $src::parser::parser::Node.child_1 (local.get $var$5)))
          (if $IF2 (result i64) (call $system::core::string::string.==_1 (i64.const 0x000000040000605e) (local.get $src::compiler::phases::transformation::name_2))
              (then
                (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400006085) (call $src::parser::parser::Node.apply_1 (i64.const 0x000000040000609c) (call $src::parser::parser::first_1 (local.get $src::compiler::phases::transformation::child_2)) (i32.const 0x0) (i32.const 0x0)) (i32.const 0x0) (i32.const 0x0))
              )
              (else
                (call $src::parser::parser::Rule0.apply_1)
              )
            )
        )
      (br $B4)
    )
  )
  (func $src::compiler::phases::transformation::extractStructs_1 (param $currentPath i64) (param $currentModule i64) (param $node i64) (param $ctx i64) (result i64)
    (local $src::compiler::phases::transformation::name_3 i64)
    (local $src::compiler::phases::transformation::child_3 i64)
    (local $src::compiler::phases::transformation::head_2 i64)
    (local $src::compiler::phases::transformation::tail_2 i64)
    (local $var$8 i64)
    (block $B4 (result i64)
      (local.set $var$8 (local.get $node))
      (block $B4_0
          (block $B4_1
              (block $B4_2
                  (br_if $B4_0 (call $src::parser::parser::Node.is_1 (local.get $var$8)))
                  (br_if $B4_1 (call $src::parser::parser::AstCons.is_1 (local.get $var$8)))
                )
              (call $src::parser::parser::Rule0.apply_1)
              (br $B4)
            )
          (block $B3 (result i64)
              (local.set $src::compiler::phases::transformation::head_2 (call $src::parser::parser::AstCons.head_1 (local.get $var$8)))
              (local.set $src::compiler::phases::transformation::tail_2 (call $src::parser::parser::AstCons.tail_1 (local.get $var$8)))
              (call $src::parser::parser::list_1 (call $src::compiler::phases::transformation::extractStructs_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::head_2) (local.get $ctx)) (call $src::compiler::phases::transformation::extractStructs_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::tail_2) (local.get $ctx)))
            )
          (br $B4)
        )
      (block $B1 (result i64)
          (local.set $src::compiler::phases::transformation::name_3 (call $src::parser::parser::Node.name_1 (local.get $var$8)))
          (local.set $src::compiler::phases::transformation::child_3 (call $src::parser::parser::Node.child_1 (local.get $var$8)))
          (if $IF2 (result i64) (call $system::core::string::string.==_1 (i64.const 0x00000004000060ab) (local.get $src::compiler::phases::transformation::name_3))
              (then
                (call $src::compiler::phases::transformation::processStruct_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::child_3) (local.get $ctx))
              )
              (else
                (call $src::parser::parser::Rule0.apply_1)
              )
            )
        )
      (br $B4)
    )
  )
  (func $src::compiler::phases::transformation::processEnum_1 (param $currentPath i64) (param $currentModule i64) (param $child i64) (param $ctx i64) (result i64)
    (local $src::compiler::phases::transformation::modifier_1 i64)
    (local $src::compiler::phases::transformation::resto_1 i64)
    (local $src::compiler::phases::transformation::nameNode_1 i64)
    (local $src::compiler::phases::transformation::enumMembers i64)
    (local $src::compiler::phases::transformation::typeName i64)
    (local $src::compiler::phases::transformation::structTypeNode i64)
    (local $src::compiler::phases::transformation::typeDirective i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::transformation::modifier_1 (call $src::parser::parser::first_1 (local.get $child)))
      (local.set $src::compiler::phases::transformation::resto_1 (call $src::parser::parser::rest_1 (local.get $child)))
      (local.set $src::compiler::phases::transformation::nameNode_1 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::transformation::resto_1)))
      (local.set $src::compiler::phases::transformation::enumMembers (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::transformation::resto_1)))
      (local.set $src::compiler::phases::transformation::typeName (call $src::parser::parser::textOf_1 (local.get $src::compiler::phases::transformation::nameNode_1)))
      (local.set $src::compiler::phases::transformation::structTypeNode (call $src::parser::parser::Node.apply_1 (i64.const 0x00000004000060d2) (call $src::compiler::phases::transformation::extractStructNames_1 (local.get $src::compiler::phases::transformation::enumMembers)) (i32.const 0x0) (i32.const 0x0)))
      (local.set $src::compiler::phases::transformation::typeDirective (call $src::parser::parser::Node.apply_1 (i64.const 0x00000004000060e9) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::modifier_1) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::nameNode_1) (local.get $src::compiler::phases::transformation::structTypeNode))) (i32.const 0x0) (i32.const 0x0)))
      (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::typeDirective) (call $src::compiler::phases::transformation::extractStructs_1 (local.get $currentPath) (local.get $currentModule) (local.get $src::compiler::phases::transformation::enumMembers) (local.get $ctx)))
    )
  )
  (func $src::compiler::phases::transformation::processParameters_1 (param $node i64) (param $sb i64) (param $callRefs i64) (param $args i64) (param $typeName i64) (param $index i32) (result i32)
    (local $src::compiler::phases::transformation::name_4 i64)
    (local $src::compiler::phases::transformation::child_5 i64)
    (local $src::compiler::phases::transformation::nameNode_2 i64)
    (local $src::compiler::phases::transformation::parameterName i64)
    (local $src::compiler::phases::transformation::typeNode i64)
    (local $src::compiler::phases::transformation::parameterType i64)
    (local $src::compiler::phases::transformation::indexs i64)
    (local $src::compiler::phases::transformation::head_3 i64)
    (local $src::compiler::phases::transformation::tail_3 i64)
    (local $src::compiler::phases::transformation::newIndex i32)
    (local $var$16 i64)
    (block $B12 (result i32)
      (local.set $var$16 (local.get $node))
      (block $B12_0
          (block $B12_1
              (block $B12_2
                  (br_if $B12_0 (call $src::parser::parser::Node.is_1 (local.get $var$16)))
                  (br_if $B12_1 (call $src::parser::parser::AstCons.is_1 (local.get $var$16)))
                )
              (local.get $index)
              (br $B12)
            )
          (block $B11 (result i32)
              (local.set $src::compiler::phases::transformation::head_3 (call $src::parser::parser::AstCons.head_1 (local.get $var$16)))
              (local.set $src::compiler::phases::transformation::tail_3 (call $src::parser::parser::AstCons.tail_1 (local.get $var$16)))
              (local.set $src::compiler::phases::transformation::newIndex (call $src::compiler::phases::transformation::processParameters_1 (local.get $src::compiler::phases::transformation::head_3) (local.get $sb) (local.get $callRefs) (local.get $args) (local.get $typeName) (local.get $index)))
              (call $src::compiler::phases::transformation::processParameters_1 (local.get $src::compiler::phases::transformation::tail_3) (local.get $sb) (local.get $callRefs) (local.get $args) (local.get $typeName) (local.get $src::compiler::phases::transformation::newIndex))
            )
          (br $B12)
        )
      (block $B1 (result i32)
          (local.set $src::compiler::phases::transformation::name_4 (call $src::parser::parser::Node.name_1 (local.get $var$16)))
          (local.set $src::compiler::phases::transformation::child_5 (call $src::parser::parser::Node.child_1 (local.get $var$16)))
          (if $IF2 (result i32) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::transformation::name_4) (i64.const 0x0000000400006108))
              (then
                (block $B3 (result i32)
                    (local.set $src::compiler::phases::transformation::nameNode_2 (call $src::parser::parser::first_1 (local.get $src::compiler::phases::transformation::child_5)))
                    (local.set $src::compiler::phases::transformation::parameterName (call $src::parser::parser::textOf_1 (local.get $src::compiler::phases::transformation::nameNode_2)))
                    (local.set $src::compiler::phases::transformation::typeNode (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::transformation::child_5)))
                    (local.set $src::compiler::phases::transformation::parameterType (call $src::parser::parser::textOf_1 (local.get $src::compiler::phases::transformation::typeNode)))
                    (local.set $src::compiler::phases::transformation::indexs (call $system::core::string::string.stringify_5 (local.get $index)))
                    (drop (call $src::stringbuilder::StringBuilder.appendln_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $callRefs) (i64.const 0x000000040000611f)) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006136)) (local.get $src::compiler::phases::transformation::parameterName)) (i64.const 0x0000000400006149)))
                    (if $IF4 (call $system::core::i32::i32.!=_1 (local.get $index) (i32.const 0))
                        (then
                          (block $B5
                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $args) (i64.const 0x0000000400006150)))
                            )
                        )
                        (else)
                      )
                    (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $args) (local.get $src::compiler::phases::transformation::parameterName)) (i64.const 0x0000000400006159)) (local.get $src::compiler::phases::transformation::parameterType)))
                    (if $IF6 (call $system::core::string::string.!=_1 (call $src::parser::parser::getAstNodeName_1 (local.get $src::compiler::phases::transformation::typeNode)) (i64.const 0x0000000400006162))
                        (then
                          (block $B7
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x0000000400006179)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006194) (local.get $src::compiler::phases::transformation::parameterName)) (i64.const 0x00000004000061a5)) (local.get $typeName)) (i64.const 0x00000004000061b8)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x00000004000061c3))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000061cc) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x00000004000061eb))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000061fc)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006217) (local.get $src::compiler::phases::transformation::parameterName)) (i64.const 0x0000000400006228)) (local.get $typeName)) (i64.const 0x000000040000623b)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x0000000400006252))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006269) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006288))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000062a7)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000062c2) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x00000004000062f5)) (local.get $typeName)) (i64.const 0x0000000400006308)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x0000000400006313))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000631c) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006357))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x000000040000635e)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006379) (local.get $typeName)) (i64.const 0x000000040000638a)) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x00000004000063a5))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000063b8)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000063c7)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000063e2) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006415)) (local.get $typeName)) (i64.const 0x0000000400006428)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x000000040000643f))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006456) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006493))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x000000040000649a)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000064b5)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000064d2) (local.get $typeName)) (i64.const 0x00000004000064e3)) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x00000004000064fe))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x0000000400006511)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x0000000400006520)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000653b) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x000000040000658a)) (local.get $typeName)) (i64.const 0x000000040000659d)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x00000004000065c2))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000065db)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000065fa)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x000000040000661b)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x0000000400006656)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000066bb)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000066ce)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000066dd)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000066e8)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006703) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006754)) (local.get $typeName)) (i64.const 0x0000000400006767)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x000000040000677e))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000067bf)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000067e0)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x0000000400006801)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x000000040000683c)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000068a1)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000068b4)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000068e9)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x00000004000068f8)))
                            )
                        )
                        (else
                          (block $B8
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x0000000400006903)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000691a) (local.get $src::compiler::phases::transformation::parameterName)) (i64.const 0x0000000400006927)) (local.get $typeName)) (i64.const 0x000000040000693a)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x0000000400006945))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000694e) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006969))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x000000040000697a)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006991) (local.get $src::compiler::phases::transformation::parameterName)) (i64.const 0x000000040000699e)) (local.get $typeName)) (i64.const 0x00000004000069b1)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x00000004000069c8))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000069df) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x00000004000069fa))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x0000000400006a19)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006a30) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006a5f)) (local.get $typeName)) (i64.const 0x0000000400006a72)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x0000000400006a7d))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006a86) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x0000000400006a8f)) (local.get $typeName)) (i64.const 0x0000000400006aac)) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006ac7))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (i64.const 0x0000000400006adc)))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006af3) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006b22)) (local.get $typeName)) (i64.const 0x0000000400006b35)) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x0000000400006b4c))))
                              (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006b63) (local.get $src::compiler::phases::transformation::parameterType)) (i64.const 0x0000000400006b6c)) (local.get $typeName)) (i64.const 0x0000000400006b99)) (local.get $src::compiler::phases::transformation::indexs)) (i64.const 0x0000000400006bb4))))
                            )
                        )
                      )
                    (call $system::core::i32::i32.+_1 (local.get $index) (i32.const 1))
                  )
              )
              (else
                (if $IF9 (result i32) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::transformation::name_4) (i64.const 0x0000000400006bc9))
                    (then
                      (block $B10 (result i32)
                          (call $src::compiler::phases::transformation::processParameters_1 (local.get $src::compiler::phases::transformation::child_5) (local.get $sb) (local.get $callRefs) (local.get $args) (local.get $typeName) (local.get $index))
                        )
                    )
                    (else
                      (local.get $index)
                    )
                  )
              )
            )
        )
      (br $B12)
    )
  )
  (func $src::compiler::phases::transformation::processStruct_1 (param $currentPath i64) (param $currentModule i64) (param $child i64) (param $ctx i64) (result i64)
    (local $src::compiler::phases::transformation::nameNode_3 i64)
    (local $src::compiler::phases::transformation::parameters i64)
    (local $src::compiler::phases::transformation::typeName_2 i64)
    (local $src::compiler::phases::transformation::structTypeNode_1 i64)
    (local $src::compiler::phases::transformation::typeDirective_1 i64)
    (local $src::compiler::phases::transformation::sb_1 i64)
    (local $src::compiler::phases::transformation::callRefs_1 i64)
    (local $src::compiler::phases::transformation::accessors i64)
    (local $src::compiler::phases::transformation::args_1 i64)
    (local $src::compiler::phases::transformation::mod i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::transformation::nameNode_3 (call $src::parser::parser::first_1 (local.get $child)))
      (local.set $src::compiler::phases::transformation::parameters (call $src::parser::parser::getChild_1 (call $src::parser::parser::rest_1 (local.get $child))))
      (local.set $src::compiler::phases::transformation::typeName_2 (call $src::parser::parser::textOf_1 (local.get $src::compiler::phases::transformation::nameNode_3)))
      (local.set $src::compiler::phases::transformation::structTypeNode_1 (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400006bda) (local.get $src::compiler::phases::transformation::parameters) (i32.const 0x0) (i32.const 0x0)))
      (local.set $src::compiler::phases::transformation::typeDirective_1 (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400006bf9) (call $src::parser::parser::AstCons.apply_1 (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400006c18) (call $src::parser::parser::Rule0.apply_1) (i32.const 0x0) (i32.const 0x0)) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::nameNode_3) (local.get $src::compiler::phases::transformation::structTypeNode_1))) (i32.const 0x0) (i32.const 0x0)))
      (local.set $src::compiler::phases::transformation::sb_1 (call $src::stringbuilder::StringBuilder.apply_3))
      (local.set $src::compiler::phases::transformation::callRefs_1 (call $src::stringbuilder::StringBuilder.apply_3))
      (local.set $src::compiler::phases::transformation::accessors (call $src::stringbuilder::StringBuilder.apply_3))
      (local.set $src::compiler::phases::transformation::args_1 (call $src::stringbuilder::StringBuilder.apply_3))
      (drop (call $src::compiler::phases::transformation::processParameters_1 (local.get $src::compiler::phases::transformation::parameters) (local.get $src::compiler::phases::transformation::accessors) (local.get $src::compiler::phases::transformation::callRefs_1) (local.get $src::compiler::phases::transformation::args_1) (local.get $src::compiler::phases::transformation::typeName_2) (i32.const 0)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006c31) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x0000000400006c5c))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006c65)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006c80)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006ccd)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006d2e)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006d87)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006d92)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006db1)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006dcc)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006e3d)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006e44) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x0000000400006e53))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006e5c)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006e77) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x0000000400006e98))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006ecd) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x0000000400006f0a))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006f2b)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006f6a)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006f75)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (call $src::stringbuilder::StringBuilder.append_2 (call $src::stringbuilder::StringBuilder.append_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006f90)) (local.get $src::compiler::phases::transformation::args_1)) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400006fad) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x0000000400006fb8))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400006fc5)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007000) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x000000040000705f))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007086)))
      (drop (call $src::stringbuilder::StringBuilder.append_2 (local.get $src::compiler::phases::transformation::sb_1) (local.get $src::compiler::phases::transformation::callRefs_1)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007095)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000070aa)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000070b5)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000070c4)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007109)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007118) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x000000040000713b))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007176)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000071d3)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000071de) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x000000040000722d))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007246)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007261) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x0000000400007280))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000072a1)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000072f8)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007307)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007312) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x000000040000732f)) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x000000040000733e))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000736b)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007386)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000073b3)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000073e0)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000073ef)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000073fa) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x0000000400007417)) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x0000000400007426))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007453)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000746e)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000749b)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000074c8)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000074d7)))
      (drop (call $src::stringbuilder::StringBuilder.append_2 (local.get $src::compiler::phases::transformation::sb_1) (local.get $src::compiler::phases::transformation::accessors)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x00000004000074e2) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x000000040000751d))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000755e)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000757f)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000075a0)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000075db)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000763e)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007651)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007682)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007691)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x000000040000769c) (local.get $src::compiler::phases::transformation::typeName_2)) (i64.const 0x00000004000076e7))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007700)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000771f)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007740)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000777b)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000077de)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x00000004000077f1)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x0000000400007800)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_1) (i64.const 0x000000040000780b)))
      (local.set $src::compiler::phases::transformation::mod (call $src::compiler::context::CompilerContext.getModuleByContent_1 (local.get $ctx) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (local.get $currentPath) (i64.const 0x0000000400007812)) (local.get $src::compiler::phases::transformation::typeName_2)) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (local.get $currentModule) (i64.const 0x0000000400007819)) (local.get $src::compiler::phases::transformation::typeName_2)) (call $src::stringbuilder::StringBuilder.toString_1 (local.get $src::compiler::phases::transformation::sb_1))))
      (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::typeDirective_1) (call $src::parser::parser::getChild_1 (call $src::compiler::context::Module.ast_1 (local.get $src::compiler::phases::transformation::mod))))
    )
  )
  (func $src::compiler::phases::transformation::appendIs_1 (param $sb i64) (param $node i64) (param $count i32) (result i32)
    (local $src::compiler::phases::transformation::head_4 i64)
    (local $src::compiler::phases::transformation::tail_4 i64)
    (local $src::compiler::phases::transformation::newCount i32)
    (local $src::compiler::phases::transformation::name_5 i64)
    (local $src::compiler::phases::transformation::child_7 i64)
    (local $var$8 i64)
    (block $B8 (result i32)
      (local.set $var$8 (local.get $node))
      (block $B8_0
          (block $B8_1
              (block $B8_2
                  (br_if $B8_0 (call $src::parser::parser::AstCons.is_1 (local.get $var$8)))
                  (br_if $B8_1 (call $src::parser::parser::Node.is_1 (local.get $var$8)))
                )
              (local.get $count)
              (br $B8)
            )
          (block $B2 (result i32)
              (local.set $src::compiler::phases::transformation::name_5 (call $src::parser::parser::Node.name_1 (local.get $var$8)))
              (local.set $src::compiler::phases::transformation::child_7 (call $src::parser::parser::Node.child_1 (local.get $var$8)))
              (if $IF3 (result i32) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::transformation::name_5) (i64.const 0x0000000400007820))
                  (then
                    (block $B4 (result i32)
                        (if $IF5 (call $system::core::i32::i32.>_1 (local.get $count) (i32.const 0))
                            (then
                              (block $B6
                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400007837)))
                                )
                            )
                            (else)
                          )
                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400007844)))
                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::parser::parser::textOf_1 (local.get $src::compiler::phases::transformation::child_7))))
                        (call $system::core::i32::i32.+_1 (local.get $count) (i32.const 1))
                      )
                  )
                  (else
                    (block $B7 (result i32)
                        (local.get $count)
                      )
                  )
                )
            )
          (br $B8)
        )
      (block $B1 (result i32)
          (local.set $src::compiler::phases::transformation::head_4 (call $src::parser::parser::AstCons.head_1 (local.get $var$8)))
          (local.set $src::compiler::phases::transformation::tail_4 (call $src::parser::parser::AstCons.tail_1 (local.get $var$8)))
          (local.set $src::compiler::phases::transformation::newCount (call $src::compiler::phases::transformation::appendIs_1 (local.get $sb) (local.get $src::compiler::phases::transformation::head_4) (local.get $count)))
          (call $src::compiler::phases::transformation::appendIs_1 (local.get $sb) (local.get $src::compiler::phases::transformation::tail_4) (local.get $src::compiler::phases::transformation::newCount))
        )
      (br $B8)
    )
  )
  (func $src::compiler::phases::transformation::appendUnionImpls_1 (param $sb i64) (param $unionName i64) (param $node i64)
    (local $src::compiler::phases::transformation::head_5 i64)
    (local $src::compiler::phases::transformation::tail_5 i64)
    (local $src::compiler::phases::transformation::name_6 i64)
    (local $src::compiler::phases::transformation::child_8 i64)
    (local $src::compiler::phases::transformation::referenceName i64)
    (local $var$8 i64)
    (block $B1
      (block $B7
          (local.set $var$8 (local.get $node))
          (block $B7_0
              (block $B7_1
                  (block $B7_2
                      (br_if $B7_0 (call $src::parser::parser::AstCons.is_1 (local.get $var$8)))
                      (br_if $B7_1 (call $src::parser::parser::Node.is_1 (local.get $var$8)))
                    )
                  (block $B6
                      (nop)
                    )
                  (br $B7)
                )
              (block $B3
                  (local.set $src::compiler::phases::transformation::name_6 (call $src::parser::parser::Node.name_1 (local.get $var$8)))
                  (local.set $src::compiler::phases::transformation::child_8 (call $src::parser::parser::Node.child_1 (local.get $var$8)))
                  (if $IF4 (call $system::core::string::string.==_1 (local.get $src::compiler::phases::transformation::name_6) (i64.const 0x000000040000785b))
                      (then
                        (block $B5
                            (local.set $src::compiler::phases::transformation::referenceName (call $src::parser::parser::textOf_1 (local.get $src::compiler::phases::transformation::child_8)))
                            (drop (call $src::stringbuilder::StringBuilder.appendln_1 (call $src::stringbuilder::StringBuilder.appendln_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.appendln_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400007872)) (local.get $src::compiler::phases::transformation::referenceName)) (i64.const 0x0000000400007881)) (i64.const 0x0000000400007888)) (local.get $src::compiler::phases::transformation::referenceName)) (i64.const 0x00000004000078ab)) (local.get $unionName)) (i64.const 0x00000004000078b6)) (i64.const 0x00000004000078f7)))
                          )
                      )
                      (else)
                    )
                )
              (br $B7)
            )
          (block $B2
              (local.set $src::compiler::phases::transformation::head_5 (call $src::parser::parser::AstCons.head_1 (local.get $var$8)))
              (local.set $src::compiler::phases::transformation::tail_5 (call $src::parser::parser::AstCons.tail_1 (local.get $var$8)))
              (call $src::compiler::phases::transformation::appendUnionImpls_1 (local.get $sb) (local.get $unionName) (local.get $src::compiler::phases::transformation::head_5))
              (call $src::compiler::phases::transformation::appendUnionImpls_1 (local.get $sb) (local.get $unionName) (local.get $src::compiler::phases::transformation::tail_5))
            )
          (br $B7)
        )
    )
  )
  (func $src::compiler::phases::transformation::appendDestructureDeclaration_1 (param $varNameIdentifier i64) (param $headReference i64) (param $wrappedNode i64) (result i64)
    (local $src::compiler::phases::transformation::head_6 i64)
    (local $src::compiler::phases::transformation::tail_6 i64)
    (local $src::compiler::phases::transformation::name_7 i64)
    (local $src::compiler::phases::transformation::child_9 i64)
    (local $src::compiler::phases::transformation::referenceName_1 i64)
    (local $src::compiler::phases::transformation::reference i64)
    (local $src::compiler::phases::transformation::decl i64)
    (local $src::compiler::phases::transformation::name_8 i64)
    (local $src::compiler::phases::transformation::start_1 i32)
    (local $src::compiler::phases::transformation::end_1 i32)
    (local $var$13 i64)
    (local $var$14 i64)
    (block $B1 (result i64)
      (block $B15 (result i64)
          (local.set $var$13 (local.get $headReference))
          (block $B15_0
              (block $B15_1
                  (block $B15_2
                      (br_if $B15_0 (call $src::parser::parser::AstCons.is_1 (local.get $var$13)))
                      (br_if $B15_1 (call $src::parser::parser::Node.is_1 (local.get $var$13)))
                    )
                  (local.get $wrappedNode)
                  (br $B15)
                )
              (block $B3 (result i64)
                  (local.set $src::compiler::phases::transformation::name_7 (call $src::parser::parser::Node.name_1 (local.get $var$13)))
                  (local.set $src::compiler::phases::transformation::child_9 (call $src::parser::parser::Node.child_1 (local.get $var$13)))
                  (if $IF4 (result i64) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::transformation::name_7) (i64.const 0x00000004000078fe))
                      (then
                        (block $B5 (result i64)
                            (local.set $src::compiler::phases::transformation::referenceName_1 (call $src::parser::parser::textOf_1 (local.get $src::compiler::phases::transformation::child_9)))
                            (if $IF6 (result i64) (call $system::core::string::string.!=_1 (local.get $src::compiler::phases::transformation::referenceName_1) (i64.const 0x000000040000791f))
                                (then
                                  (block $B7 (result i64)
                                      (local.set $src::compiler::phases::transformation::reference (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400007926) (call $src::parser::parser::Node.apply_1 (i64.const 0x000000040000793d) (local.get $varNameIdentifier) (i32.const 0x0) (i32.const 0x0)) (i32.const 0x0) (i32.const 0x0)))
                                      (local.set $src::compiler::phases::transformation::decl (call $src::parser::parser::Node.apply_1 (i64.const 0x000000040000794c) (call $src::parser::parser::AstCons.apply_1 (local.get $headReference) (call $src::parser::parser::Node.apply_1 (i64.const 0x000000040000796d) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::reference) (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400007992) (call $src::parser::parser::AstCons.apply_1 (call $src::parser::parser::Node.apply_1 (i64.const 0x00000004000079b7) (call $src::parser::parser::Leaf.apply_1 (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::Operator.apply_1) (i32.const 0x0) (i32.const 0x0)) (i64.const 0x00000004000079cc)) (i32.const 0x0) (i32.const 0x0)) (local.get $headReference)) (i32.const 0x0) (i32.const 0x0))) (i32.const 0x0) (i32.const 0x0))) (i32.const 0x0) (i32.const 0x0)))
                                      (block $B12 (result i64)
                                          (local.set $var$14 (local.get $wrappedNode))
                                          (block $B12_0
                                              (block $B12_1
                                                  (br_if $B12_0 (call $src::parser::parser::Node.is_1 (local.get $var$14)))
                                                )
                                              (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400007a18) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::decl) (local.get $wrappedNode)) (i32.const 0x0) (i32.const 0x0))
                                              (br $B12)
                                            )
                                          (block $B8 (result i64)
                                              (local.set $src::compiler::phases::transformation::name_8 (call $src::parser::parser::Node.name_1 (local.get $var$14)))
                                              (local.set $src::compiler::phases::transformation::start_1 (call $src::parser::parser::Node.start_1 (local.get $var$14)))
                                              (local.set $src::compiler::phases::transformation::end_1 (call $src::parser::parser::Node.end_1 (local.get $var$14)))
                                              (if $IF9 (result i64) (call $system::core::string::string.==_1 (local.get $src::compiler::phases::transformation::name_8) (i64.const 0x00000004000079d3))
                                                  (then
                                                    (block $B10 (result i64)
                                                        (call $src::parser::parser::Node.apply_1 (i64.const 0x00000004000079ea) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::decl) (call $src::parser::parser::getChild_1 (local.get $wrappedNode))) (local.get $src::compiler::phases::transformation::start_1) (local.get $src::compiler::phases::transformation::end_1))
                                                      )
                                                  )
                                                  (else
                                                    (block $B11 (result i64)
                                                        (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400007a01) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::decl) (local.get $wrappedNode)) (i32.const 0x0) (i32.const 0x0))
                                                      )
                                                  )
                                                )
                                            )
                                          (br $B12)
                                        )
                                    )
                                )
                                (else
                                  (block $B13 (result i64)
                                      (local.get $wrappedNode)
                                    )
                                )
                              )
                          )
                      )
                      (else
                        (block $B14 (result i64)
                            (local.get $wrappedNode)
                          )
                      )
                    )
                )
              (br $B15)
            )
          (block $B2 (result i64)
              (local.set $src::compiler::phases::transformation::head_6 (call $src::parser::parser::AstCons.head_1 (local.get $var$13)))
              (local.set $src::compiler::phases::transformation::tail_6 (call $src::parser::parser::AstCons.tail_1 (local.get $var$13)))
              (call $src::compiler::phases::transformation::appendDestructureDeclaration_1 (local.get $varNameIdentifier) (local.get $src::compiler::phases::transformation::head_6) (call $src::compiler::phases::transformation::appendDestructureDeclaration_1 (local.get $varNameIdentifier) (local.get $src::compiler::phases::transformation::tail_6) (local.get $wrappedNode)))
            )
          (br $B15)
        )
    )
  )
  (func $src::compiler::phases::transformation::processDestructure_1 (param $currentPath i64) (param $currentModule i64) (param $patternMatcher i64) (param $ctx i64) (result i64)
    (local $src::compiler::phases::transformation::resto_2 i64)
    (local $src::compiler::phases::transformation::declaredName i64)
    (local $src::compiler::phases::transformation::nameNode_4 i64)
    (local $src::compiler::phases::transformation::typeReferenceNode i64)
    (local $src::compiler::phases::transformation::destructureNode i64)
    (local $src::compiler::phases::transformation::headDestructure i64)
    (local $src::compiler::phases::transformation::bodyNode i64)
    (local $src::compiler::phases::transformation::start_2 i32)
    (local $src::compiler::phases::transformation::start_3 i32)
    (local $src::compiler::phases::transformation::end_2 i32)
    (local $src::compiler::phases::transformation::end_3 i32)
    (local $src::compiler::phases::transformation::newBody i64)
    (local $var$16 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::transformation::resto_2 (local.get $patternMatcher))
      (local.set $src::compiler::phases::transformation::declaredName (call $src::parser::parser::first_1 (local.get $src::compiler::phases::transformation::resto_2)))
      (local.set $src::compiler::phases::transformation::nameNode_4 (call $src::parser::parser::getChild_1 (local.get $src::compiler::phases::transformation::declaredName)))
      (local.set $src::compiler::phases::transformation::resto_2 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::transformation::resto_2)))
      (local.set $src::compiler::phases::transformation::typeReferenceNode (call $src::parser::parser::first_1 (local.get $src::compiler::phases::transformation::resto_2)))
      (local.set $src::compiler::phases::transformation::resto_2 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::transformation::resto_2)))
      (local.set $src::compiler::phases::transformation::destructureNode (call $src::parser::parser::first_1 (local.get $src::compiler::phases::transformation::resto_2)))
      (local.set $src::compiler::phases::transformation::headDestructure (call $src::parser::parser::getChild_1 (local.get $src::compiler::phases::transformation::destructureNode)))
      (local.set $src::compiler::phases::transformation::resto_2 (call $src::parser::parser::rest_1 (local.get $src::compiler::phases::transformation::resto_2)))
      (local.set $src::compiler::phases::transformation::bodyNode (local.get $src::compiler::phases::transformation::resto_2))
      (if $IF2 (result i64) (call $system::core::boolean::boolean.&&_1 (call $src::parser::parser::Rule0.is_1 (local.get $src::compiler::phases::transformation::headDestructure)) (call $system::core::boolean::boolean.!_1 (call $src::parser::parser::Rule0.is_1 (local.get $src::compiler::phases::transformation::nameNode_4))))
          (then
            (block $B3 (result i64)
                (local.get $patternMatcher)
              )
          )
          (else
            (block $B4 (result i64)
                (if $IF5 (call $src::parser::parser::Rule0.is_1 (local.get $src::compiler::phases::transformation::nameNode_4))
                    (then
                      (block $B6
                          (local.set $src::compiler::phases::transformation::start_2 (block $B8 (result i32)
                                    (local.set $var$16 (local.get $src::compiler::phases::transformation::declaredName))
                                    (block $B8_0
                                        (block $B8_1
                                            (br_if $B8_0 (call $src::parser::parser::Node.is_1 (local.get $var$16)))
                                          )
                                        (i32.const 0x0)
                                        (br $B8)
                                      )
                                    (block $B7 (result i32)
                                        (local.set $src::compiler::phases::transformation::start_3 (call $src::parser::parser::Node.start_1 (local.get $var$16)))
                                        (local.get $src::compiler::phases::transformation::start_3)
                                      )
                                    (br $B8)
                                  ))
                          (local.set $src::compiler::phases::transformation::end_2 (block $B10 (result i32)
                                    (local.set $var$16 (local.get $src::compiler::phases::transformation::declaredName))
                                    (block $B10_0
                                        (block $B10_1
                                            (br_if $B10_0 (call $src::parser::parser::Node.is_1 (local.get $var$16)))
                                          )
                                        (i32.const 0x0)
                                        (br $B10)
                                      )
                                    (block $B9 (result i32)
                                        (local.set $src::compiler::phases::transformation::end_3 (call $src::parser::parser::Node.end_1 (local.get $var$16)))
                                        (local.get $src::compiler::phases::transformation::end_3)
                                      )
                                    (br $B10)
                                  ))
                          (local.set $src::compiler::phases::transformation::nameNode_4 (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400007a2f) (call $src::parser::parser::Leaf.apply_1 (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::Identifier.apply_1) (local.get $src::compiler::phases::transformation::start_2) (local.get $src::compiler::phases::transformation::end_2)) (i64.const 0x0000000400007a50)) (local.get $src::compiler::phases::transformation::start_2) (local.get $src::compiler::phases::transformation::end_2)))
                          (local.set $src::compiler::phases::transformation::declaredName (call $src::parser::parser::Node.apply_1 (i64.const 0x0000000400007a57) (local.get $src::compiler::phases::transformation::nameNode_4) (local.get $src::compiler::phases::transformation::start_2) (local.get $src::compiler::phases::transformation::end_2)))
                        )
                    )
                    (else)
                  )
                (local.set $src::compiler::phases::transformation::newBody (call $src::compiler::phases::transformation::appendDestructureDeclaration_1 (local.get $src::compiler::phases::transformation::nameNode_4) (local.get $src::compiler::phases::transformation::headDestructure) (local.get $src::compiler::phases::transformation::bodyNode)))
                (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::declaredName) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::typeReferenceNode) (call $src::parser::parser::AstCons.apply_1 (local.get $src::compiler::phases::transformation::destructureNode) (local.get $src::compiler::phases::transformation::newBody))))
              )
          )
        )
    )
  )
  (func $src::compiler::phases::transformation::processUnionType_1 (param $currentPath i64) (param $currentModule i64) (param $nameNode i64) (param $unionType i64) (param $ctx i64) (result i64)
    (local $src::compiler::phases::transformation::typeName_3 i64)
    (local $src::compiler::phases::transformation::sb_4 i64)
    (local $src::compiler::phases::transformation::mod_1 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::phases::transformation::typeName_3 (call $src::parser::parser::textOf_1 (local.get $nameNode)))
      (local.set $src::compiler::phases::transformation::sb_4 (call $src::stringbuilder::StringBuilder.apply_3))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007a74) (local.get $src::compiler::phases::transformation::typeName_3)) (i64.const 0x0000000400007a9f))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007aa8)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007ac3) (local.get $src::compiler::phases::transformation::typeName_3)) (i64.const 0x0000000400007ae6))))
      (drop (call $src::compiler::phases::transformation::appendIs_1 (local.get $src::compiler::phases::transformation::sb_4) (call $src::parser::parser::getChild_1 (local.get $unionType)) (i32.const 0)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007b13)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007b1e)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007b3d)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007b58) (local.get $src::compiler::phases::transformation::typeName_3)) (i64.const 0x0000000400007b7b))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007bca)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007bd1) (local.get $src::compiler::phases::transformation::typeName_3)) (i64.const 0x0000000400007be0))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007be9)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007c52)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007cbb) (local.get $src::compiler::phases::transformation::typeName_3)) (i64.const 0x0000000400007cf6))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007d37)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007d58)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007d79)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007db4)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007e17)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007e2a)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007e5b)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007e6a)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400007e75) (local.get $src::compiler::phases::transformation::typeName_3)) (i64.const 0x0000000400007ec0))))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007ed9)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007ef8)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007f19)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007f54)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007fb7)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007fca)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007fd9)))
      (drop (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $src::compiler::phases::transformation::sb_4) (i64.const 0x0000000400007fe4)))
      (call $src::compiler::phases::transformation::appendUnionImpls_1 (local.get $src::compiler::phases::transformation::sb_4) (local.get $src::compiler::phases::transformation::typeName_3) (call $src::parser::parser::getChild_1 (local.get $unionType)))
      (local.set $src::compiler::phases::transformation::mod_1 (call $src::compiler::context::CompilerContext.getModuleByContent_1 (local.get $ctx) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (local.get $currentPath) (i64.const 0x0000000400007feb)) (local.get $src::compiler::phases::transformation::typeName_3)) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (local.get $currentModule) (i64.const 0x0000000400007ff2)) (local.get $src::compiler::phases::transformation::typeName_3)) (call $src::stringbuilder::StringBuilder.toString_1 (local.get $src::compiler::phases::transformation::sb_4))))
      (call $src::parser::parser::getChild_1 (call $src::compiler::context::Module.ast_1 (local.get $src::compiler::phases::transformation::mod_1)))
    )
  )
  (data 0 (i32.const 24118) "\02\00\00\00/\00\00")
  (data 0 (i32.const 24125) "\10\00\00\00D\00o\00c\00u\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 24146) "(\00\00\00E\00r\00r\00o\00r\00 \00p\00a\00r\00s\00i\00n\00g\00 \00f\00i\00l\00e\00:\00 \00\00")
  (data 0 (i32.const 24191) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 24200) "\04\00\00\00)\00 \00\00")
  (data 0 (i32.const 24209) "\08\00\00\00 \00a\00t\00 \00\00")
  (data 0 (i32.const 24222) "\02\00\00\00:\00\00")
  (data 0 (i32.const 24229) "\02\00\00\00:\00\00")
  (data 0 (i32.const 24236) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 24243) "\0a\00\00\00\1b\00[\003\006\00m\00\00")
  (data 0 (i32.const 24258) "\0c\00\00\00 \00 \00 \00 \00 \00\02%\00")
  (data 0 (i32.const 24275) "\0a\00\00\00\1b\00[\000\00m\00\0a\00\00")
  (data 0 (i32.const 24290) "\0a\00\00\00\1b\00[\003\006\00m\00\00")
  (data 0 (i32.const 24305) "\02\00\00\00 \00\00")
  (data 0 (i32.const 24312) "\02\00\00\00 \00\00")
  (data 0 (i32.const 24319) "\02\00\00\00 \00\00")
  (data 0 (i32.const 24326) "\02\00\00\00 \00\00")
  (data 0 (i32.const 24333) "\04\00\00\00\02% \00\00")
  (data 0 (i32.const 24342) "\08\00\00\00\1b\00[\000\00m\00\00")
  (data 0 (i32.const 24355) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 24362) "\0a\00\00\00\1b\00[\003\006\00m\00\00")
  (data 0 (i32.const 24377) "\0e\00\00\00 \00 \00 \00 \00 \00\02% \00\00")
  (data 0 (i32.const 24396) "\08\00\00\00\1b\00[\000\00m\00\00")
  (data 0 (i32.const 24409) "\02\00\00\00 \00\00")
  (data 0 (i32.const 24416) "\0a\00\00\00\1b\00[\009\001\00m\00\00")
  (data 0 (i32.const 24431) "\02\00\00\00^\00\00")
  (data 0 (i32.const 24438) "\08\00\00\00\1b\00[\000\00m\00\00")
  (data 0 (i32.const 24451) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 24458) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 24465) "\04\00\00\00)\00 \00\00")
  (data 0 (i32.const 24474) "\08\00\00\00 \00a\00t\00 \00\00")
  (data 0 (i32.const 24487) "\02\00\00\00\0a\00\00")
  (func $src::compiler::context::ModuleMap.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::compiler::context::EmptyModule.is_1 (local.get $self)) (call $src::compiler::context::Module.is_1 (local.get $self))) (call $src::compiler::context::ModuleCons.is_1 (local.get $self)))
    )
  )
  (func $src::compiler::context::ModuleMap.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::context::ModuleMap.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::context::ModuleMap.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::context::ModuleMap.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::context::ModuleMap.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::context::EmptyModule.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::context::Module.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::context::ModuleCons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::context::EmptyModule.is_1 (param $a i64) (result i32)
    (local $src::compiler::context::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::compiler::context::discriminant (i32.const 185))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::context::discriminant))
    )
  )
  (func $src::compiler::context::EmptyModule.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::context::EmptyModule.EmptyModule$discriminant_1 (result i64)
    (local $src::compiler::context::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::context::discriminant_1 (i32.const 185))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::context::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::compiler::context::EmptyModule.apply_1 (result i64)
    (call $src::compiler::context::EmptyModule.EmptyModule$discriminant_1)
  )
  (func $src::compiler::context::EmptyModule.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::context::EmptyModule.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::context::EmptyModule.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::context::EmptyModule.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::context::Module.is_1 (param $a i64) (result i32)
    (local $src::compiler::context::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::context::discriminant_2 (i32.const 186))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::context::discriminant_2))
    )
  )
  (func $src::compiler::context::Module.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::context::Module.Module$discriminant_1 (result i64)
    (local $src::compiler::context::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::context::discriminant_3 (i32.const 186))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::context::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::compiler::context::Module.apply_1 (param $moduleName i64) (param $path i64) (param $source i64) (param $ast i64) (param $document i64) (param $phase i32) (param $errors i32) (param $lineMapper i64) (result i64)
    (local $src::compiler::context::$ref i64)
    (block $B1 (result i64)
      (local.set $src::compiler::context::$ref (call $src::compiler::context::Module.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 56))))
      (call $src::compiler::context::Module.property$0_2 (local.get $src::compiler::context::$ref) (local.get $moduleName))
      (call $src::compiler::context::Module.property$1_2 (local.get $src::compiler::context::$ref) (local.get $path))
      (call $src::compiler::context::Module.property$2_2 (local.get $src::compiler::context::$ref) (local.get $source))
      (call $src::compiler::context::Module.property$3_2 (local.get $src::compiler::context::$ref) (local.get $ast))
      (call $src::compiler::context::Module.property$4_2 (local.get $src::compiler::context::$ref) (local.get $document))
      (call $src::compiler::context::Module.property$5_2 (local.get $src::compiler::context::$ref) (local.get $phase))
      (call $src::compiler::context::Module.property$6_2 (local.get $src::compiler::context::$ref) (local.get $errors))
      (call $src::compiler::context::Module.property$7_2 (local.get $src::compiler::context::$ref) (local.get $lineMapper))
      (local.get $src::compiler::context::$ref)
    )
  )
  (func $src::compiler::context::Module.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::context::Module.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::context::Module.Module$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::context::Module.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::context::Module.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::context::Module.moduleName_1 (param $self i64) (result i64)
    (call $src::compiler::context::Module.property$0_1 (local.get $self))
  )
  (func $src::compiler::context::Module.moduleName_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::Module.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::Module.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::context::Module.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::context::Module.path_1 (param $self i64) (result i64)
    (call $src::compiler::context::Module.property$1_1 (local.get $self))
  )
  (func $src::compiler::context::Module.path_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::Module.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::Module.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::context::Module.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::context::Module.source_1 (param $self i64) (result i64)
    (call $src::compiler::context::Module.property$2_1 (local.get $self))
  )
  (func $src::compiler::context::Module.source_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::Module.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::Module.property$2_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::context::Module.property$2_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::context::Module.ast_1 (param $self i64) (result i64)
    (call $src::compiler::context::Module.property$3_1 (local.get $self))
  )
  (func $src::compiler::context::Module.ast_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::Module.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::Module.property$3_1 (param $self i64) (result i64)
    (call $src::parser::parser::AstNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::context::Module.property$3_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::AstNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::context::Module.document_1 (param $self i64) (result i64)
    (call $src::compiler::context::Module.property$4_1 (local.get $self))
  )
  (func $src::compiler::context::Module.document_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::Module.property$4_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::Module.property$4_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 32))
  )
  (func $src::compiler::context::Module.property$4_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 32))
  )
  (func $src::compiler::context::Module.phase_1 (param $self i64) (result i32)
    (call $src::compiler::context::Module.property$5_1 (local.get $self))
  )
  (func $src::compiler::context::Module.phase_2 (param $self i64) (param $value i32)
    (call $src::compiler::context::Module.property$5_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::Module.property$5_1 (param $self i64) (result i32)
    (call $system::core::i32::i32.load_2 (local.get $self) (i32.const 40))
  )
  (func $src::compiler::context::Module.property$5_2 (param $self i64) (param $value i32)
    (call $system::core::i32::i32.store_2 (local.get $self) (local.get $value) (i32.const 40))
  )
  (func $src::compiler::context::Module.errors_1 (param $self i64) (result i32)
    (call $src::compiler::context::Module.property$6_1 (local.get $self))
  )
  (func $src::compiler::context::Module.errors_2 (param $self i64) (param $value i32)
    (call $src::compiler::context::Module.property$6_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::Module.property$6_1 (param $self i64) (result i32)
    (call $system::core::i32::i32.load_2 (local.get $self) (i32.const 44))
  )
  (func $src::compiler::context::Module.property$6_2 (param $self i64) (param $value i32)
    (call $system::core::i32::i32.store_2 (local.get $self) (local.get $value) (i32.const 44))
  )
  (func $src::compiler::context::Module.lineMapper_1 (param $self i64) (result i64)
    (call $src::compiler::context::Module.property$7_1 (local.get $self))
  )
  (func $src::compiler::context::Module.lineMapper_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::Module.property$7_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::Module.property$7_1 (param $self i64) (result i64)
    (call $src::compiler::linemapper::LineMapper.load_1 (local.get $self) (i32.const 48))
  )
  (func $src::compiler::context::Module.property$7_2 (param $self i64) (param $value i64)
    (call $src::compiler::linemapper::LineMapper.store_1 (local.get $self) (local.get $value) (i32.const 48))
  )
  (func $src::compiler::context::Module.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::context::Module.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::context::ModuleCons.is_1 (param $a i64) (result i32)
    (local $src::compiler::context::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::context::discriminant_4 (i32.const 187))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::context::discriminant_4))
    )
  )
  (func $src::compiler::context::ModuleCons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::context::ModuleCons.ModuleCons$discriminant_1 (result i64)
    (local $src::compiler::context::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::context::discriminant_5 (i32.const 187))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::context::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::compiler::context::ModuleCons.apply_1 (param $head i64) (param $tail i64) (result i64)
    (local $src::compiler::context::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::context::$ref_1 (call $src::compiler::context::ModuleCons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::context::ModuleCons.property$0_2 (local.get $src::compiler::context::$ref_1) (local.get $head))
      (call $src::compiler::context::ModuleCons.property$1_2 (local.get $src::compiler::context::$ref_1) (local.get $tail))
      (local.get $src::compiler::context::$ref_1)
    )
  )
  (func $src::compiler::context::ModuleCons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::context::ModuleCons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::context::ModuleCons.ModuleCons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::context::ModuleCons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::context::ModuleCons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::context::ModuleCons.head_1 (param $self i64) (result i64)
    (call $src::compiler::context::ModuleCons.property$0_1 (local.get $self))
  )
  (func $src::compiler::context::ModuleCons.head_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::ModuleCons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::ModuleCons.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::context::Module.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::context::ModuleCons.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::Module.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::context::ModuleCons.tail_1 (param $self i64) (result i64)
    (call $src::compiler::context::ModuleCons.property$1_1 (local.get $self))
  )
  (func $src::compiler::context::ModuleCons.tail_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::ModuleCons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::ModuleCons.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::context::ModuleMap.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::context::ModuleCons.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::ModuleMap.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::context::ModuleCons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::context::ModuleCons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::context::CompilerContext.is_1 (param $a i64) (result i32)
    (local $src::compiler::context::discriminant_6 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::context::discriminant_6 (i32.const 188))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::context::discriminant_6))
    )
  )
  (func $src::compiler::context::CompilerContext.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::context::CompilerContext.CompilerContext$discriminant_1 (result i64)
    (local $src::compiler::context::discriminant_7 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::context::discriminant_7 (i32.const 188))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::context::discriminant_7)) (i32.const 32))
    )
  )
  (func $src::compiler::context::CompilerContext.apply_1 (param $messageCollector i64) (param $modules i64) (param $workingDirectory i64) (param $paths i64) (result i64)
    (local $src::compiler::context::$ref_2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::context::$ref_2 (call $src::compiler::context::CompilerContext.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::context::CompilerContext.property$0_2 (local.get $src::compiler::context::$ref_2) (local.get $messageCollector))
      (call $src::compiler::context::CompilerContext.property$1_2 (local.get $src::compiler::context::$ref_2) (local.get $modules))
      (call $src::compiler::context::CompilerContext.property$2_2 (local.get $src::compiler::context::$ref_2) (local.get $workingDirectory))
      (call $src::compiler::context::CompilerContext.property$3_2 (local.get $src::compiler::context::$ref_2) (local.get $paths))
      (local.get $src::compiler::context::$ref_2)
    )
  )
  (func $src::compiler::context::CompilerContext.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::context::CompilerContext.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::context::CompilerContext.CompilerContext$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::context::CompilerContext.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::context::CompilerContext.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::context::CompilerContext.messageCollector_1 (param $self i64) (result i64)
    (call $src::compiler::context::CompilerContext.property$0_1 (local.get $self))
  )
  (func $src::compiler::context::CompilerContext.messageCollector_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::CompilerContext.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::CompilerContext.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::messagecollector::MessageCollector.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::context::CompilerContext.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::messagecollector::MessageCollector.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::context::CompilerContext.modules_1 (param $self i64) (result i64)
    (call $src::compiler::context::CompilerContext.property$1_1 (local.get $self))
  )
  (func $src::compiler::context::CompilerContext.modules_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::CompilerContext.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::CompilerContext.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::context::ModuleMap.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::context::CompilerContext.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::ModuleMap.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::context::CompilerContext.workingDirectory_1 (param $self i64) (result i64)
    (call $src::compiler::context::CompilerContext.property$2_1 (local.get $self))
  )
  (func $src::compiler::context::CompilerContext.workingDirectory_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::CompilerContext.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::CompilerContext.property$2_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::context::CompilerContext.property$2_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::context::CompilerContext.paths_1 (param $self i64) (result i64)
    (call $src::compiler::context::CompilerContext.property$3_1 (local.get $self))
  )
  (func $src::compiler::context::CompilerContext.paths_2 (param $self i64) (param $value i64)
    (call $src::compiler::context::CompilerContext.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::context::CompilerContext.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::stringlist::StringLinkedList.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::context::CompilerContext.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::stringlist::StringLinkedList.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::context::CompilerContext.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::context::CompilerContext.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::context::ModuleMap.findModuleByPath_1 (param $self i64) (param $path i64) (result i64)
    (local $src::compiler::context::head_1 i64)
    (local $src::compiler::context::tail_1 i64)
    (local $var$4 i64)
    (block $B1 (result i64)
      (block $B5 (result i64)
          (local.set $var$4 (local.get $self))
          (block $B5_0
              (block $B5_1
                  (block $B5_2
                      (br_if $B5_0 (call $src::compiler::context::EmptyModule.is_1 (local.get $var$4)))
                      (br_if $B5_1 (call $src::compiler::context::Module.is_1 (local.get $var$4)))
                      (br_if $B5_2 (call $src::compiler::context::ModuleCons.is_1 (local.get $var$4)))
                    )
                  (block $B3 (result i64)
                      (local.set $src::compiler::context::head_1 (call $src::compiler::context::ModuleCons.head_1 (local.get $var$4)))
                      (local.set $src::compiler::context::tail_1 (call $src::compiler::context::ModuleCons.tail_1 (local.get $var$4)))
                      (if $IF4 (result i64) (call $system::core::string::string.==_1 (call $src::compiler::context::Module.path_1 (local.get $src::compiler::context::head_1)) (local.get $path))
                          (then
                            (local.get $src::compiler::context::head_1)
                          )
                          (else
                            (call $src::compiler::context::ModuleMap.findModuleByPath_1 (local.get $src::compiler::context::tail_1) (local.get $path))
                          )
                        )
                    )
                  (br $B5)
                )
              (if $IF2 (result i64) (call $system::core::string::string.==_1 (call $src::compiler::context::Module.path_1 (local.get $var$4)) (local.get $path))
                  (then
                    (local.get $var$4)
                  )
                  (else
                    (call $src::compiler::context::EmptyModule.apply_1)
                  )
                )
              (br $B5)
            )
          (local.get $var$4)
          (br $B5)
        )
    )
  )
  (func $src::compiler::context::ModuleMap.findModule_1 (param $self i64) (param $moduleName i64) (result i64)
    (local $src::compiler::context::head_2 i64)
    (local $src::compiler::context::tail_2 i64)
    (local $var$4 i64)
    (block $B1 (result i64)
      (block $B5 (result i64)
          (local.set $var$4 (local.get $self))
          (block $B5_0
              (block $B5_1
                  (block $B5_2
                      (br_if $B5_0 (call $src::compiler::context::EmptyModule.is_1 (local.get $var$4)))
                      (br_if $B5_1 (call $src::compiler::context::Module.is_1 (local.get $var$4)))
                      (br_if $B5_2 (call $src::compiler::context::ModuleCons.is_1 (local.get $var$4)))
                    )
                  (block $B3 (result i64)
                      (local.set $src::compiler::context::head_2 (call $src::compiler::context::ModuleCons.head_1 (local.get $var$4)))
                      (local.set $src::compiler::context::tail_2 (call $src::compiler::context::ModuleCons.tail_1 (local.get $var$4)))
                      (if $IF4 (result i64) (call $system::core::string::string.==_1 (call $src::compiler::context::Module.moduleName_1 (local.get $src::compiler::context::head_2)) (local.get $moduleName))
                          (then
                            (local.get $src::compiler::context::head_2)
                          )
                          (else
                            (call $src::compiler::context::ModuleMap.findModule_1 (local.get $src::compiler::context::tail_2) (local.get $moduleName))
                          )
                        )
                    )
                  (br $B5)
                )
              (if $IF2 (result i64) (call $system::core::string::string.==_1 (call $src::compiler::context::Module.moduleName_1 (local.get $var$4)) (local.get $moduleName))
                  (then
                    (local.get $var$4)
                  )
                  (else
                    (call $src::compiler::context::EmptyModule.apply_1)
                  )
                )
              (br $B5)
            )
          (local.get $var$4)
          (br $B5)
        )
    )
  )
  (func $src::compiler::context::CompilerContext.apply_3 (result i64)
    (call $src::compiler::context::CompilerContext.apply_1 (call $src::compiler::messagecollector::MessageCollector.apply_3) (call $src::compiler::context::EmptyModule.apply_1) (i64.const 0x0000000400005e36) (call $src::compiler::stringlist::None.apply_1))
  )
  (func $src::compiler::context::CompilerContext.getModuleByContent_1 (param $self i64) (param $path i64) (param $moduleName i64) (param $source i64) (result i64)
    (local $src::compiler::context::ast_1 i64)
    (local $src::compiler::context::module i64)
    (local $src::compiler::context::errors_1 i32)
    (local $src::compiler::context::newAst i64)
    (local $src::compiler::context::code i64)
    (local $var$9 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::context::ast_1 (call $src::parser::parser::parse_1 (local.get $source) (i64.const 0x0000000400005e3d) (call $src::parser::lysgrammar::getGrammar_1)))
      (local.set $src::compiler::context::module (block $B4 (result i64)
                (local.set $var$9 (local.get $src::compiler::context::ast_1))
                (block $B4_0
                    (block $B4_1
                        (br_if $B4_0 (call $src::helpers::Nil.is_1 (local.get $var$9)))
                        (br_if $B4_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$9)))
                      )
                    (block $B3 (result i64)
                        (local.set $src::compiler::context::errors_1 (call $src::compiler::messagecollector::collectErrors_1 (local.get $var$9) (call $src::compiler::context::CompilerContext.messageCollector_1 (local.get $self)) (local.get $path)))
                        (local.set $src::compiler::context::newAst (call $src::compiler::phases::transformation::runPhase_1 (local.get $path) (local.get $moduleName) (local.get $var$9) (local.get $self)))
                        (local.set $src::compiler::context::code (call $src::compiler::phases::cannonical::processNode_1 (local.get $src::compiler::context::newAst)))
                        (local.set $src::compiler::context::code (call $src::compiler::phases::scopecreation::runPhase_1 (local.get $path) (local.get $moduleName) (local.get $src::compiler::context::code) (local.get $self)))
                        (call $src::compiler::context::Module.apply_1 (local.get $moduleName) (local.get $path) (local.get $source) (local.get $src::compiler::context::newAst) (local.get $src::compiler::context::code) (i32.const 0) (local.get $src::compiler::context::errors_1) (call $src::compiler::linemapper::LineMapper.apply_3 (local.get $source)))
                      )
                    (br $B4)
                  )
                (block $B2 (result i64)
                    (call $src::compiler::messagecollector::MessageCollector.append_1 (call $src::compiler::context::CompilerContext.messageCollector_1 (local.get $self)) (call $system::core::string::string.++_1 (i64.const 0x0000000400005e52) (local.get $path)) (call $src::compiler::messagecollector::SourcePosition.apply_1 (local.get $path) (i32.const 0x0) (i32.const 0x1)))
                    (call $src::compiler::context::Module.apply_1 (local.get $moduleName) (local.get $path) (local.get $source) (call $src::parser::parser::Rule0.apply_1) (call $src::compiler::nodes::EmptyNode.apply_1) (i32.const 0) (i32.const 1) (call $src::compiler::linemapper::LineMapper.apply_3 (local.get $source)))
                  )
                (br $B4)
              ))
      (block $B5
          (local.set $var$9 (call $src::compiler::context::CompilerContext.modules_1 (local.get $self)))
          (block $B5_0
              (block $B5_1
                  (br_if $B5_0 (call $src::compiler::context::EmptyModule.is_1 (local.get $var$9)))
                )
              (call $src::compiler::context::CompilerContext.modules_2 (local.get $self) (call $src::compiler::context::ModuleCons.apply_1 (local.get $src::compiler::context::module) (call $src::compiler::context::CompilerContext.modules_1 (local.get $self))))
              (br $B5)
            )
          (call $src::compiler::context::CompilerContext.modules_2 (local.get $self) (local.get $src::compiler::context::module))
          (br $B5)
        )
      (local.get $src::compiler::context::module)
    )
  )
  (func $src::compiler::context::CompilerContext.findModule_1 (param $self i64) (param $moduleName i64) (result i64)
    (call $src::compiler::context::ModuleMap.findModule_1 (call $src::compiler::context::CompilerContext.modules_1 (local.get $self)) (local.get $moduleName))
  )
  (func $src::compiler::context::CompilerContext.findModuleByPath_1 (param $self i64) (param $path i64) (result i64)
    (call $src::compiler::context::ModuleMap.findModuleByPath_1 (call $src::compiler::context::CompilerContext.modules_1 (local.get $self)) (local.get $path))
  )
  (func $src::compiler::context::CompilerContext.printErrors_1 (param $self i64) (param $head i64) (param $sb i64) (param $path i64) (param $counter i32) (result i32)
    (local $src::compiler::context::message i64)
    (local $src::compiler::context::position i64)
    (local $src::compiler::context::module_1 i64)
    (local $src::compiler::context::start i64)
    (local $src::compiler::context::end i64)
    (local $src::compiler::context::loc i32)
    (local $src::compiler::context::head_4 i64)
    (local $src::compiler::context::tail_3 i64)
    (local $src::compiler::context::newNumber i32)
    (local $var$14 i64)
    (local $var$15 i64)
    (block $B19 (result i32)
      (local.set $var$14 (local.get $head))
      (block $B19_0
          (block $B19_1
              (block $B19_2
                  (br_if $B19_0 (call $src::compiler::messagecollector::PositionCapableMessage.is_1 (local.get $var$14)))
                  (br_if $B19_1 (call $src::compiler::messagecollector::MessageCons.is_1 (local.get $var$14)))
                )
              (local.get $counter)
              (br $B19)
            )
          (block $B18 (result i32)
              (local.set $src::compiler::context::head_4 (call $src::compiler::messagecollector::MessageCons.head_1 (local.get $var$14)))
              (local.set $src::compiler::context::tail_3 (call $src::compiler::messagecollector::MessageCons.tail_1 (local.get $var$14)))
              (local.set $src::compiler::context::newNumber (call $src::compiler::context::CompilerContext.printErrors_1 (local.get $self) (local.get $src::compiler::context::tail_3) (local.get $sb) (local.get $path) (local.get $counter)))
              (call $src::compiler::context::CompilerContext.printErrors_1 (local.get $self) (local.get $src::compiler::context::head_4) (local.get $sb) (local.get $path) (local.get $src::compiler::context::newNumber))
            )
          (br $B19)
        )
      (block $B1 (result i32)
          (local.set $src::compiler::context::message (call $src::compiler::messagecollector::PositionCapableMessage.message_1 (local.get $var$14)))
          (local.set $src::compiler::context::position (call $src::compiler::messagecollector::PositionCapableMessage.position_1 (local.get $var$14)))
          (if $IF2 (result i32) (call $system::core::string::string.==_1 (call $src::compiler::messagecollector::SourcePosition.path_1 (local.get $src::compiler::context::position)) (local.get $path))
              (then
                (block $B3 (result i32)
                    (local.set $src::compiler::context::module_1 (call $src::compiler::context::CompilerContext.findModuleByPath_1 (local.get $self) (local.get $path)))
                    (block $B16
                        (local.set $var$15 (local.get $src::compiler::context::module_1))
                        (block $B16_0
                            (block $B16_1
                                (br_if $B16_0 (call $src::compiler::context::Module.is_1 (local.get $var$15)))
                              )
                            (block $B15
                                (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $system::core::string::string.stringify_5 (call $system::core::i32::i32.+_1 (local.get $counter) (i32.const 1)))) (i64.const 0x0000000400005f91)) (local.get $src::compiler::context::message)) (i64.const 0x0000000400005f9a)) (call $src::compiler::messagecollector::SourcePosition.path_1 (local.get $src::compiler::context::position))) (i64.const 0x0000000400005fa7)))
                              )
                            (br $B16)
                          )
                        (block $B4
                            (local.set $src::compiler::context::start (call $src::compiler::linemapper::LineMapper.getLine_1 (call $src::compiler::context::Module.lineMapper_1 (local.get $var$15)) (call $src::compiler::messagecollector::SourcePosition.start_1 (local.get $src::compiler::context::position))))
                            (local.set $src::compiler::context::end (call $src::compiler::linemapper::LineMapper.getLine_1 (call $src::compiler::context::Module.lineMapper_1 (local.get $var$15)) (call $src::compiler::messagecollector::SourcePosition.end_1 (local.get $src::compiler::context::position))))
                            (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005e7f)) (call $system::core::string::string.stringify_5 (call $system::core::i32::i32.+_1 (local.get $counter) (i32.const 1)))) (i64.const 0x0000000400005e88)) (local.get $src::compiler::context::message)) (i64.const 0x0000000400005e91)) (call $src::compiler::messagecollector::SourcePosition.path_1 (local.get $src::compiler::context::position))) (i64.const 0x0000000400005e9e)) (call $system::core::string::string.stringify_6 (call $system::core::u32::u32.+_1 (call $src::compiler::linemapper::LineData.line_1 (local.get $src::compiler::context::start)) (i32.const 0x1)))) (i64.const 0x0000000400005ea5)) (call $system::core::string::string.stringify_6 (call $system::core::u32::u32.-_1 (call $src::compiler::messagecollector::SourcePosition.start_1 (local.get $src::compiler::context::position)) (call $src::compiler::linemapper::LineData.start_1 (local.get $src::compiler::context::start))))) (i64.const 0x0000000400005eac)))
                            (if $IF5 (call $system::core::u32::u32.==_1 (call $src::compiler::linemapper::LineData.line_1 (local.get $src::compiler::context::start)) (call $src::compiler::linemapper::LineData.line_1 (local.get $src::compiler::context::end)))
                                (then
                                  (block $B6
                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005eb3)) (i64.const 0x0000000400005ec2)) (i64.const 0x0000000400005ed3)) (i64.const 0x0000000400005ee2)))
                                      (local.set $src::compiler::context::loc (call $system::core::u32::u32.as_5 (call $system::core::u32::u32.+_1 (call $src::compiler::linemapper::LineData.line_1 (local.get $src::compiler::context::start)) (i32.const 0x1))))
                                      (if $IF7 (call $system::core::i32::i32.<_1 (local.get $src::compiler::context::loc) (i32.const 10000))
                                          (then
                                            (block $B8
                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005ef1)))
                                              )
                                          )
                                          (else)
                                        )
                                      (if $IF9 (call $system::core::i32::i32.<_1 (local.get $src::compiler::context::loc) (i32.const 1000))
                                          (then
                                            (block $B10
                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005ef8)))
                                              )
                                          )
                                          (else)
                                        )
                                      (if $IF11 (call $system::core::i32::i32.<_1 (local.get $src::compiler::context::loc) (i32.const 100))
                                          (then
                                            (block $B12
                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005eff)))
                                              )
                                          )
                                          (else)
                                        )
                                      (if $IF13 (call $system::core::i32::i32.<_1 (local.get $src::compiler::context::loc) (i32.const 10))
                                          (then
                                            (block $B14
                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005f06)))
                                              )
                                          )
                                          (else)
                                        )
                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $system::core::string::string.stringify_5 (local.get $src::compiler::context::loc))) (i64.const 0x0000000400005f0d)) (i64.const 0x0000000400005f16)) (call $system::core::string::string.substring_1 (call $src::compiler::context::Module.source_1 (local.get $var$15)) (call $system::core::u32::u32.as_5 (call $src::compiler::linemapper::LineData.start_1 (local.get $src::compiler::context::start))) (call $system::core::u32::u32.as_5 (call $src::compiler::linemapper::LineData.end_1 (local.get $src::compiler::context::start))))) (i64.const 0x0000000400005f23)))
                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005f2a)) (i64.const 0x0000000400005f39)) (i64.const 0x0000000400005f4c)) (call $src::helpers::repeat_1 (i64.const 0x0000000400005f59) (call $system::core::u32::u32.as_5 (call $system::core::u32::u32.-_1 (call $src::compiler::messagecollector::SourcePosition.start_1 (local.get $src::compiler::context::position)) (call $src::compiler::linemapper::LineData.start_1 (local.get $src::compiler::context::start)))))) (i64.const 0x0000000400005f60)) (call $src::helpers::repeat_1 (i64.const 0x0000000400005f6f) (call $system::core::u32::u32.as_5 (call $system::core::u32::u32.-_1 (call $src::compiler::messagecollector::SourcePosition.end_1 (local.get $src::compiler::context::position)) (call $src::compiler::messagecollector::SourcePosition.start_1 (local.get $src::compiler::context::position)))))) (i64.const 0x0000000400005f76)) (i64.const 0x0000000400005f83)))
                                    )
                                )
                                (else)
                              )
                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005f8a)))
                          )
                        (br $B16)
                      )
                    (call $system::core::i32::i32.+_1 (local.get $counter) (i32.const 1))
                  )
              )
              (else
                (block $B17 (result i32)
                    (local.get $counter)
                  )
              )
            )
        )
      (br $B19)
    )
  )
  (func $src::compiler::context::CompilerContext.printErrors_2 (param $self i64) (param $sb i64) (result i32)
    (local $src::compiler::context::errors_2 i32)
    (local $src::compiler::context::current i64)
    (local $src::compiler::context::head_5 i64)
    (local $src::compiler::context::tail_4 i64)
    (local $src::compiler::context::nsb i64)
    (local $src::compiler::context::nsb_1 i64)
    (local $var$8 i64)
    (block $B1 (result i32)
      (local.set $src::compiler::context::errors_2 (i32.const 0))
      (local.set $src::compiler::context::current (call $src::compiler::context::CompilerContext.modules_1 (local.get $self)))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (block $B10
                      (local.set $var$8 (local.get $src::compiler::context::current))
                      (block $B10_0
                          (block $B10_1
                              (block $B10_2
                                  (br_if $B10_0 (call $src::compiler::context::ModuleCons.is_1 (local.get $var$8)))
                                  (br_if $B10_1 (call $src::compiler::context::Module.is_1 (local.get $var$8)))
                                  (br_if $B10_2 (call $src::compiler::context::EmptyModule.is_1 (local.get $var$8)))
                                )
                              (br $Break2)
                              (br $B10)
                            )
                          (block $B7
                              (local.set $src::compiler::context::nsb_1 (call $src::stringbuilder::StringBuilder.apply_3))
                              (local.set $src::compiler::context::errors_2 (call $src::compiler::context::CompilerContext.printErrors_1 (local.get $self) (call $src::compiler::messagecollector::MessageCollector.headMessage_1 (call $src::compiler::context::CompilerContext.messageCollector_1 (local.get $self))) (local.get $sb) (call $src::compiler::context::Module.path_1 (local.get $var$8)) (local.get $src::compiler::context::errors_2)))
                              (if $IF8 (call $system::core::boolean::boolean.!_1 (call $src::stringbuilder::StringBuilder.isEmpty_1 (local.get $src::compiler::context::nsb_1)))
                                  (then
                                    (block $B9
                                        (drop (call $src::stringbuilder::StringBuilder.append_2 (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $src::compiler::context::Module.path_1 (local.get $var$8))) (local.get $src::compiler::context::nsb_1)))
                                      )
                                  )
                                  (else)
                                )
                              (br $Break2)
                            )
                          (br $B10)
                        )
                      (block $B4
                          (local.set $src::compiler::context::head_5 (call $src::compiler::context::ModuleCons.head_1 (local.get $var$8)))
                          (local.set $src::compiler::context::tail_4 (call $src::compiler::context::ModuleCons.tail_1 (local.get $var$8)))
                          (local.set $src::compiler::context::nsb (call $src::stringbuilder::StringBuilder.apply_3))
                          (local.set $src::compiler::context::errors_2 (call $src::compiler::context::CompilerContext.printErrors_1 (local.get $self) (call $src::compiler::messagecollector::MessageCollector.headMessage_1 (call $src::compiler::context::CompilerContext.messageCollector_1 (local.get $self))) (local.get $src::compiler::context::nsb) (call $src::compiler::context::Module.path_1 (local.get $src::compiler::context::head_5)) (local.get $src::compiler::context::errors_2)))
                          (if $IF5 (call $system::core::boolean::boolean.!_1 (call $src::stringbuilder::StringBuilder.isEmpty_1 (local.get $src::compiler::context::nsb)))
                              (then
                                (block $B6
                                    (drop (call $src::stringbuilder::StringBuilder.append_2 (call $src::stringbuilder::StringBuilder.appendln_1 (local.get $sb) (call $src::compiler::context::Module.path_1 (local.get $src::compiler::context::head_5))) (local.get $src::compiler::context::nsb)))
                                  )
                              )
                              (else)
                            )
                          (local.set $src::compiler::context::current (local.get $src::compiler::context::tail_4))
                          (br $Loop2)
                        )
                      (br $B10)
                    )
                )
            )
        )
      (local.get $src::compiler::context::errors_2)
    )
  )
  (data 0 (i32.const 20193) "\12\00\00\00E\00m\00p\00t\00y\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20216) "\12\00\00\00E\00r\00r\00o\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20239) "\18\00\00\00C\00o\00d\00e\00N\00o\00d\00e\00C\00o\00n\00s\00\00")
  (data 0 (i32.const 20268) "\10\00\00\00D\00o\00c\00u\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 20289) "&\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20332) "\1c\00\00\00N\00o\00M\00o\00d\00i\00f\00i\00e\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20365) "$\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20406) "\12\00\00\00Q\00N\00a\00m\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20429) " \00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20466) "6\00\00\00E\00f\00f\00e\00c\00t\00M\00e\00m\00b\00e\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20525) "\1a\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20556) "\12\00\00\00B\00l\00o\00c\00k\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20579) "\14\00\00\00M\00e\00m\00b\00e\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20604) "\1a\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20635) "\1a\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20666) "\18\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20695) "$\00\00\00V\00a\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20736) "\1c\00\00\00A\00s\00s\00i\00g\00n\00m\00e\00n\00t\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20769) "&\00\00\00P\00a\00r\00e\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20812) "\22\00\00\00I\00m\00p\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20851) "&\00\00\00I\00m\00p\00o\00r\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20894) " \00\00\00F\00u\00n\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20931) "&\00\00\00E\00f\00f\00e\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 20974) "&\00\00\00S\00t\00r\00u\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21017) "4\00\00\00O\00v\00e\00r\00l\00o\00a\00d\00e\00d\00F\00u\00n\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21074) " \00\00\00V\00a\00r\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21111) "\22\00\00\00T\00y\00p\00e\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21150) "$\00\00\00T\00r\00a\00i\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21191) "\22\00\00\00E\00n\00u\00m\00D\00i\00r\00e\00c\00t\00i\00v\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21230) " \00\00\00F\00l\00o\00a\00t\00L\00i\00t\00e\00r\00a\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21267) "$\00\00\00I\00n\00t\00e\00g\00e\00r\00L\00i\00t\00e\00r\00a\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21308) "\1c\00\00\00H\00e\00x\00L\00i\00t\00e\00r\00a\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21341) "$\00\00\00B\00o\00o\00l\00e\00a\00n\00L\00i\00t\00e\00r\00a\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21382) "\22\00\00\00S\00t\00r\00i\00n\00g\00L\00i\00t\00e\00r\00a\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21421) "*\00\00\00U\00n\00k\00n\00o\00w\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21468) "\1a\00\00\00S\00t\00a\00c\00k\00T\00y\00p\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21499) "\1c\00\00\00S\00t\00r\00u\00c\00t\00T\00y\00p\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21532) "0\00\00\00A\00b\00s\00t\00r\00a\00c\00t\00F\00u\00n\00c\00t\00i\00o\00n\00C\00a\00l\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21585) "0\00\00\00I\00n\00j\00e\00c\00t\00e\00d\00F\00u\00n\00c\00t\00i\00o\00n\00C\00a\00l\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21638) " \00\00\00F\00u\00n\00c\00t\00i\00o\00n\00C\00a\00l\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21675) "(\00\00\00B\00i\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21720) " \00\00\00A\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21757) " \00\00\00I\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21794) "&\00\00\00U\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21837) "\18\00\00\00W\00a\00s\00m\00A\00t\00o\00m\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21866) "$\00\00\00W\00a\00s\00m\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21907) "\0c\00\00\00I\00f\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21924) "\1a\00\00\00U\00n\00i\00o\00n\00T\00y\00p\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 21955) "(\00\00\00I\00n\00t\00e\00r\00s\00e\00c\00t\00i\00o\00n\00T\00y\00p\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22000) "*\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22047) "*\00\00\00E\00f\00f\00e\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22094) "$\00\00\00P\00a\00t\00t\00e\00r\00n\00M\00a\00t\00c\00h\00e\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22135) "$\00\00\00M\00a\00t\00c\00h\00C\00o\00n\00d\00i\00t\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22176) "\1e\00\00\00M\00a\00t\00c\00h\00C\00a\00s\00e\00I\00s\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22211) " \00\00\00M\00a\00t\00c\00h\00L\00i\00t\00e\00r\00a\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22248) " \00\00\00M\00a\00t\00c\00h\00D\00e\00f\00a\00u\00l\00t\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22285) "\10\00\00\00L\00o\00o\00p\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22306) "\18\00\00\00C\00o\00n\00t\00i\00n\00u\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22335) "\12\00\00\00B\00r\00e\00a\00k\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22358) "&\00\00\00I\00n\00j\00e\00c\00t\00e\00d\00L\00i\00t\00e\00r\00a\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22401) " \00\00\00S\00t\00a\00c\00k\00L\00i\00t\00e\00r\00a\00l\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22438) "&\00\00\00N\00a\00m\00e\00L\00i\00t\00e\00r\00a\00l\00P\00a\00i\00r\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22481) "&\00\00\00C\00a\00n\00t\00 \00a\00n\00n\00o\00t\00a\00t\00e\00 \00n\00o\00d\00e\00 \00\00")
  (data 0 (i32.const 22524) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 22531) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 22540) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 22549) "\04\00\00\00{\00\0a\00\00")
  (data 0 (i32.const 22558) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 22567) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 22574) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 22583) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 22590) "\02\00\00\00}\00\00")
  (data 0 (i32.const 22597) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 22606) "\14\00\00\00/\00*\00 \00E\00R\00R\00O\00R\00:\00 \00\00")
  (data 0 (i32.const 22631) "\06\00\00\00 \00*\00/\00\00")
  (data 0 (i32.const 22642) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 22649) "\10\00\00\00p\00r\00i\00v\00a\00t\00e\00 \00\00")
  (data 0 (i32.const 22670) "\12\00\00\00%\00i\00n\00j\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 22693) "\04\00\00\00:\00:\00\00")
  (data 0 (i32.const 22702) " \00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22739) "6\00\00\00E\00f\00f\00e\00c\00t\00M\00e\00m\00b\00e\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00N\00o\00d\00e\00\00")
  (data 0 (i32.const 22798) "\04\00\00\00#\00[\00\00")
  (data 0 (i32.const 22807) "\02\00\00\00 \00\00")
  (data 0 (i32.const 22814) "\02\00\00\00 \00\00")
  (data 0 (i32.const 22821) "\02\00\00\00]\00\00")
  (data 0 (i32.const 22828) "\04\00\00\00:\00 \00\00")
  (data 0 (i32.const 22837) "\08\00\00\00f\00u\00n\00 \00\00")
  (data 0 (i32.const 22850) "\02\00\00\00(\00\00")
  (data 0 (i32.const 22857) "\04\00\00\00,\00 \00\00")
  (data 0 (i32.const 22866) "\02\00\00\00)\00\00")
  (data 0 (i32.const 22873) "\04\00\00\00:\00 \00\00")
  (data 0 (i32.const 22882) "\06\00\00\00 \00=\00 \00\00")
  (data 0 (i32.const 22893) "\08\00\00\00v\00a\00r\00 \00\00")
  (data 0 (i32.const 22906) "\08\00\00\00v\00a\00l\00 \00\00")
  (data 0 (i32.const 22919) "\04\00\00\00:\00 \00\00")
  (data 0 (i32.const 22928) "\06\00\00\00 \00=\00 \00\00")
  (data 0 (i32.const 22939) "\06\00\00\00 \00=\00 \00\00")
  (data 0 (i32.const 22950) "\0e\00\00\00s\00t\00r\00u\00c\00t\00 \00\00")
  (data 0 (i32.const 22969) "\0a\00\00\00i\00m\00p\00l\00 \00\00")
  (data 0 (i32.const 22984) "\0a\00\00\00 \00f\00o\00r\00 \00\00")
  (data 0 (i32.const 22999) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23006) "\0e\00\00\00i\00m\00p\00o\00r\00t\00 \00\00")
  (data 0 (i32.const 23025) "\08\00\00\00 \00a\00s\00 \00\00")
  (data 0 (i32.const 23038) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 23045) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 23052) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 23059) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 23066) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 23073) "\0a\00\00\00t\00y\00p\00e\00 \00\00")
  (data 0 (i32.const 23088) "\06\00\00\00 \00=\00 \00\00")
  (data 0 (i32.const 23099) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 23106) "\0c\00\00\00t\00r\00a\00i\00t\00 \00\00")
  (data 0 (i32.const 23123) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23130) "\0a\00\00\00e\00n\00u\00m\00 \00\00")
  (data 0 (i32.const 23145) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23152) "\02\00\00\00=\00\00")
  (data 0 (i32.const 23159) "\08\00\00\00t\00r\00u\00e\00\00")
  (data 0 (i32.const 23172) "\0a\00\00\00f\00a\00l\00s\00e\00\00")
  (data 0 (i32.const 23187) "\06\00\00\00?\00?\00?\00\00")
  (data 0 (i32.const 23198) "\10\00\00\00%\00s\00t\00a\00c\00k\00 \00{\00\00")
  (data 0 (i32.const 23219) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23226) "\04\00\00\00}\00\0a\00\00")
  (data 0 (i32.const 23235) "\12\00\00\00%\00s\00t\00r\00u\00c\00t\00 \00{\00\00")
  (data 0 (i32.const 23258) "\04\00\00\00,\00 \00\00")
  (data 0 (i32.const 23267) "\04\00\00\00}\00\0a\00\00")
  (data 0 (i32.const 23276) "$\00\00\00%\00A\00B\00S\00T\00R\00A\00C\00T\00 \00F\00N\00 \00C\00A\00L\00L\00%\00\00")
  (data 0 (i32.const 23317) "$\00\00\00%\00I\00N\00J\00E\00C\00T\00E\00D\00 \00F\00N\00 \00C\00A\00L\00L\00%\00\00")
  (data 0 (i32.const 23358) "\02\00\00\00(\00\00")
  (data 0 (i32.const 23365) "\04\00\00\00,\00 \00\00")
  (data 0 (i32.const 23374) "\02\00\00\00)\00\00")
  (data 0 (i32.const 23381) "\02\00\00\00(\00\00")
  (data 0 (i32.const 23388) "\02\00\00\00)\00\00")
  (data 0 (i32.const 23395) "\04\00\00\00[\00]\00\00")
  (data 0 (i32.const 23404) "\02\00\00\00[\00\00")
  (data 0 (i32.const 23411) "\02\00\00\00]\00\00")
  (data 0 (i32.const 23418) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23425) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23432) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23439) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23446) "\08\00\00\00 \00a\00s\00 \00\00")
  (data 0 (i32.const 23459) "\08\00\00\00 \00i\00s\00 \00\00")
  (data 0 (i32.const 23472) "\02\00\00\00(\00\00")
  (data 0 (i32.const 23479) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23486) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23493) "\02\00\00\00)\00\00")
  (data 0 (i32.const 23500) "\0c\00\00\00%\00w\00a\00s\00m\00 \00\00")
  (data 0 (i32.const 23517) "\08\00\00\00i\00f\00 \00(\00\00")
  (data 0 (i32.const 23530) "\04\00\00\00)\00 \00\00")
  (data 0 (i32.const 23539) "\0c\00\00\00 \00e\00l\00s\00e\00 \00\00")
  (data 0 (i32.const 23556) "\06\00\00\00 \00|\00 \00\00")
  (data 0 (i32.const 23567) "\06\00\00\00 \00&\00 \00\00")
  (data 0 (i32.const 23578) "\02\00\00\00(\00\00")
  (data 0 (i32.const 23585) "\04\00\00\00,\00 \00\00")
  (data 0 (i32.const 23594) "\02\00\00\00)\00\00")
  (data 0 (i32.const 23601) "\0c\00\00\00m\00a\00t\00c\00h\00 \00\00")
  (data 0 (i32.const 23618) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23625) "\08\00\00\00c\00a\00s\00e\00\00")
  (data 0 (i32.const 23638) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23645) "\08\00\00\00 \00i\00f\00 \00\00")
  (data 0 (i32.const 23658) "\08\00\00\00 \00-\00>\00 \00\00")
  (data 0 (i32.const 23671) "\08\00\00\00c\00a\00s\00e\00\00")
  (data 0 (i32.const 23684) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23691) "\08\00\00\00 \00i\00s\00 \00\00")
  (data 0 (i32.const 23704) "\08\00\00\00 \00-\00>\00 \00\00")
  (data 0 (i32.const 23717) "\08\00\00\00c\00a\00s\00e\00\00")
  (data 0 (i32.const 23730) "\08\00\00\00 \00-\00>\00 \00\00")
  (data 0 (i32.const 23743) "\08\00\00\00e\00l\00s\00e\00\00")
  (data 0 (i32.const 23756) "\02\00\00\00 \00\00")
  (data 0 (i32.const 23763) "\08\00\00\00 \00-\00>\00 \00\00")
  (data 0 (i32.const 23776) "\0a\00\00\00l\00o\00o\00p\00 \00\00")
  (data 0 (i32.const 23791) "\10\00\00\00c\00o\00n\00t\00i\00n\00u\00e\00\00")
  (data 0 (i32.const 23812) "\0a\00\00\00b\00r\00e\00a\00k\00\00")
  (data 0 (i32.const 23827) ".\00\00\00D\00o\00n\00t\00 \00k\00n\00o\00w\00 \00h\00o\00w\00 \00t\00o\00 \00p\00r\00i\00n\00t\00 \00\00")
  (data 0 (i32.const 23878) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 23887) "\04\00\00\00|\00-\00\00")
  (data 0 (i32.const 23896) "\0c\00\00\00 \00n\00a\00m\00e\00=\00\00")
  (data 0 (i32.const 23913) "\14\00\00\00 \00o\00p\00e\00r\00a\00t\00o\00r\00=\00\00")
  (data 0 (i32.const 23938) "\0c\00\00\00 \00d\00e\00s\00c\00=\00\00")
  (data 0 (i32.const 23955) "\0e\00\00\00 \00v\00a\00l\00u\00e\00=\00\00")
  (data 0 (i32.const 23974) "\0e\00\00\00 \00v\00a\00l\00u\00e\00=\00\00")
  (data 0 (i32.const 23993) "\0e\00\00\00 \00v\00a\00l\00u\00e\00=\00\00")
  (data 0 (i32.const 24012) "\0e\00\00\00 \00v\00a\00l\00u\00e\00=\00\00")
  (data 0 (i32.const 24031) "\08\00\00\00t\00r\00u\00e\00\00")
  (data 0 (i32.const 24044) "\0a\00\00\00f\00a\00l\00s\00e\00\00")
  (data 0 (i32.const 24059) "\0e\00\00\00 \00v\00a\00l\00u\00e\00=\00\00")
  (data 0 (i32.const 24078) "\10\00\00\00 \00s\00y\00m\00b\00o\00l\00=\00\00")
  (data 0 (i32.const 24099) "\00\00\00\00\00")
  (data 0 (i32.const 24104) "\02\00\00\00 \00\00")
  (data 0 (i32.const 24111) "\02\00\00\00\0a\00\00")
  (func $src::compiler::nodes::NodeMeta.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant (i32.const 49))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant))
    )
  )
  (func $src::compiler::nodes::NodeMeta.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::NodeMeta.NodeMeta$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_1 (i32.const 49))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::NodeMeta.apply_1 (param $astNode i64) (param $annotations i64) (param $scope i64) (result i64)
    (local $src::compiler::nodes::$ref i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref (call $src::compiler::nodes::NodeMeta.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::NodeMeta.property$0_2 (local.get $src::compiler::nodes::$ref) (local.get $astNode))
      (call $src::compiler::nodes::NodeMeta.property$1_2 (local.get $src::compiler::nodes::$ref) (local.get $annotations))
      (call $src::compiler::nodes::NodeMeta.property$2_2 (local.get $src::compiler::nodes::$ref) (local.get $scope))
      (local.get $src::compiler::nodes::$ref)
    )
  )
  (func $src::compiler::nodes::NodeMeta.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::NodeMeta.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::NodeMeta.NodeMeta$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::NodeMeta.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::NodeMeta.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::NodeMeta.astNode_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::NodeMeta.astNode_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NodeMeta.property$0_1 (param $self i64) (result i64)
    (call $src::parser::parser::AstNode.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::NodeMeta.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::AstNode.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::NodeMeta.annotations_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::NodeMeta.annotations_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NodeMeta.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::annotations::NodeAnnotation.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::NodeMeta.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::annotations::NodeAnnotation.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::NodeMeta.scope_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::NodeMeta.scope_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NodeMeta.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::scope::NodeScope.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::NodeMeta.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::scope::NodeScope.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::NodeMeta.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::NodeMeta.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::NodeMeta.apply_3 (param $astNode i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.apply_1 (local.get $astNode) (call $src::compiler::annotations::NoAnnotation.apply_1) (call $src::compiler::scope::NoScope.apply_1))
  )
  (func $src::compiler::nodes::NodeMeta.annotate_1 (param $self i64) (param $annotation i64) (result i64)
    (local $src::compiler::nodes::newAnnotation i64)
    (local $var$3 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::newAnnotation (block $B2 (result i64)
                (local.set $var$3 (call $src::compiler::nodes::NodeMeta.annotations_1 (local.get $self)))
                (block $B2_0
                    (block $B2_1
                        (br_if $B2_0 (call $src::compiler::annotations::NoAnnotation.is_1 (local.get $var$3)))
                      )
                    (call $src::compiler::annotations::AnnotationCons.apply_1 (call $src::compiler::nodes::NodeMeta.annotations_1 (local.get $self)) (local.get $annotation))
                    (br $B2)
                  )
                (local.get $annotation)
                (br $B2)
              ))
      (call $src::compiler::nodes::NodeMeta.annotations_2 (local.get $self) (local.get $src::compiler::nodes::newAnnotation))
      (local.get $self)
    )
  )
  (func $src::compiler::nodes::IrReference.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $src::compiler::nodes::Global.is_1 (local.get $self)) (call $src::compiler::nodes::Local.is_1 (local.get $self)))
    )
  )
  (func $src::compiler::nodes::IrReference.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::nodes::IrReference.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::nodes::IrReference.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::nodes::IrReference.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::IrReference.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::Global.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::Local.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::Global.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_2 (i32.const 50))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_2))
    )
  )
  (func $src::compiler::nodes::Global.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::Global.Global$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_3 (i32.const 50))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::Global.apply_1 (param $declarationNode i64) (result i64)
    (local $src::compiler::nodes::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_1 (call $src::compiler::nodes::Global.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::nodes::Global.property$0_2 (local.get $src::compiler::nodes::$ref_1) (local.get $declarationNode))
      (local.get $src::compiler::nodes::$ref_1)
    )
  )
  (func $src::compiler::nodes::Global.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::Global.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::Global.Global$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::Global.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::Global.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::Global.declarationNode_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::Global.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::Global.declarationNode_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::Global.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::Global.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameIdentifierNode.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::Global.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameIdentifierNode.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::Global.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::Global.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::Local.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_4 (i32.const 51))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_4))
    )
  )
  (func $src::compiler::nodes::Local.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::Local.Local$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_5 (i32.const 51))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::Local.apply_1 (param $index i32) (param $name i64) (param $declarationNode i64) (result i64)
    (local $src::compiler::nodes::$ref_2 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_2 (call $src::compiler::nodes::Local.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 20))))
      (call $src::compiler::nodes::Local.property$0_2 (local.get $src::compiler::nodes::$ref_2) (local.get $index))
      (call $src::compiler::nodes::Local.property$1_2 (local.get $src::compiler::nodes::$ref_2) (local.get $name))
      (call $src::compiler::nodes::Local.property$2_2 (local.get $src::compiler::nodes::$ref_2) (local.get $declarationNode))
      (local.get $src::compiler::nodes::$ref_2)
    )
  )
  (func $src::compiler::nodes::Local.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::Local.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::Local.Local$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::Local.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::Local.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::Local.index_1 (param $self i64) (result i32)
    (call $src::compiler::nodes::Local.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::Local.index_2 (param $self i64) (param $value i32)
    (call $src::compiler::nodes::Local.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::Local.property$0_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::Local.property$0_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::Local.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::Local.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::Local.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::Local.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::Local.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 4))
  )
  (func $src::compiler::nodes::Local.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 4))
  )
  (func $src::compiler::nodes::Local.declarationNode_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::Local.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::Local.declarationNode_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::Local.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::Local.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 12))
  )
  (func $src::compiler::nodes::Local.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 12))
  )
  (func $src::compiler::nodes::Local.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::Local.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::CodeNode.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $self)) (call $src::compiler::nodes::ErrorNode.is_1 (local.get $self))) (call $src::compiler::nodes::CodeNodeCons.is_1 (local.get $self))) (call $src::compiler::nodes::Document.is_1 (local.get $self))) (call $src::compiler::nodes::PrivateModifierNode.is_1 (local.get $self))) (call $src::compiler::nodes::NoModifierNode.is_1 (local.get $self))) (call $src::compiler::nodes::NameIdentifierNode.is_1 (local.get $self))) (call $src::compiler::nodes::QNameNode.is_1 (local.get $self))) (call $src::compiler::nodes::FunctionTypeNode.is_1 (local.get $self))) (call $src::compiler::nodes::EffectMemberDeclarationNode.is_1 (local.get $self))) (call $src::compiler::nodes::ReferenceNode.is_1 (local.get $self))) (call $src::compiler::nodes::BlockNode.is_1 (local.get $self))) (call $src::compiler::nodes::MemberNode.is_1 (local.get $self))) (call $src::compiler::nodes::DecoratorNode.is_1 (local.get $self))) (call $src::compiler::nodes::ParameterNode.is_1 (local.get $self))) (call $src::compiler::nodes::FunctionNode.is_1 (local.get $self))) (call $src::compiler::nodes::VarDeclarationNode.is_1 (local.get $self))) (call $src::compiler::nodes::AssignmentNode.is_1 (local.get $self))) (call $src::compiler::nodes::ParenExpressionNode.is_1 (local.get $self))) (call $src::compiler::nodes::ImplDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::ImportDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::FunDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::EffectDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::OverloadedFunDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::VarDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::TypeDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::TraitDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::EnumDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::StructDirectiveNode.is_1 (local.get $self))) (call $src::compiler::nodes::FloatLiteralNode.is_1 (local.get $self))) (call $src::compiler::nodes::IntegerLiteralNode.is_1 (local.get $self))) (call $src::compiler::nodes::HexLiteralNode.is_1 (local.get $self))) (call $src::compiler::nodes::BooleanLiteralNode.is_1 (local.get $self))) (call $src::compiler::nodes::StringLiteralNode.is_1 (local.get $self))) (call $src::compiler::nodes::UnknownExpressionNode.is_1 (local.get $self))) (call $src::compiler::nodes::InjectedLiteralNode.is_1 (local.get $self))) (call $src::compiler::nodes::StackLiteralNode.is_1 (local.get $self))) (call $src::compiler::nodes::NameLiteralPairNode.is_1 (local.get $self))) (call $src::compiler::nodes::StackTypeNode.is_1 (local.get $self))) (call $src::compiler::nodes::StructTypeNode.is_1 (local.get $self))) (call $src::compiler::nodes::AbstractFunctionCallNode.is_1 (local.get $self))) (call $src::compiler::nodes::InjectedFunctionCallNode.is_1 (local.get $self))) (call $src::compiler::nodes::FunctionCallNode.is_1 (local.get $self))) (call $src::compiler::nodes::BinaryExpressionNode.is_1 (local.get $self))) (call $src::compiler::nodes::AsExpressionNode.is_1 (local.get $self))) (call $src::compiler::nodes::IsExpressionNode.is_1 (local.get $self))) (call $src::compiler::nodes::UnaryExpressionNode.is_1 (local.get $self))) (call $src::compiler::nodes::WasmAtomNode.is_1 (local.get $self))) (call $src::compiler::nodes::WasmExpressionNode.is_1 (local.get $self))) (call $src::compiler::nodes::IfNode.is_1 (local.get $self))) (call $src::compiler::nodes::UnionTypeNode.is_1 (local.get $self))) (call $src::compiler::nodes::IntersectionTypeNode.is_1 (local.get $self))) (call $src::compiler::nodes::StructDeclarationNode.is_1 (local.get $self))) (call $src::compiler::nodes::EffectDeclarationNode.is_1 (local.get $self))) (call $src::compiler::nodes::PatternMatcherNode.is_1 (local.get $self))) (call $src::compiler::nodes::MatchConditionNode.is_1 (local.get $self))) (call $src::compiler::nodes::MatchCaseIsNode.is_1 (local.get $self))) (call $src::compiler::nodes::MatchLiteralNode.is_1 (local.get $self))) (call $src::compiler::nodes::MatchDefaultNode.is_1 (local.get $self))) (call $src::compiler::nodes::LoopNode.is_1 (local.get $self))) (call $src::compiler::nodes::ContinueNode.is_1 (local.get $self))) (call $src::compiler::nodes::BreakNode.is_1 (local.get $self)))
    )
  )
  (func $src::compiler::nodes::CodeNode.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::compiler::nodes::CodeNode.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::nodes::CodeNode.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::compiler::nodes::CodeNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::CodeNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::EmptyNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ErrorNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::CodeNodeCons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::Document.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::PrivateModifierNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::NoModifierNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::NameIdentifierNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::QNameNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FunctionTypeNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ReferenceNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::BlockNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MemberNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::DecoratorNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ParameterNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FunctionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::VarDeclarationNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::AssignmentNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ParenExpressionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ImplDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ImportDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FunDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EffectDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::VarDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::TypeDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::TraitDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EnumDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StructDirectiveNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FloatLiteralNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::IntegerLiteralNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::HexLiteralNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::BooleanLiteralNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StringLiteralNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::UnknownExpressionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::InjectedLiteralNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StackLiteralNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::NameLiteralPairNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StackTypeNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StructTypeNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FunctionCallNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::BinaryExpressionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::AsExpressionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::IsExpressionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::UnaryExpressionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::WasmAtomNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::WasmExpressionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::IfNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::UnionTypeNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::IntersectionTypeNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StructDeclarationNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EffectDeclarationNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::PatternMatcherNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MatchConditionNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MatchCaseIsNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MatchLiteralNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MatchDefaultNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::LoopNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ContinueNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::BreakNode.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EmptyNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_6 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_6 (i32.const 52))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_6))
    )
  )
  (func $src::compiler::nodes::EmptyNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EmptyNode.EmptyNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_7 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_7 (i32.const 52))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::compiler::nodes::discriminant_7)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::EmptyNode.apply_1 (result i64)
    (call $src::compiler::nodes::EmptyNode.EmptyNode$discriminant_1)
  )
  (func $src::compiler::nodes::EmptyNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EmptyNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EmptyNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::EmptyNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::ErrorNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_8 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_8 (i32.const 53))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_8))
    )
  )
  (func $src::compiler::nodes::ErrorNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ErrorNode.ErrorNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_9 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_9 (i32.const 53))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_9)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::ErrorNode.apply_1 (param $meta i64) (param $desc i64) (result i64)
    (local $src::compiler::nodes::$ref_3 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_3 (call $src::compiler::nodes::ErrorNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::ErrorNode.property$0_2 (local.get $src::compiler::nodes::$ref_3) (local.get $meta))
      (call $src::compiler::nodes::ErrorNode.property$1_2 (local.get $src::compiler::nodes::$ref_3) (local.get $desc))
      (local.get $src::compiler::nodes::$ref_3)
    )
  )
  (func $src::compiler::nodes::ErrorNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::ErrorNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::ErrorNode.ErrorNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::ErrorNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ErrorNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ErrorNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ErrorNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::ErrorNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ErrorNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ErrorNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::ErrorNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::ErrorNode.desc_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ErrorNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::ErrorNode.desc_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ErrorNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ErrorNode.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::ErrorNode.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::ErrorNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::ErrorNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::CodeNodeCons.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_10 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_10 (i32.const 54))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_10))
    )
  )
  (func $src::compiler::nodes::CodeNodeCons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::CodeNodeCons.CodeNodeCons$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_11 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_11 (i32.const 54))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_11)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::CodeNodeCons.apply_1 (param $head i64) (param $tail i64) (result i64)
    (local $src::compiler::nodes::$ref_4 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_4 (call $src::compiler::nodes::CodeNodeCons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::CodeNodeCons.property$0_2 (local.get $src::compiler::nodes::$ref_4) (local.get $head))
      (call $src::compiler::nodes::CodeNodeCons.property$1_2 (local.get $src::compiler::nodes::$ref_4) (local.get $tail))
      (local.get $src::compiler::nodes::$ref_4)
    )
  )
  (func $src::compiler::nodes::CodeNodeCons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::CodeNodeCons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::CodeNodeCons.CodeNodeCons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::CodeNodeCons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::CodeNodeCons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::CodeNodeCons.head_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNodeCons.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::CodeNodeCons.head_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNodeCons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::CodeNodeCons.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::CodeNodeCons.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::CodeNodeCons.tail_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNodeCons.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::CodeNodeCons.tail_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNodeCons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::CodeNodeCons.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::CodeNodeCons.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::CodeNodeCons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::CodeNodeCons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::Document.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_12 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_12 (i32.const 55))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_12))
    )
  )
  (func $src::compiler::nodes::Document.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::Document.Document$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_13 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_13 (i32.const 55))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_13)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::Document.apply_1 (param $meta i64) (param $headDirective i64) (result i64)
    (local $src::compiler::nodes::$ref_5 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_5 (call $src::compiler::nodes::Document.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::Document.property$0_2 (local.get $src::compiler::nodes::$ref_5) (local.get $meta))
      (call $src::compiler::nodes::Document.property$1_2 (local.get $src::compiler::nodes::$ref_5) (local.get $headDirective))
      (local.get $src::compiler::nodes::$ref_5)
    )
  )
  (func $src::compiler::nodes::Document.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::Document.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::Document.Document$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::Document.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::Document.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::Document.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::Document.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::Document.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::Document.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::Document.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::Document.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::Document.headDirective_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::Document.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::Document.headDirective_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::Document.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::Document.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::Document.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::Document.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::Document.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::PrivateModifierNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_14 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_14 (i32.const 56))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_14))
    )
  )
  (func $src::compiler::nodes::PrivateModifierNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::PrivateModifierNode.PrivateModifierNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_15 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_15 (i32.const 56))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_15)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::PrivateModifierNode.apply_1 (param $meta i64) (result i64)
    (local $src::compiler::nodes::$ref_6 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_6 (call $src::compiler::nodes::PrivateModifierNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::nodes::PrivateModifierNode.property$0_2 (local.get $src::compiler::nodes::$ref_6) (local.get $meta))
      (local.get $src::compiler::nodes::$ref_6)
    )
  )
  (func $src::compiler::nodes::PrivateModifierNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::PrivateModifierNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::PrivateModifierNode.PrivateModifierNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::PrivateModifierNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::PrivateModifierNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::PrivateModifierNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::PrivateModifierNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::PrivateModifierNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::PrivateModifierNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::PrivateModifierNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::PrivateModifierNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::PrivateModifierNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::PrivateModifierNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::NoModifierNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_16 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_16 (i32.const 57))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_16))
    )
  )
  (func $src::compiler::nodes::NoModifierNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::NoModifierNode.NoModifierNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_17 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_17 (i32.const 57))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_17)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::NoModifierNode.apply_1 (param $meta i64) (result i64)
    (local $src::compiler::nodes::$ref_7 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_7 (call $src::compiler::nodes::NoModifierNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::nodes::NoModifierNode.property$0_2 (local.get $src::compiler::nodes::$ref_7) (local.get $meta))
      (local.get $src::compiler::nodes::$ref_7)
    )
  )
  (func $src::compiler::nodes::NoModifierNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::NoModifierNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::NoModifierNode.NoModifierNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::NoModifierNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::NoModifierNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::NoModifierNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NoModifierNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::NoModifierNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NoModifierNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NoModifierNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::NoModifierNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::NoModifierNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::NoModifierNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::NameIdentifierNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_18 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_18 (i32.const 58))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_18))
    )
  )
  (func $src::compiler::nodes::NameIdentifierNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::NameIdentifierNode.NameIdentifierNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_19 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_19 (i32.const 58))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_19)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::NameIdentifierNode.apply_1 (param $meta i64) (param $name i64) (result i64)
    (local $src::compiler::nodes::$ref_8 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_8 (call $src::compiler::nodes::NameIdentifierNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::NameIdentifierNode.property$0_2 (local.get $src::compiler::nodes::$ref_8) (local.get $meta))
      (call $src::compiler::nodes::NameIdentifierNode.property$1_2 (local.get $src::compiler::nodes::$ref_8) (local.get $name))
      (local.get $src::compiler::nodes::$ref_8)
    )
  )
  (func $src::compiler::nodes::NameIdentifierNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::NameIdentifierNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::NameIdentifierNode.NameIdentifierNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::NameIdentifierNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::NameIdentifierNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::NameIdentifierNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameIdentifierNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::NameIdentifierNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameIdentifierNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NameIdentifierNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::NameIdentifierNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::NameIdentifierNode.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameIdentifierNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::NameIdentifierNode.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameIdentifierNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NameIdentifierNode.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::NameIdentifierNode.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::NameIdentifierNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::NameIdentifierNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::QNameNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_20 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_20 (i32.const 59))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_20))
    )
  )
  (func $src::compiler::nodes::QNameNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::QNameNode.QNameNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_21 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_21 (i32.const 59))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_21)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::QNameNode.apply_1 (param $meta i64) (param $names i64) (result i64)
    (local $src::compiler::nodes::$ref_9 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_9 (call $src::compiler::nodes::QNameNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::QNameNode.property$0_2 (local.get $src::compiler::nodes::$ref_9) (local.get $meta))
      (call $src::compiler::nodes::QNameNode.property$1_2 (local.get $src::compiler::nodes::$ref_9) (local.get $names))
      (local.get $src::compiler::nodes::$ref_9)
    )
  )
  (func $src::compiler::nodes::QNameNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::QNameNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::QNameNode.QNameNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::QNameNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::QNameNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::QNameNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::QNameNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::QNameNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::QNameNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::QNameNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::QNameNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::QNameNode.names_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::QNameNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::QNameNode.names_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::QNameNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::QNameNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::QNameNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::QNameNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::QNameNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::FunctionTypeNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_22 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_22 (i32.const 60))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_22))
    )
  )
  (func $src::compiler::nodes::FunctionTypeNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FunctionTypeNode.FunctionTypeNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_23 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_23 (i32.const 60))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_23)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::FunctionTypeNode.apply_1 (param $meta i64) (param $parameters i64) (param $returnType i64) (param $effect i64) (result i64)
    (local $src::compiler::nodes::$ref_10 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_10 (call $src::compiler::nodes::FunctionTypeNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::FunctionTypeNode.property$0_2 (local.get $src::compiler::nodes::$ref_10) (local.get $meta))
      (call $src::compiler::nodes::FunctionTypeNode.property$1_2 (local.get $src::compiler::nodes::$ref_10) (local.get $parameters))
      (call $src::compiler::nodes::FunctionTypeNode.property$2_2 (local.get $src::compiler::nodes::$ref_10) (local.get $returnType))
      (call $src::compiler::nodes::FunctionTypeNode.property$3_2 (local.get $src::compiler::nodes::$ref_10) (local.get $effect))
      (local.get $src::compiler::nodes::$ref_10)
    )
  )
  (func $src::compiler::nodes::FunctionTypeNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::FunctionTypeNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::FunctionTypeNode.FunctionTypeNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::FunctionTypeNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FunctionTypeNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FunctionTypeNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionTypeNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionTypeNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionTypeNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionTypeNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::FunctionTypeNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::FunctionTypeNode.parameters_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionTypeNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionTypeNode.parameters_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionTypeNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionTypeNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::FunctionTypeNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::FunctionTypeNode.returnType_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionTypeNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionTypeNode.returnType_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionTypeNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionTypeNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::FunctionTypeNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::FunctionTypeNode.effect_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionTypeNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionTypeNode.effect_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionTypeNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionTypeNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::FunctionTypeNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::FunctionTypeNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::FunctionTypeNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_24 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_24 (i32.const 61))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_24))
    )
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.EffectMemberDeclarationNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_25 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_25 (i32.const 61))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_25)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.apply_1 (param $meta i64) (result i64)
    (local $src::compiler::nodes::$ref_11 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_11 (call $src::compiler::nodes::EffectMemberDeclarationNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::nodes::EffectMemberDeclarationNode.property$0_2 (local.get $src::compiler::nodes::$ref_11) (local.get $meta))
      (local.get $src::compiler::nodes::$ref_11)
    )
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::EffectMemberDeclarationNode.EffectMemberDeclarationNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EffectMemberDeclarationNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EffectMemberDeclarationNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::EffectMemberDeclarationNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::ReferenceNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_26 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_26 (i32.const 62))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_26))
    )
  )
  (func $src::compiler::nodes::ReferenceNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ReferenceNode.ReferenceNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_27 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_27 (i32.const 62))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_27)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::ReferenceNode.apply_1 (param $meta i64) (param $variable i64) (result i64)
    (local $src::compiler::nodes::$ref_12 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_12 (call $src::compiler::nodes::ReferenceNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::ReferenceNode.property$0_2 (local.get $src::compiler::nodes::$ref_12) (local.get $meta))
      (call $src::compiler::nodes::ReferenceNode.property$1_2 (local.get $src::compiler::nodes::$ref_12) (local.get $variable))
      (local.get $src::compiler::nodes::$ref_12)
    )
  )
  (func $src::compiler::nodes::ReferenceNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::ReferenceNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::ReferenceNode.ReferenceNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::ReferenceNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ReferenceNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ReferenceNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ReferenceNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::ReferenceNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ReferenceNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ReferenceNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::ReferenceNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::ReferenceNode.variable_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ReferenceNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::ReferenceNode.variable_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ReferenceNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ReferenceNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ReferenceNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::ReferenceNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ReferenceNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::ReferenceNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::ReferenceNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::ReferenceNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::ReferenceNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::BlockNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_28 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_28 (i32.const 63))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_28))
    )
  )
  (func $src::compiler::nodes::BlockNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::BlockNode.BlockNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_29 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_29 (i32.const 63))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_29)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::BlockNode.apply_1 (param $meta i64) (param $headStatement i64) (result i64)
    (local $src::compiler::nodes::$ref_13 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_13 (call $src::compiler::nodes::BlockNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::BlockNode.property$0_2 (local.get $src::compiler::nodes::$ref_13) (local.get $meta))
      (call $src::compiler::nodes::BlockNode.property$1_2 (local.get $src::compiler::nodes::$ref_13) (local.get $headStatement))
      (local.get $src::compiler::nodes::$ref_13)
    )
  )
  (func $src::compiler::nodes::BlockNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::BlockNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::BlockNode.BlockNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::BlockNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::BlockNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::BlockNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BlockNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::BlockNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BlockNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BlockNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::BlockNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::BlockNode.headStatement_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BlockNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::BlockNode.headStatement_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BlockNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BlockNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::BlockNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::BlockNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::BlockNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::MemberNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_30 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_30 (i32.const 64))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_30))
    )
  )
  (func $src::compiler::nodes::MemberNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MemberNode.MemberNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_31 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_31 (i32.const 64))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_31)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::MemberNode.apply_1 (param $meta i64) (param $lhs i64) (param $operator i64) (param $rhs i64) (result i64)
    (local $src::compiler::nodes::$ref_14 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_14 (call $src::compiler::nodes::MemberNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::MemberNode.property$0_2 (local.get $src::compiler::nodes::$ref_14) (local.get $meta))
      (call $src::compiler::nodes::MemberNode.property$1_2 (local.get $src::compiler::nodes::$ref_14) (local.get $lhs))
      (call $src::compiler::nodes::MemberNode.property$2_2 (local.get $src::compiler::nodes::$ref_14) (local.get $operator))
      (call $src::compiler::nodes::MemberNode.property$3_2 (local.get $src::compiler::nodes::$ref_14) (local.get $rhs))
      (local.get $src::compiler::nodes::$ref_14)
    )
  )
  (func $src::compiler::nodes::MemberNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::MemberNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::MemberNode.MemberNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::MemberNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MemberNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MemberNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MemberNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::MemberNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MemberNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MemberNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::MemberNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::MemberNode.lhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MemberNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::MemberNode.lhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MemberNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MemberNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::MemberNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::MemberNode.operator_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MemberNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::MemberNode.operator_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MemberNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MemberNode.property$2_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::MemberNode.property$2_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::MemberNode.rhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MemberNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::MemberNode.rhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MemberNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MemberNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::MemberNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::MemberNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::MemberNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::DecoratorNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_32 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_32 (i32.const 65))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_32))
    )
  )
  (func $src::compiler::nodes::DecoratorNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::DecoratorNode.DecoratorNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_33 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_33 (i32.const 65))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_33)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::DecoratorNode.apply_1 (param $meta i64) (param $decoratorName i64) (param $headArgument i64) (result i64)
    (local $src::compiler::nodes::$ref_15 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_15 (call $src::compiler::nodes::DecoratorNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::DecoratorNode.property$0_2 (local.get $src::compiler::nodes::$ref_15) (local.get $meta))
      (call $src::compiler::nodes::DecoratorNode.property$1_2 (local.get $src::compiler::nodes::$ref_15) (local.get $decoratorName))
      (call $src::compiler::nodes::DecoratorNode.property$2_2 (local.get $src::compiler::nodes::$ref_15) (local.get $headArgument))
      (local.get $src::compiler::nodes::$ref_15)
    )
  )
  (func $src::compiler::nodes::DecoratorNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::DecoratorNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::DecoratorNode.DecoratorNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::DecoratorNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::DecoratorNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::DecoratorNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::DecoratorNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::DecoratorNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::DecoratorNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::DecoratorNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::DecoratorNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::DecoratorNode.decoratorName_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::DecoratorNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::DecoratorNode.decoratorName_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::DecoratorNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::DecoratorNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::DecoratorNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::DecoratorNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::DecoratorNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::DecoratorNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::DecoratorNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::DecoratorNode.headArgument_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::DecoratorNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::DecoratorNode.headArgument_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::DecoratorNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::DecoratorNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::DecoratorNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::DecoratorNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::DecoratorNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::ParameterNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_34 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_34 (i32.const 66))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_34))
    )
  )
  (func $src::compiler::nodes::ParameterNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ParameterNode.ParameterNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_35 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_35 (i32.const 66))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_35)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::ParameterNode.apply_1 (param $meta i64) (param $parameterName i64) (param $parameterType i64) (result i64)
    (local $src::compiler::nodes::$ref_16 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_16 (call $src::compiler::nodes::ParameterNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::ParameterNode.property$0_2 (local.get $src::compiler::nodes::$ref_16) (local.get $meta))
      (call $src::compiler::nodes::ParameterNode.property$1_2 (local.get $src::compiler::nodes::$ref_16) (local.get $parameterName))
      (call $src::compiler::nodes::ParameterNode.property$2_2 (local.get $src::compiler::nodes::$ref_16) (local.get $parameterType))
      (local.get $src::compiler::nodes::$ref_16)
    )
  )
  (func $src::compiler::nodes::ParameterNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::ParameterNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::ParameterNode.ParameterNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::ParameterNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ParameterNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ParameterNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ParameterNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::ParameterNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ParameterNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ParameterNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::ParameterNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::ParameterNode.parameterName_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ParameterNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::ParameterNode.parameterName_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ParameterNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ParameterNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ParameterNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::ParameterNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ParameterNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::ParameterNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::ParameterNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::ParameterNode.parameterType_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ParameterNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::ParameterNode.parameterType_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ParameterNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ParameterNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::ParameterNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::ParameterNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::ParameterNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::FunctionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_36 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_36 (i32.const 67))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_36))
    )
  )
  (func $src::compiler::nodes::FunctionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FunctionNode.FunctionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_37 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_37 (i32.const 67))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_37)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::FunctionNode.apply_1 (param $meta i64) (param $functionName i64) (param $headParameter i64) (param $returnType i64) (param $body i64) (result i64)
    (local $src::compiler::nodes::$ref_17 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_17 (call $src::compiler::nodes::FunctionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 40))))
      (call $src::compiler::nodes::FunctionNode.property$0_2 (local.get $src::compiler::nodes::$ref_17) (local.get $meta))
      (call $src::compiler::nodes::FunctionNode.property$1_2 (local.get $src::compiler::nodes::$ref_17) (local.get $functionName))
      (call $src::compiler::nodes::FunctionNode.property$2_2 (local.get $src::compiler::nodes::$ref_17) (local.get $headParameter))
      (call $src::compiler::nodes::FunctionNode.property$3_2 (local.get $src::compiler::nodes::$ref_17) (local.get $returnType))
      (call $src::compiler::nodes::FunctionNode.property$4_2 (local.get $src::compiler::nodes::$ref_17) (local.get $body))
      (local.get $src::compiler::nodes::$ref_17)
    )
  )
  (func $src::compiler::nodes::FunctionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::FunctionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::FunctionNode.FunctionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::FunctionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FunctionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FunctionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::FunctionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::FunctionNode.functionName_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionNode.functionName_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::FunctionNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::FunctionNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::FunctionNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionNode.headParameter_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionNode.headParameter_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::FunctionNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::FunctionNode.returnType_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionNode.returnType_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::FunctionNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::FunctionNode.body_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionNode.property$4_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionNode.body_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionNode.property$4_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionNode.property$4_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 32))
  )
  (func $src::compiler::nodes::FunctionNode.property$4_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 32))
  )
  (func $src::compiler::nodes::FunctionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::FunctionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::VarDeclarationNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_38 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_38 (i32.const 68))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_38))
    )
  )
  (func $src::compiler::nodes::VarDeclarationNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::VarDeclarationNode.VarDeclarationNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_39 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_39 (i32.const 68))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_39)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::VarDeclarationNode.apply_1 (param $meta i64) (param $name i64) (param $typeDecl i64) (param $value i64) (result i64)
    (local $src::compiler::nodes::$ref_18 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_18 (call $src::compiler::nodes::VarDeclarationNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::VarDeclarationNode.property$0_2 (local.get $src::compiler::nodes::$ref_18) (local.get $meta))
      (call $src::compiler::nodes::VarDeclarationNode.property$1_2 (local.get $src::compiler::nodes::$ref_18) (local.get $name))
      (call $src::compiler::nodes::VarDeclarationNode.property$2_2 (local.get $src::compiler::nodes::$ref_18) (local.get $typeDecl))
      (call $src::compiler::nodes::VarDeclarationNode.property$3_2 (local.get $src::compiler::nodes::$ref_18) (local.get $value))
      (local.get $src::compiler::nodes::$ref_18)
    )
  )
  (func $src::compiler::nodes::VarDeclarationNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::VarDeclarationNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::VarDeclarationNode.VarDeclarationNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::VarDeclarationNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::VarDeclarationNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::VarDeclarationNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDeclarationNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::VarDeclarationNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDeclarationNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::VarDeclarationNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::VarDeclarationNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::VarDeclarationNode.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDeclarationNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::VarDeclarationNode.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDeclarationNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::VarDeclarationNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDeclarationNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::VarDeclarationNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDeclarationNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::VarDeclarationNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::VarDeclarationNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::VarDeclarationNode.typeDecl_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDeclarationNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::VarDeclarationNode.typeDecl_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDeclarationNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::VarDeclarationNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::VarDeclarationNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::VarDeclarationNode.value_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDeclarationNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::VarDeclarationNode.value_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDeclarationNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::VarDeclarationNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::VarDeclarationNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::VarDeclarationNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::VarDeclarationNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::AssignmentNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_40 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_40 (i32.const 69))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_40))
    )
  )
  (func $src::compiler::nodes::AssignmentNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::AssignmentNode.AssignmentNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_41 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_41 (i32.const 69))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_41)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::AssignmentNode.apply_1 (param $meta i64) (param $lhs i64) (param $rhs i64) (result i64)
    (local $src::compiler::nodes::$ref_19 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_19 (call $src::compiler::nodes::AssignmentNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::AssignmentNode.property$0_2 (local.get $src::compiler::nodes::$ref_19) (local.get $meta))
      (call $src::compiler::nodes::AssignmentNode.property$1_2 (local.get $src::compiler::nodes::$ref_19) (local.get $lhs))
      (call $src::compiler::nodes::AssignmentNode.property$2_2 (local.get $src::compiler::nodes::$ref_19) (local.get $rhs))
      (local.get $src::compiler::nodes::$ref_19)
    )
  )
  (func $src::compiler::nodes::AssignmentNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::AssignmentNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::AssignmentNode.AssignmentNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::AssignmentNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::AssignmentNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::AssignmentNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AssignmentNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::AssignmentNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AssignmentNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AssignmentNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::AssignmentNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::AssignmentNode.lhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AssignmentNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::AssignmentNode.lhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AssignmentNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AssignmentNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::AssignmentNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::AssignmentNode.rhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AssignmentNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::AssignmentNode.rhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AssignmentNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AssignmentNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::AssignmentNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::AssignmentNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::AssignmentNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::ParenExpressionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_42 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_42 (i32.const 70))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_42))
    )
  )
  (func $src::compiler::nodes::ParenExpressionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ParenExpressionNode.ParenExpressionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_43 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_43 (i32.const 70))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_43)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::ParenExpressionNode.apply_1 (param $meta i64) (param $expression i64) (result i64)
    (local $src::compiler::nodes::$ref_20 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_20 (call $src::compiler::nodes::ParenExpressionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::ParenExpressionNode.property$0_2 (local.get $src::compiler::nodes::$ref_20) (local.get $meta))
      (call $src::compiler::nodes::ParenExpressionNode.property$1_2 (local.get $src::compiler::nodes::$ref_20) (local.get $expression))
      (local.get $src::compiler::nodes::$ref_20)
    )
  )
  (func $src::compiler::nodes::ParenExpressionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::ParenExpressionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::ParenExpressionNode.ParenExpressionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::ParenExpressionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ParenExpressionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ParenExpressionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ParenExpressionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::ParenExpressionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ParenExpressionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ParenExpressionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::ParenExpressionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::ParenExpressionNode.expression_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ParenExpressionNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::ParenExpressionNode.expression_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ParenExpressionNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ParenExpressionNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::ParenExpressionNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::ParenExpressionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::ParenExpressionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_44 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_44 (i32.const 71))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_44))
    )
  )
  (func $src::compiler::nodes::ImplDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ImplDirectiveNode.ImplDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_45 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_45 (i32.const 71))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_45)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::ImplDirectiveNode.apply_1 (param $meta i64) (param $baseImpl i64) (param $targetImpl i64) (param $headDirective i64) (result i64)
    (local $src::compiler::nodes::$ref_21 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_21 (call $src::compiler::nodes::ImplDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::ImplDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_21) (local.get $meta))
      (call $src::compiler::nodes::ImplDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_21) (local.get $baseImpl))
      (call $src::compiler::nodes::ImplDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_21) (local.get $targetImpl))
      (call $src::compiler::nodes::ImplDirectiveNode.property$3_2 (local.get $src::compiler::nodes::$ref_21) (local.get $headDirective))
      (local.get $src::compiler::nodes::$ref_21)
    )
  )
  (func $src::compiler::nodes::ImplDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::ImplDirectiveNode.ImplDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImplDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImplDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.baseImpl_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImplDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.baseImpl_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImplDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImplDirectiveNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImplDirectiveNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.targetImpl_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImplDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.targetImpl_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImplDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImplDirectiveNode.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImplDirectiveNode.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.headDirective_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImplDirectiveNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.headDirective_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImplDirectiveNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::ImplDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_46 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_46 (i32.const 72))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_46))
    )
  )
  (func $src::compiler::nodes::ImportDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ImportDirectiveNode.ImportDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_47 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_47 (i32.const 72))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_47)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::ImportDirectiveNode.apply_1 (param $meta i64) (param $module i64) (param $alias i64) (result i64)
    (local $src::compiler::nodes::$ref_22 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_22 (call $src::compiler::nodes::ImportDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::ImportDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_22) (local.get $meta))
      (call $src::compiler::nodes::ImportDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_22) (local.get $module))
      (call $src::compiler::nodes::ImportDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_22) (local.get $alias))
      (local.get $src::compiler::nodes::$ref_22)
    )
  )
  (func $src::compiler::nodes::ImportDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::ImportDirectiveNode.ImportDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImportDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImportDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.module_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImportDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.module_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImportDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImportDirectiveNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImportDirectiveNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.alias_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImportDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.alias_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImportDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ImportDirectiveNode.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ImportDirectiveNode.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::ImportDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::FunDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_48 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_48 (i32.const 73))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_48))
    )
  )
  (func $src::compiler::nodes::FunDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FunDirectiveNode.FunDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_49 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_49 (i32.const 73))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_49)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::FunDirectiveNode.apply_1 (param $meta i64) (param $headDecorator i64) (param $modifier i64) (param $function i64) (result i64)
    (local $src::compiler::nodes::$ref_23 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_23 (call $src::compiler::nodes::FunDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::FunDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_23) (local.get $meta))
      (call $src::compiler::nodes::FunDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_23) (local.get $headDecorator))
      (call $src::compiler::nodes::FunDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_23) (local.get $modifier))
      (call $src::compiler::nodes::FunDirectiveNode.property$3_2 (local.get $src::compiler::nodes::$ref_23) (local.get $function))
      (local.get $src::compiler::nodes::$ref_23)
    )
  )
  (func $src::compiler::nodes::FunDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::FunDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::FunDirectiveNode.FunDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::FunDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FunDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FunDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::FunDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::FunDirectiveNode.headDecorator_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunDirectiveNode.headDecorator_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::FunDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::FunDirectiveNode.modifier_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunDirectiveNode.modifier_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::FunDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::FunDirectiveNode.function_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunDirectiveNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunDirectiveNode.function_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunDirectiveNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunDirectiveNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunDirectiveNode.loadPropertyWithOffset$3_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::FunDirectiveNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunDirectiveNode.storePropertyWithOffset$3_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::FunDirectiveNode.loadPropertyWithOffset$3_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::FunDirectiveNode.storePropertyWithOffset$3_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::FunDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::FunDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_50 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_50 (i32.const 74))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_50))
    )
  )
  (func $src::compiler::nodes::EffectDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EffectDirectiveNode.EffectDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_51 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_51 (i32.const 74))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_51)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::EffectDirectiveNode.apply_1 (param $meta i64) (param $effectDecl i64) (result i64)
    (local $src::compiler::nodes::$ref_24 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_24 (call $src::compiler::nodes::EffectDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::EffectDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_24) (local.get $meta))
      (call $src::compiler::nodes::EffectDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_24) (local.get $effectDecl))
      (local.get $src::compiler::nodes::$ref_24)
    )
  )
  (func $src::compiler::nodes::EffectDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::EffectDirectiveNode.EffectDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EffectDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EffectDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.effectDecl_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EffectDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.effectDecl_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EffectDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EffectDeclarationNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EffectDeclarationNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::EffectDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_52 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_52 (i32.const 75))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_52))
    )
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.OverloadedFunDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_53 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_53 (i32.const 75))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_53)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.apply_1 (param $meta i64) (param $functionName i64) (param $headFun i64) (result i64)
    (local $src::compiler::nodes::$ref_25 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_25 (call $src::compiler::nodes::OverloadedFunDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_25) (local.get $meta))
      (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_25) (local.get $functionName))
      (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_25) (local.get $headFun))
      (local.get $src::compiler::nodes::$ref_25)
    )
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::OverloadedFunDirectiveNode.OverloadedFunDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.functionName_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.functionName_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameIdentifierNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameIdentifierNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.headFun_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.headFun_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::OverloadedFunDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::OverloadedFunDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::VarDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_54 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_54 (i32.const 76))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_54))
    )
  )
  (func $src::compiler::nodes::VarDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::VarDirectiveNode.VarDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_55 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_55 (i32.const 76))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_55)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::VarDirectiveNode.apply_1 (param $meta i64) (param $modifier i64) (param $decl i64) (result i64)
    (local $src::compiler::nodes::$ref_26 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_26 (call $src::compiler::nodes::VarDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::VarDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_26) (local.get $meta))
      (call $src::compiler::nodes::VarDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_26) (local.get $modifier))
      (call $src::compiler::nodes::VarDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_26) (local.get $decl))
      (local.get $src::compiler::nodes::$ref_26)
    )
  )
  (func $src::compiler::nodes::VarDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::VarDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::VarDirectiveNode.VarDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::VarDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::VarDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::VarDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::VarDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::VarDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::VarDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::VarDirectiveNode.modifier_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::VarDirectiveNode.modifier_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::VarDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::VarDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::VarDirectiveNode.decl_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::VarDirectiveNode.decl_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::VarDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::VarDirectiveNode.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::VarDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::VarDirectiveNode.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::VarDirectiveNode.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::VarDirectiveNode.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::VarDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::VarDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_56 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_56 (i32.const 77))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_56))
    )
  )
  (func $src::compiler::nodes::TypeDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::TypeDirectiveNode.TypeDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_57 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_57 (i32.const 77))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_57)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::TypeDirectiveNode.apply_1 (param $meta i64) (param $modifier i64) (param $name i64) (param $declType i64) (result i64)
    (local $src::compiler::nodes::$ref_27 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_27 (call $src::compiler::nodes::TypeDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::TypeDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_27) (local.get $meta))
      (call $src::compiler::nodes::TypeDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_27) (local.get $modifier))
      (call $src::compiler::nodes::TypeDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_27) (local.get $name))
      (call $src::compiler::nodes::TypeDirectiveNode.property$3_2 (local.get $src::compiler::nodes::$ref_27) (local.get $declType))
      (local.get $src::compiler::nodes::$ref_27)
    )
  )
  (func $src::compiler::nodes::TypeDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::TypeDirectiveNode.TypeDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TypeDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TypeDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.modifier_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TypeDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.modifier_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TypeDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TypeDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TypeDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TypeDirectiveNode.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TypeDirectiveNode.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.declType_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TypeDirectiveNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.declType_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TypeDirectiveNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::TypeDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_58 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_58 (i32.const 78))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_58))
    )
  )
  (func $src::compiler::nodes::TraitDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::TraitDirectiveNode.TraitDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_59 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_59 (i32.const 78))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_59)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::TraitDirectiveNode.apply_1 (param $meta i64) (param $modifier i64) (param $name i64) (param $headDirective i64) (result i64)
    (local $src::compiler::nodes::$ref_28 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_28 (call $src::compiler::nodes::TraitDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::TraitDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_28) (local.get $meta))
      (call $src::compiler::nodes::TraitDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_28) (local.get $modifier))
      (call $src::compiler::nodes::TraitDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_28) (local.get $name))
      (call $src::compiler::nodes::TraitDirectiveNode.property$3_2 (local.get $src::compiler::nodes::$ref_28) (local.get $headDirective))
      (local.get $src::compiler::nodes::$ref_28)
    )
  )
  (func $src::compiler::nodes::TraitDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::TraitDirectiveNode.TraitDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TraitDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TraitDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.modifier_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TraitDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.modifier_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TraitDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TraitDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TraitDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TraitDirectiveNode.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TraitDirectiveNode.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.headDirective_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::TraitDirectiveNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.headDirective_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::TraitDirectiveNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::TraitDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_60 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_60 (i32.const 79))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_60))
    )
  )
  (func $src::compiler::nodes::EnumDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EnumDirectiveNode.EnumDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_61 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_61 (i32.const 79))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_61)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::EnumDirectiveNode.apply_1 (param $meta i64) (param $modifier i64) (param $name i64) (param $headDeclaration i64) (result i64)
    (local $src::compiler::nodes::$ref_29 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_29 (call $src::compiler::nodes::EnumDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::EnumDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_29) (local.get $meta))
      (call $src::compiler::nodes::EnumDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_29) (local.get $modifier))
      (call $src::compiler::nodes::EnumDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_29) (local.get $name))
      (call $src::compiler::nodes::EnumDirectiveNode.property$3_2 (local.get $src::compiler::nodes::$ref_29) (local.get $headDeclaration))
      (local.get $src::compiler::nodes::$ref_29)
    )
  )
  (func $src::compiler::nodes::EnumDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::EnumDirectiveNode.EnumDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EnumDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EnumDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.modifier_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EnumDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.modifier_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EnumDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EnumDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EnumDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EnumDirectiveNode.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EnumDirectiveNode.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.headDeclaration_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EnumDirectiveNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.headDeclaration_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EnumDirectiveNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::EnumDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::StructDirectiveNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_62 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_62 (i32.const 80))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_62))
    )
  )
  (func $src::compiler::nodes::StructDirectiveNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StructDirectiveNode.StructDirectiveNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_63 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_63 (i32.const 80))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_63)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::StructDirectiveNode.apply_1 (param $meta i64) (param $modifier i64) (param $decl i64) (result i64)
    (local $src::compiler::nodes::$ref_30 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_30 (call $src::compiler::nodes::StructDirectiveNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::StructDirectiveNode.property$0_2 (local.get $src::compiler::nodes::$ref_30) (local.get $meta))
      (call $src::compiler::nodes::StructDirectiveNode.property$1_2 (local.get $src::compiler::nodes::$ref_30) (local.get $modifier))
      (call $src::compiler::nodes::StructDirectiveNode.property$2_2 (local.get $src::compiler::nodes::$ref_30) (local.get $decl))
      (local.get $src::compiler::nodes::$ref_30)
    )
  )
  (func $src::compiler::nodes::StructDirectiveNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::StructDirectiveNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::StructDirectiveNode.StructDirectiveNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::StructDirectiveNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StructDirectiveNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StructDirectiveNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructDirectiveNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::StructDirectiveNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructDirectiveNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StructDirectiveNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::StructDirectiveNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::StructDirectiveNode.modifier_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructDirectiveNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::StructDirectiveNode.modifier_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructDirectiveNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StructDirectiveNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::StructDirectiveNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::StructDirectiveNode.decl_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructDirectiveNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::StructDirectiveNode.decl_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructDirectiveNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StructDirectiveNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructDirectiveNode.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::StructDirectiveNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructDirectiveNode.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::StructDirectiveNode.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::StructDirectiveNode.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::StructDirectiveNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::StructDirectiveNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::FloatLiteralNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_64 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_64 (i32.const 81))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_64))
    )
  )
  (func $src::compiler::nodes::FloatLiteralNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FloatLiteralNode.FloatLiteralNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_65 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_65 (i32.const 81))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_65)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::FloatLiteralNode.apply_1 (param $meta i64) (param $value i64) (result i64)
    (local $src::compiler::nodes::$ref_31 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_31 (call $src::compiler::nodes::FloatLiteralNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::FloatLiteralNode.property$0_2 (local.get $src::compiler::nodes::$ref_31) (local.get $meta))
      (call $src::compiler::nodes::FloatLiteralNode.property$1_2 (local.get $src::compiler::nodes::$ref_31) (local.get $value))
      (local.get $src::compiler::nodes::$ref_31)
    )
  )
  (func $src::compiler::nodes::FloatLiteralNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::FloatLiteralNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::FloatLiteralNode.FloatLiteralNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::FloatLiteralNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FloatLiteralNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FloatLiteralNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FloatLiteralNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::FloatLiteralNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FloatLiteralNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FloatLiteralNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::FloatLiteralNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::FloatLiteralNode.value_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FloatLiteralNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::FloatLiteralNode.value_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FloatLiteralNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FloatLiteralNode.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::FloatLiteralNode.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::FloatLiteralNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::FloatLiteralNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_66 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_66 (i32.const 82))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_66))
    )
  )
  (func $src::compiler::nodes::IntegerLiteralNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::IntegerLiteralNode.IntegerLiteralNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_67 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_67 (i32.const 82))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_67)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::IntegerLiteralNode.apply_1 (param $meta i64) (param $value i64) (result i64)
    (local $src::compiler::nodes::$ref_32 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_32 (call $src::compiler::nodes::IntegerLiteralNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::IntegerLiteralNode.property$0_2 (local.get $src::compiler::nodes::$ref_32) (local.get $meta))
      (call $src::compiler::nodes::IntegerLiteralNode.property$1_2 (local.get $src::compiler::nodes::$ref_32) (local.get $value))
      (local.get $src::compiler::nodes::$ref_32)
    )
  )
  (func $src::compiler::nodes::IntegerLiteralNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::IntegerLiteralNode.IntegerLiteralNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IntegerLiteralNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IntegerLiteralNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.value_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IntegerLiteralNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.value_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IntegerLiteralNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::IntegerLiteralNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::HexLiteralNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_68 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_68 (i32.const 83))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_68))
    )
  )
  (func $src::compiler::nodes::HexLiteralNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::HexLiteralNode.HexLiteralNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_69 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_69 (i32.const 83))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_69)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::HexLiteralNode.apply_1 (param $meta i64) (param $value i64) (result i64)
    (local $src::compiler::nodes::$ref_33 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_33 (call $src::compiler::nodes::HexLiteralNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::HexLiteralNode.property$0_2 (local.get $src::compiler::nodes::$ref_33) (local.get $meta))
      (call $src::compiler::nodes::HexLiteralNode.property$1_2 (local.get $src::compiler::nodes::$ref_33) (local.get $value))
      (local.get $src::compiler::nodes::$ref_33)
    )
  )
  (func $src::compiler::nodes::HexLiteralNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::HexLiteralNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::HexLiteralNode.HexLiteralNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::HexLiteralNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::HexLiteralNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::HexLiteralNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::HexLiteralNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::HexLiteralNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::HexLiteralNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::HexLiteralNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::HexLiteralNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::HexLiteralNode.value_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::HexLiteralNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::HexLiteralNode.value_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::HexLiteralNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::HexLiteralNode.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::HexLiteralNode.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::HexLiteralNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::HexLiteralNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_70 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_70 (i32.const 84))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_70))
    )
  )
  (func $src::compiler::nodes::BooleanLiteralNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::BooleanLiteralNode.BooleanLiteralNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_71 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_71 (i32.const 84))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_71)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::BooleanLiteralNode.apply_1 (param $meta i64) (param $value i32) (result i64)
    (local $src::compiler::nodes::$ref_34 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_34 (call $src::compiler::nodes::BooleanLiteralNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 9))))
      (call $src::compiler::nodes::BooleanLiteralNode.property$0_2 (local.get $src::compiler::nodes::$ref_34) (local.get $meta))
      (call $src::compiler::nodes::BooleanLiteralNode.property$1_2 (local.get $src::compiler::nodes::$ref_34) (local.get $value))
      (local.get $src::compiler::nodes::$ref_34)
    )
  )
  (func $src::compiler::nodes::BooleanLiteralNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::BooleanLiteralNode.BooleanLiteralNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BooleanLiteralNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BooleanLiteralNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.value_1 (param $self i64) (result i32)
    (call $src::compiler::nodes::BooleanLiteralNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.value_2 (param $self i64) (param $value i32)
    (call $src::compiler::nodes::BooleanLiteralNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.property$1_1 (param $self i64) (result i32)
    (call $system::core::boolean::boolean.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.property$1_2 (param $self i64) (param $value i32)
    (call $system::core::boolean::boolean.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::BooleanLiteralNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::StringLiteralNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_72 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_72 (i32.const 85))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_72))
    )
  )
  (func $src::compiler::nodes::StringLiteralNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StringLiteralNode.StringLiteralNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_73 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_73 (i32.const 85))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_73)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::StringLiteralNode.apply_1 (param $meta i64) (param $value i64) (result i64)
    (local $src::compiler::nodes::$ref_35 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_35 (call $src::compiler::nodes::StringLiteralNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::StringLiteralNode.property$0_2 (local.get $src::compiler::nodes::$ref_35) (local.get $meta))
      (call $src::compiler::nodes::StringLiteralNode.property$1_2 (local.get $src::compiler::nodes::$ref_35) (local.get $value))
      (local.get $src::compiler::nodes::$ref_35)
    )
  )
  (func $src::compiler::nodes::StringLiteralNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::StringLiteralNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::StringLiteralNode.StringLiteralNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::StringLiteralNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StringLiteralNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StringLiteralNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StringLiteralNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::StringLiteralNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StringLiteralNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StringLiteralNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::StringLiteralNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::StringLiteralNode.value_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StringLiteralNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::StringLiteralNode.value_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StringLiteralNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StringLiteralNode.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::StringLiteralNode.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::StringLiteralNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::StringLiteralNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_74 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_74 (i32.const 86))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_74))
    )
  )
  (func $src::compiler::nodes::UnknownExpressionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::UnknownExpressionNode.UnknownExpressionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_75 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_75 (i32.const 86))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_75)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::UnknownExpressionNode.apply_1 (param $meta i64) (result i64)
    (local $src::compiler::nodes::$ref_36 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_36 (call $src::compiler::nodes::UnknownExpressionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::nodes::UnknownExpressionNode.property$0_2 (local.get $src::compiler::nodes::$ref_36) (local.get $meta))
      (local.get $src::compiler::nodes::$ref_36)
    )
  )
  (func $src::compiler::nodes::UnknownExpressionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::UnknownExpressionNode.UnknownExpressionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::UnknownExpressionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::UnknownExpressionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::UnknownExpressionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_76 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_76 (i32.const 87))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_76))
    )
  )
  (func $src::compiler::nodes::InjectedLiteralNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::InjectedLiteralNode.InjectedLiteralNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_77 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_77 (i32.const 87))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_77)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::InjectedLiteralNode.apply_1 (param $meta i64) (result i64)
    (local $src::compiler::nodes::$ref_37 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_37 (call $src::compiler::nodes::InjectedLiteralNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::nodes::InjectedLiteralNode.property$0_2 (local.get $src::compiler::nodes::$ref_37) (local.get $meta))
      (local.get $src::compiler::nodes::$ref_37)
    )
  )
  (func $src::compiler::nodes::InjectedLiteralNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::InjectedLiteralNode.InjectedLiteralNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::InjectedLiteralNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::InjectedLiteralNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::InjectedLiteralNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::StackLiteralNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_78 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_78 (i32.const 88))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_78))
    )
  )
  (func $src::compiler::nodes::StackLiteralNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StackLiteralNode.StackLiteralNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_79 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_79 (i32.const 88))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_79)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::StackLiteralNode.apply_1 (param $meta i64) (param $headNames i64) (result i64)
    (local $src::compiler::nodes::$ref_38 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_38 (call $src::compiler::nodes::StackLiteralNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::StackLiteralNode.property$0_2 (local.get $src::compiler::nodes::$ref_38) (local.get $meta))
      (call $src::compiler::nodes::StackLiteralNode.property$1_2 (local.get $src::compiler::nodes::$ref_38) (local.get $headNames))
      (local.get $src::compiler::nodes::$ref_38)
    )
  )
  (func $src::compiler::nodes::StackLiteralNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::StackLiteralNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::StackLiteralNode.StackLiteralNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::StackLiteralNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StackLiteralNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StackLiteralNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StackLiteralNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::StackLiteralNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StackLiteralNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StackLiteralNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::StackLiteralNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::StackLiteralNode.headNames_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StackLiteralNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::StackLiteralNode.headNames_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StackLiteralNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StackLiteralNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::StackLiteralNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::StackLiteralNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::StackLiteralNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_80 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_80 (i32.const 89))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_80))
    )
  )
  (func $src::compiler::nodes::NameLiteralPairNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::NameLiteralPairNode.NameLiteralPairNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_81 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_81 (i32.const 89))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_81)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::NameLiteralPairNode.apply_1 (param $meta i64) (param $name i64) (param $value i64) (result i64)
    (local $src::compiler::nodes::$ref_39 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_39 (call $src::compiler::nodes::NameLiteralPairNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::NameLiteralPairNode.property$0_2 (local.get $src::compiler::nodes::$ref_39) (local.get $meta))
      (call $src::compiler::nodes::NameLiteralPairNode.property$1_2 (local.get $src::compiler::nodes::$ref_39) (local.get $name))
      (call $src::compiler::nodes::NameLiteralPairNode.property$2_2 (local.get $src::compiler::nodes::$ref_39) (local.get $value))
      (local.get $src::compiler::nodes::$ref_39)
    )
  )
  (func $src::compiler::nodes::NameLiteralPairNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::NameLiteralPairNode.NameLiteralPairNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameLiteralPairNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameLiteralPairNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameLiteralPairNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameLiteralPairNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameLiteralPairNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameLiteralPairNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.value_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameLiteralPairNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.value_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameLiteralPairNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::NameLiteralPairNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::StackTypeNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_82 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_82 (i32.const 90))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_82))
    )
  )
  (func $src::compiler::nodes::StackTypeNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StackTypeNode.StackTypeNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_83 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_83 (i32.const 90))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_83)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::StackTypeNode.apply_1 (param $meta i64) (param $headMeta i64) (result i64)
    (local $src::compiler::nodes::$ref_40 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_40 (call $src::compiler::nodes::StackTypeNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::StackTypeNode.property$0_2 (local.get $src::compiler::nodes::$ref_40) (local.get $meta))
      (call $src::compiler::nodes::StackTypeNode.property$1_2 (local.get $src::compiler::nodes::$ref_40) (local.get $headMeta))
      (local.get $src::compiler::nodes::$ref_40)
    )
  )
  (func $src::compiler::nodes::StackTypeNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::StackTypeNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::StackTypeNode.StackTypeNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::StackTypeNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StackTypeNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StackTypeNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StackTypeNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::StackTypeNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StackTypeNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StackTypeNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::StackTypeNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::StackTypeNode.headMeta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StackTypeNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::StackTypeNode.headMeta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StackTypeNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StackTypeNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::StackTypeNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::StackTypeNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::StackTypeNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::StructTypeNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_84 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_84 (i32.const 91))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_84))
    )
  )
  (func $src::compiler::nodes::StructTypeNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StructTypeNode.StructTypeNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_85 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_85 (i32.const 91))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_85)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::StructTypeNode.apply_1 (param $meta i64) (param $headParameter i64) (result i64)
    (local $src::compiler::nodes::$ref_41 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_41 (call $src::compiler::nodes::StructTypeNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::StructTypeNode.property$0_2 (local.get $src::compiler::nodes::$ref_41) (local.get $meta))
      (call $src::compiler::nodes::StructTypeNode.property$1_2 (local.get $src::compiler::nodes::$ref_41) (local.get $headParameter))
      (local.get $src::compiler::nodes::$ref_41)
    )
  )
  (func $src::compiler::nodes::StructTypeNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::StructTypeNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::StructTypeNode.StructTypeNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::StructTypeNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StructTypeNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StructTypeNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructTypeNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::StructTypeNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructTypeNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StructTypeNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::StructTypeNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::StructTypeNode.headParameter_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructTypeNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::StructTypeNode.headParameter_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructTypeNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StructTypeNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::StructTypeNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::StructTypeNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::StructTypeNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_86 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_86 (i32.const 92))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_86))
    )
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.AbstractFunctionCallNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_87 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_87 (i32.const 92))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_87)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.apply_1 (param $meta i64) (param $headArgument i64) (param $resolvedFunction i64) (result i64)
    (local $src::compiler::nodes::$ref_42 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_42 (call $src::compiler::nodes::AbstractFunctionCallNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::AbstractFunctionCallNode.property$0_2 (local.get $src::compiler::nodes::$ref_42) (local.get $meta))
      (call $src::compiler::nodes::AbstractFunctionCallNode.property$1_2 (local.get $src::compiler::nodes::$ref_42) (local.get $headArgument))
      (call $src::compiler::nodes::AbstractFunctionCallNode.property$2_2 (local.get $src::compiler::nodes::$ref_42) (local.get $resolvedFunction))
      (local.get $src::compiler::nodes::$ref_42)
    )
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::AbstractFunctionCallNode.AbstractFunctionCallNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AbstractFunctionCallNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AbstractFunctionCallNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.headArgument_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AbstractFunctionCallNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.headArgument_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AbstractFunctionCallNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.resolvedFunction_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AbstractFunctionCallNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.resolvedFunction_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AbstractFunctionCallNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::AbstractFunctionCallNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_88 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_88 (i32.const 93))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_88))
    )
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.InjectedFunctionCallNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_89 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_89 (i32.const 93))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_89)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.apply_1 (param $meta i64) (param $headArgument i64) (param $resolvedFunction i64) (result i64)
    (local $src::compiler::nodes::$ref_43 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_43 (call $src::compiler::nodes::InjectedFunctionCallNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::InjectedFunctionCallNode.property$0_2 (local.get $src::compiler::nodes::$ref_43) (local.get $meta))
      (call $src::compiler::nodes::InjectedFunctionCallNode.property$1_2 (local.get $src::compiler::nodes::$ref_43) (local.get $headArgument))
      (call $src::compiler::nodes::InjectedFunctionCallNode.property$2_2 (local.get $src::compiler::nodes::$ref_43) (local.get $resolvedFunction))
      (local.get $src::compiler::nodes::$ref_43)
    )
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::InjectedFunctionCallNode.InjectedFunctionCallNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::InjectedFunctionCallNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::InjectedFunctionCallNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.headArgument_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::InjectedFunctionCallNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.headArgument_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::InjectedFunctionCallNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.resolvedFunction_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::InjectedFunctionCallNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.resolvedFunction_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::InjectedFunctionCallNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::InjectedFunctionCallNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::FunctionCallNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_90 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_90 (i32.const 94))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_90))
    )
  )
  (func $src::compiler::nodes::FunctionCallNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::FunctionCallNode.FunctionCallNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_91 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_91 (i32.const 94))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_91)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::FunctionCallNode.apply_1 (param $meta i64) (param $functionNode i64) (param $headArgument i64) (param $resolvedFunction i64) (result i64)
    (local $src::compiler::nodes::$ref_44 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_44 (call $src::compiler::nodes::FunctionCallNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::FunctionCallNode.property$0_2 (local.get $src::compiler::nodes::$ref_44) (local.get $meta))
      (call $src::compiler::nodes::FunctionCallNode.property$1_2 (local.get $src::compiler::nodes::$ref_44) (local.get $functionNode))
      (call $src::compiler::nodes::FunctionCallNode.property$2_2 (local.get $src::compiler::nodes::$ref_44) (local.get $headArgument))
      (call $src::compiler::nodes::FunctionCallNode.property$3_2 (local.get $src::compiler::nodes::$ref_44) (local.get $resolvedFunction))
      (local.get $src::compiler::nodes::$ref_44)
    )
  )
  (func $src::compiler::nodes::FunctionCallNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::FunctionCallNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::FunctionCallNode.FunctionCallNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::FunctionCallNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FunctionCallNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::FunctionCallNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionCallNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionCallNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionCallNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionCallNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::FunctionCallNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::FunctionCallNode.functionNode_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionCallNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionCallNode.functionNode_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionCallNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionCallNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::FunctionCallNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::FunctionCallNode.headArgument_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionCallNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionCallNode.headArgument_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionCallNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionCallNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::FunctionCallNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::FunctionCallNode.resolvedFunction_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::FunctionCallNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::FunctionCallNode.resolvedFunction_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::FunctionCallNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::FunctionCallNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::FunctionCallNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::FunctionCallNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::FunctionCallNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_92 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_92 (i32.const 95))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_92))
    )
  )
  (func $src::compiler::nodes::BinaryExpressionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::BinaryExpressionNode.BinaryExpressionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_93 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_93 (i32.const 95))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_93)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::BinaryExpressionNode.apply_1 (param $meta i64) (param $lhs i64) (param $operator i64) (param $rhs i64) (result i64)
    (local $src::compiler::nodes::$ref_45 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_45 (call $src::compiler::nodes::BinaryExpressionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::BinaryExpressionNode.property$0_2 (local.get $src::compiler::nodes::$ref_45) (local.get $meta))
      (call $src::compiler::nodes::BinaryExpressionNode.property$1_2 (local.get $src::compiler::nodes::$ref_45) (local.get $lhs))
      (call $src::compiler::nodes::BinaryExpressionNode.property$2_2 (local.get $src::compiler::nodes::$ref_45) (local.get $operator))
      (call $src::compiler::nodes::BinaryExpressionNode.property$3_2 (local.get $src::compiler::nodes::$ref_45) (local.get $rhs))
      (local.get $src::compiler::nodes::$ref_45)
    )
  )
  (func $src::compiler::nodes::BinaryExpressionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::BinaryExpressionNode.BinaryExpressionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BinaryExpressionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BinaryExpressionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.lhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BinaryExpressionNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.lhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BinaryExpressionNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.operator_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BinaryExpressionNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.operator_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BinaryExpressionNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BinaryExpressionNode.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BinaryExpressionNode.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.rhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BinaryExpressionNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.rhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BinaryExpressionNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::BinaryExpressionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::AsExpressionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_94 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_94 (i32.const 96))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_94))
    )
  )
  (func $src::compiler::nodes::AsExpressionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::AsExpressionNode.AsExpressionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_95 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_95 (i32.const 96))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_95)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::AsExpressionNode.apply_1 (param $meta i64) (param $lhs i64) (param $rhs i64) (result i64)
    (local $src::compiler::nodes::$ref_46 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_46 (call $src::compiler::nodes::AsExpressionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::AsExpressionNode.property$0_2 (local.get $src::compiler::nodes::$ref_46) (local.get $meta))
      (call $src::compiler::nodes::AsExpressionNode.property$1_2 (local.get $src::compiler::nodes::$ref_46) (local.get $lhs))
      (call $src::compiler::nodes::AsExpressionNode.property$2_2 (local.get $src::compiler::nodes::$ref_46) (local.get $rhs))
      (local.get $src::compiler::nodes::$ref_46)
    )
  )
  (func $src::compiler::nodes::AsExpressionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::AsExpressionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::AsExpressionNode.AsExpressionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::AsExpressionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::AsExpressionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::AsExpressionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AsExpressionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::AsExpressionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AsExpressionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AsExpressionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::AsExpressionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::AsExpressionNode.lhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AsExpressionNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::AsExpressionNode.lhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AsExpressionNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AsExpressionNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::AsExpressionNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::AsExpressionNode.rhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::AsExpressionNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::AsExpressionNode.rhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::AsExpressionNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::AsExpressionNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::AsExpressionNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::AsExpressionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::AsExpressionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::IsExpressionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_96 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_96 (i32.const 97))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_96))
    )
  )
  (func $src::compiler::nodes::IsExpressionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::IsExpressionNode.IsExpressionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_97 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_97 (i32.const 97))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_97)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::IsExpressionNode.apply_1 (param $meta i64) (param $lhs i64) (param $rhs i64) (result i64)
    (local $src::compiler::nodes::$ref_47 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_47 (call $src::compiler::nodes::IsExpressionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::IsExpressionNode.property$0_2 (local.get $src::compiler::nodes::$ref_47) (local.get $meta))
      (call $src::compiler::nodes::IsExpressionNode.property$1_2 (local.get $src::compiler::nodes::$ref_47) (local.get $lhs))
      (call $src::compiler::nodes::IsExpressionNode.property$2_2 (local.get $src::compiler::nodes::$ref_47) (local.get $rhs))
      (local.get $src::compiler::nodes::$ref_47)
    )
  )
  (func $src::compiler::nodes::IsExpressionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::IsExpressionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::IsExpressionNode.IsExpressionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::IsExpressionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::IsExpressionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::IsExpressionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IsExpressionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::IsExpressionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IsExpressionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IsExpressionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::IsExpressionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::IsExpressionNode.lhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IsExpressionNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::IsExpressionNode.lhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IsExpressionNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IsExpressionNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::IsExpressionNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::IsExpressionNode.rhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IsExpressionNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::IsExpressionNode.rhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IsExpressionNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IsExpressionNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::IsExpressionNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::IsExpressionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::IsExpressionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_98 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_98 (i32.const 98))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_98))
    )
  )
  (func $src::compiler::nodes::UnaryExpressionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::UnaryExpressionNode.UnaryExpressionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_99 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_99 (i32.const 98))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_99)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::UnaryExpressionNode.apply_1 (param $meta i64) (param $operator i64) (param $rhs i64) (result i64)
    (local $src::compiler::nodes::$ref_48 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_48 (call $src::compiler::nodes::UnaryExpressionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::UnaryExpressionNode.property$0_2 (local.get $src::compiler::nodes::$ref_48) (local.get $meta))
      (call $src::compiler::nodes::UnaryExpressionNode.property$1_2 (local.get $src::compiler::nodes::$ref_48) (local.get $operator))
      (call $src::compiler::nodes::UnaryExpressionNode.property$2_2 (local.get $src::compiler::nodes::$ref_48) (local.get $rhs))
      (local.get $src::compiler::nodes::$ref_48)
    )
  )
  (func $src::compiler::nodes::UnaryExpressionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::UnaryExpressionNode.UnaryExpressionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::UnaryExpressionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::UnaryExpressionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.operator_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::UnaryExpressionNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.operator_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::UnaryExpressionNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::UnaryExpressionNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::UnaryExpressionNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.rhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::UnaryExpressionNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.rhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::UnaryExpressionNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::UnaryExpressionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::WasmAtomNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_100 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_100 (i32.const 99))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_100))
    )
  )
  (func $src::compiler::nodes::WasmAtomNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::WasmAtomNode.WasmAtomNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_101 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_101 (i32.const 99))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_101)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::WasmAtomNode.apply_1 (param $meta i64) (param $symbol i64) (param $headArgument i64) (result i64)
    (local $src::compiler::nodes::$ref_49 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_49 (call $src::compiler::nodes::WasmAtomNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::WasmAtomNode.property$0_2 (local.get $src::compiler::nodes::$ref_49) (local.get $meta))
      (call $src::compiler::nodes::WasmAtomNode.property$1_2 (local.get $src::compiler::nodes::$ref_49) (local.get $symbol))
      (call $src::compiler::nodes::WasmAtomNode.property$2_2 (local.get $src::compiler::nodes::$ref_49) (local.get $headArgument))
      (local.get $src::compiler::nodes::$ref_49)
    )
  )
  (func $src::compiler::nodes::WasmAtomNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::WasmAtomNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::WasmAtomNode.WasmAtomNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::WasmAtomNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::WasmAtomNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::WasmAtomNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::WasmAtomNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::WasmAtomNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::WasmAtomNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::WasmAtomNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::WasmAtomNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::WasmAtomNode.symbol_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::WasmAtomNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::WasmAtomNode.symbol_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::WasmAtomNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::WasmAtomNode.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::WasmAtomNode.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::WasmAtomNode.headArgument_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::WasmAtomNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::WasmAtomNode.headArgument_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::WasmAtomNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::WasmAtomNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::WasmAtomNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::WasmAtomNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::WasmAtomNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::WasmExpressionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_102 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_102 (i32.const 100))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_102))
    )
  )
  (func $src::compiler::nodes::WasmExpressionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::WasmExpressionNode.WasmExpressionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_103 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_103 (i32.const 100))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_103)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::WasmExpressionNode.apply_1 (param $meta i64) (param $headAtom i64) (result i64)
    (local $src::compiler::nodes::$ref_50 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_50 (call $src::compiler::nodes::WasmExpressionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::WasmExpressionNode.property$0_2 (local.get $src::compiler::nodes::$ref_50) (local.get $meta))
      (call $src::compiler::nodes::WasmExpressionNode.property$1_2 (local.get $src::compiler::nodes::$ref_50) (local.get $headAtom))
      (local.get $src::compiler::nodes::$ref_50)
    )
  )
  (func $src::compiler::nodes::WasmExpressionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::WasmExpressionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::WasmExpressionNode.WasmExpressionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::WasmExpressionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::WasmExpressionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::WasmExpressionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::WasmExpressionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::WasmExpressionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::WasmExpressionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::WasmExpressionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::WasmExpressionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::WasmExpressionNode.headAtom_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::WasmExpressionNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::WasmExpressionNode.headAtom_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::WasmExpressionNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::WasmExpressionNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::WasmExpressionNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::WasmExpressionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::WasmExpressionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::IfNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_104 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_104 (i32.const 101))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_104))
    )
  )
  (func $src::compiler::nodes::IfNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::IfNode.IfNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_105 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_105 (i32.const 101))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_105)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::IfNode.apply_1 (param $meta i64) (param $condition i64) (param $truePart i64) (param $falsePart i64) (result i64)
    (local $src::compiler::nodes::$ref_51 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_51 (call $src::compiler::nodes::IfNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::IfNode.property$0_2 (local.get $src::compiler::nodes::$ref_51) (local.get $meta))
      (call $src::compiler::nodes::IfNode.property$1_2 (local.get $src::compiler::nodes::$ref_51) (local.get $condition))
      (call $src::compiler::nodes::IfNode.property$2_2 (local.get $src::compiler::nodes::$ref_51) (local.get $truePart))
      (call $src::compiler::nodes::IfNode.property$3_2 (local.get $src::compiler::nodes::$ref_51) (local.get $falsePart))
      (local.get $src::compiler::nodes::$ref_51)
    )
  )
  (func $src::compiler::nodes::IfNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::IfNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::IfNode.IfNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::IfNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::IfNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::IfNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IfNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::IfNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IfNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IfNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::IfNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::IfNode.condition_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IfNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::IfNode.condition_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IfNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IfNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::IfNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::IfNode.truePart_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IfNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::IfNode.truePart_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IfNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IfNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::IfNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::IfNode.falsePart_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IfNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::IfNode.falsePart_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IfNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IfNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::IfNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::IfNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::IfNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::UnionTypeNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_106 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_106 (i32.const 102))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_106))
    )
  )
  (func $src::compiler::nodes::UnionTypeNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::UnionTypeNode.UnionTypeNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_107 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_107 (i32.const 102))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_107)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::UnionTypeNode.apply_1 (param $meta i64) (param $headType i64) (result i64)
    (local $src::compiler::nodes::$ref_52 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_52 (call $src::compiler::nodes::UnionTypeNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::UnionTypeNode.property$0_2 (local.get $src::compiler::nodes::$ref_52) (local.get $meta))
      (call $src::compiler::nodes::UnionTypeNode.property$1_2 (local.get $src::compiler::nodes::$ref_52) (local.get $headType))
      (local.get $src::compiler::nodes::$ref_52)
    )
  )
  (func $src::compiler::nodes::UnionTypeNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::UnionTypeNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::UnionTypeNode.UnionTypeNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::UnionTypeNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::UnionTypeNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::UnionTypeNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::UnionTypeNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::UnionTypeNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::UnionTypeNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::UnionTypeNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::UnionTypeNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::UnionTypeNode.headType_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::UnionTypeNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::UnionTypeNode.headType_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::UnionTypeNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::UnionTypeNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::UnionTypeNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::UnionTypeNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::UnionTypeNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_108 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_108 (i32.const 103))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_108))
    )
  )
  (func $src::compiler::nodes::IntersectionTypeNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::IntersectionTypeNode.IntersectionTypeNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_109 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_109 (i32.const 103))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_109)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::IntersectionTypeNode.apply_1 (param $meta i64) (param $headType i64) (result i64)
    (local $src::compiler::nodes::$ref_53 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_53 (call $src::compiler::nodes::IntersectionTypeNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::IntersectionTypeNode.property$0_2 (local.get $src::compiler::nodes::$ref_53) (local.get $meta))
      (call $src::compiler::nodes::IntersectionTypeNode.property$1_2 (local.get $src::compiler::nodes::$ref_53) (local.get $headType))
      (local.get $src::compiler::nodes::$ref_53)
    )
  )
  (func $src::compiler::nodes::IntersectionTypeNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::IntersectionTypeNode.IntersectionTypeNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IntersectionTypeNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IntersectionTypeNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.headType_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::IntersectionTypeNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.headType_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::IntersectionTypeNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::IntersectionTypeNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::StructDeclarationNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_110 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_110 (i32.const 104))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_110))
    )
  )
  (func $src::compiler::nodes::StructDeclarationNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::StructDeclarationNode.StructDeclarationNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_111 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_111 (i32.const 104))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_111)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::StructDeclarationNode.apply_1 (param $meta i64) (param $name i64) (param $headParameter i64) (result i64)
    (local $src::compiler::nodes::$ref_54 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_54 (call $src::compiler::nodes::StructDeclarationNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::StructDeclarationNode.property$0_2 (local.get $src::compiler::nodes::$ref_54) (local.get $meta))
      (call $src::compiler::nodes::StructDeclarationNode.property$1_2 (local.get $src::compiler::nodes::$ref_54) (local.get $name))
      (call $src::compiler::nodes::StructDeclarationNode.property$2_2 (local.get $src::compiler::nodes::$ref_54) (local.get $headParameter))
      (local.get $src::compiler::nodes::$ref_54)
    )
  )
  (func $src::compiler::nodes::StructDeclarationNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::StructDeclarationNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::StructDeclarationNode.StructDeclarationNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::StructDeclarationNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StructDeclarationNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::StructDeclarationNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructDeclarationNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::StructDeclarationNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructDeclarationNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StructDeclarationNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::StructDeclarationNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::StructDeclarationNode.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructDeclarationNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::StructDeclarationNode.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructDeclarationNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StructDeclarationNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructDeclarationNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::StructDeclarationNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructDeclarationNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::StructDeclarationNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::StructDeclarationNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::StructDeclarationNode.headParameter_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::StructDeclarationNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::StructDeclarationNode.headParameter_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::StructDeclarationNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::StructDeclarationNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::StructDeclarationNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::StructDeclarationNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::StructDeclarationNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_112 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_112 (i32.const 105))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_112))
    )
  )
  (func $src::compiler::nodes::EffectDeclarationNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::EffectDeclarationNode.EffectDeclarationNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_113 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_113 (i32.const 105))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_113)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::EffectDeclarationNode.apply_1 (param $meta i64) (param $name i64) (result i64)
    (local $src::compiler::nodes::$ref_55 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_55 (call $src::compiler::nodes::EffectDeclarationNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::EffectDeclarationNode.property$0_2 (local.get $src::compiler::nodes::$ref_55) (local.get $meta))
      (call $src::compiler::nodes::EffectDeclarationNode.property$1_2 (local.get $src::compiler::nodes::$ref_55) (local.get $name))
      (local.get $src::compiler::nodes::$ref_55)
    )
  )
  (func $src::compiler::nodes::EffectDeclarationNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::EffectDeclarationNode.EffectDeclarationNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EffectDeclarationNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EffectDeclarationNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.name_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::EffectDeclarationNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.name_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::EffectDeclarationNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NameIdentifierNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NameIdentifierNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::EffectDeclarationNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::PatternMatcherNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_114 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_114 (i32.const 106))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_114))
    )
  )
  (func $src::compiler::nodes::PatternMatcherNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::PatternMatcherNode.PatternMatcherNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_115 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_115 (i32.const 106))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_115)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::PatternMatcherNode.apply_1 (param $meta i64) (param $lhs i64) (param $headMatcher i64) (result i64)
    (local $src::compiler::nodes::$ref_56 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_56 (call $src::compiler::nodes::PatternMatcherNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::PatternMatcherNode.property$0_2 (local.get $src::compiler::nodes::$ref_56) (local.get $meta))
      (call $src::compiler::nodes::PatternMatcherNode.property$1_2 (local.get $src::compiler::nodes::$ref_56) (local.get $lhs))
      (call $src::compiler::nodes::PatternMatcherNode.property$2_2 (local.get $src::compiler::nodes::$ref_56) (local.get $headMatcher))
      (local.get $src::compiler::nodes::$ref_56)
    )
  )
  (func $src::compiler::nodes::PatternMatcherNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::PatternMatcherNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::PatternMatcherNode.PatternMatcherNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::PatternMatcherNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::PatternMatcherNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::PatternMatcherNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::PatternMatcherNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::PatternMatcherNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::PatternMatcherNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::PatternMatcherNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::PatternMatcherNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::PatternMatcherNode.lhs_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::PatternMatcherNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::PatternMatcherNode.lhs_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::PatternMatcherNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::PatternMatcherNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::PatternMatcherNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::PatternMatcherNode.headMatcher_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::PatternMatcherNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::PatternMatcherNode.headMatcher_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::PatternMatcherNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::PatternMatcherNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::PatternMatcherNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::PatternMatcherNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::PatternMatcherNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::MatchConditionNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_116 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_116 (i32.const 107))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_116))
    )
  )
  (func $src::compiler::nodes::MatchConditionNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MatchConditionNode.MatchConditionNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_117 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_117 (i32.const 107))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_117)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::MatchConditionNode.apply_1 (param $meta i64) (param $declaredName i64) (param $condition i64) (param $body i64) (result i64)
    (local $src::compiler::nodes::$ref_57 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_57 (call $src::compiler::nodes::MatchConditionNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 32))))
      (call $src::compiler::nodes::MatchConditionNode.property$0_2 (local.get $src::compiler::nodes::$ref_57) (local.get $meta))
      (call $src::compiler::nodes::MatchConditionNode.property$1_2 (local.get $src::compiler::nodes::$ref_57) (local.get $declaredName))
      (call $src::compiler::nodes::MatchConditionNode.property$2_2 (local.get $src::compiler::nodes::$ref_57) (local.get $condition))
      (call $src::compiler::nodes::MatchConditionNode.property$3_2 (local.get $src::compiler::nodes::$ref_57) (local.get $body))
      (local.get $src::compiler::nodes::$ref_57)
    )
  )
  (func $src::compiler::nodes::MatchConditionNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::MatchConditionNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::MatchConditionNode.MatchConditionNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::MatchConditionNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MatchConditionNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MatchConditionNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchConditionNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchConditionNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchConditionNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchConditionNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::MatchConditionNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::MatchConditionNode.declaredName_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchConditionNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchConditionNode.declaredName_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchConditionNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchConditionNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchConditionNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::MatchConditionNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchConditionNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::MatchConditionNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::MatchConditionNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::MatchConditionNode.condition_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchConditionNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchConditionNode.condition_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchConditionNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchConditionNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::MatchConditionNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::MatchConditionNode.body_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchConditionNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchConditionNode.body_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchConditionNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchConditionNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::MatchConditionNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::MatchConditionNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::MatchConditionNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_118 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_118 (i32.const 108))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_118))
    )
  )
  (func $src::compiler::nodes::MatchCaseIsNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MatchCaseIsNode.MatchCaseIsNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_119 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_119 (i32.const 108))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_119)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::MatchCaseIsNode.apply_1 (param $meta i64) (param $declaredName i64) (param $typeReference i64) (param $headDeconstruct i64) (param $body i64) (result i64)
    (local $src::compiler::nodes::$ref_58 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_58 (call $src::compiler::nodes::MatchCaseIsNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 40))))
      (call $src::compiler::nodes::MatchCaseIsNode.property$0_2 (local.get $src::compiler::nodes::$ref_58) (local.get $meta))
      (call $src::compiler::nodes::MatchCaseIsNode.property$1_2 (local.get $src::compiler::nodes::$ref_58) (local.get $declaredName))
      (call $src::compiler::nodes::MatchCaseIsNode.property$2_2 (local.get $src::compiler::nodes::$ref_58) (local.get $typeReference))
      (call $src::compiler::nodes::MatchCaseIsNode.property$3_2 (local.get $src::compiler::nodes::$ref_58) (local.get $headDeconstruct))
      (call $src::compiler::nodes::MatchCaseIsNode.property$4_2 (local.get $src::compiler::nodes::$ref_58) (local.get $body))
      (local.get $src::compiler::nodes::$ref_58)
    )
  )
  (func $src::compiler::nodes::MatchCaseIsNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::MatchCaseIsNode.MatchCaseIsNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.declaredName_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.declaredName_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchCaseIsNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchCaseIsNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.typeReference_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.typeReference_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.headDeconstruct_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$3_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.headDeconstruct_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$3_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 24))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$3_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 24))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.body_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$4_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.body_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchCaseIsNode.property$4_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$4_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 32))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.property$4_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 32))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::MatchCaseIsNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::MatchLiteralNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_120 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_120 (i32.const 109))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_120))
    )
  )
  (func $src::compiler::nodes::MatchLiteralNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MatchLiteralNode.MatchLiteralNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_121 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_121 (i32.const 109))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_121)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::MatchLiteralNode.apply_1 (param $meta i64) (param $literal i64) (param $body i64) (result i64)
    (local $src::compiler::nodes::$ref_59 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_59 (call $src::compiler::nodes::MatchLiteralNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::MatchLiteralNode.property$0_2 (local.get $src::compiler::nodes::$ref_59) (local.get $meta))
      (call $src::compiler::nodes::MatchLiteralNode.property$1_2 (local.get $src::compiler::nodes::$ref_59) (local.get $literal))
      (call $src::compiler::nodes::MatchLiteralNode.property$2_2 (local.get $src::compiler::nodes::$ref_59) (local.get $body))
      (local.get $src::compiler::nodes::$ref_59)
    )
  )
  (func $src::compiler::nodes::MatchLiteralNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::MatchLiteralNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::MatchLiteralNode.MatchLiteralNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::MatchLiteralNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MatchLiteralNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MatchLiteralNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchLiteralNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchLiteralNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchLiteralNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchLiteralNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::MatchLiteralNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::MatchLiteralNode.literal_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchLiteralNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchLiteralNode.literal_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchLiteralNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchLiteralNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::MatchLiteralNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::MatchLiteralNode.body_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchLiteralNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchLiteralNode.body_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchLiteralNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchLiteralNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::MatchLiteralNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::MatchLiteralNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::MatchLiteralNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::MatchDefaultNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_122 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_122 (i32.const 110))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_122))
    )
  )
  (func $src::compiler::nodes::MatchDefaultNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::MatchDefaultNode.MatchDefaultNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_123 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_123 (i32.const 110))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_123)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::MatchDefaultNode.apply_1 (param $meta i64) (param $declaredName i64) (param $body i64) (result i64)
    (local $src::compiler::nodes::$ref_60 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_60 (call $src::compiler::nodes::MatchDefaultNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::compiler::nodes::MatchDefaultNode.property$0_2 (local.get $src::compiler::nodes::$ref_60) (local.get $meta))
      (call $src::compiler::nodes::MatchDefaultNode.property$1_2 (local.get $src::compiler::nodes::$ref_60) (local.get $declaredName))
      (call $src::compiler::nodes::MatchDefaultNode.property$2_2 (local.get $src::compiler::nodes::$ref_60) (local.get $body))
      (local.get $src::compiler::nodes::$ref_60)
    )
  )
  (func $src::compiler::nodes::MatchDefaultNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::MatchDefaultNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::MatchDefaultNode.MatchDefaultNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::MatchDefaultNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MatchDefaultNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::MatchDefaultNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchDefaultNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchDefaultNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchDefaultNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchDefaultNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::MatchDefaultNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::MatchDefaultNode.declaredName_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchDefaultNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchDefaultNode.declaredName_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchDefaultNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchDefaultNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchDefaultNode.loadPropertyWithOffset$1_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::MatchDefaultNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchDefaultNode.storePropertyWithOffset$1_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::MatchDefaultNode.loadPropertyWithOffset$1_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::compiler::nodes::MatchDefaultNode.storePropertyWithOffset$1_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::compiler::nodes::MatchDefaultNode.body_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::MatchDefaultNode.property$2_1 (local.get $self))
  )
  (func $src::compiler::nodes::MatchDefaultNode.body_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::MatchDefaultNode.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::MatchDefaultNode.property$2_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 16))
  )
  (func $src::compiler::nodes::MatchDefaultNode.property$2_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::compiler::nodes::MatchDefaultNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::MatchDefaultNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::LoopNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_124 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_124 (i32.const 111))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_124))
    )
  )
  (func $src::compiler::nodes::LoopNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::LoopNode.LoopNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_125 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_125 (i32.const 111))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_125)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::LoopNode.apply_1 (param $meta i64) (param $expression i64) (result i64)
    (local $src::compiler::nodes::$ref_61 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_61 (call $src::compiler::nodes::LoopNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::compiler::nodes::LoopNode.property$0_2 (local.get $src::compiler::nodes::$ref_61) (local.get $meta))
      (call $src::compiler::nodes::LoopNode.property$1_2 (local.get $src::compiler::nodes::$ref_61) (local.get $expression))
      (local.get $src::compiler::nodes::$ref_61)
    )
  )
  (func $src::compiler::nodes::LoopNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::LoopNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::LoopNode.LoopNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::LoopNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::LoopNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::LoopNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::LoopNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::LoopNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::LoopNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::LoopNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::LoopNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::LoopNode.expression_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::LoopNode.property$1_1 (local.get $self))
  )
  (func $src::compiler::nodes::LoopNode.expression_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::LoopNode.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::LoopNode.property$1_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::CodeNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::compiler::nodes::LoopNode.property$1_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::CodeNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::compiler::nodes::LoopNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::LoopNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::ContinueNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_126 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_126 (i32.const 112))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_126))
    )
  )
  (func $src::compiler::nodes::ContinueNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::ContinueNode.ContinueNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_127 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_127 (i32.const 112))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_127)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::ContinueNode.apply_1 (param $meta i64) (result i64)
    (local $src::compiler::nodes::$ref_62 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_62 (call $src::compiler::nodes::ContinueNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::nodes::ContinueNode.property$0_2 (local.get $src::compiler::nodes::$ref_62) (local.get $meta))
      (local.get $src::compiler::nodes::$ref_62)
    )
  )
  (func $src::compiler::nodes::ContinueNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::ContinueNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::ContinueNode.ContinueNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::ContinueNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ContinueNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::ContinueNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::ContinueNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::ContinueNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::ContinueNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::ContinueNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::ContinueNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::ContinueNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::ContinueNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::BreakNode.is_1 (param $a i64) (result i32)
    (local $src::compiler::nodes::discriminant_128 i32)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::discriminant_128 (i32.const 113))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::compiler::nodes::discriminant_128))
    )
  )
  (func $src::compiler::nodes::BreakNode.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::compiler::nodes::BreakNode.BreakNode$discriminant_1 (result i64)
    (local $src::compiler::nodes::discriminant_129 i32)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::discriminant_129 (i32.const 113))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::compiler::nodes::discriminant_129)) (i32.const 32))
    )
  )
  (func $src::compiler::nodes::BreakNode.apply_1 (param $meta i64) (result i64)
    (local $src::compiler::nodes::$ref_63 i64)
    (block $B1 (result i64)
      (local.set $src::compiler::nodes::$ref_63 (call $src::compiler::nodes::BreakNode.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::compiler::nodes::BreakNode.property$0_2 (local.get $src::compiler::nodes::$ref_63) (local.get $meta))
      (local.get $src::compiler::nodes::$ref_63)
    )
  )
  (func $src::compiler::nodes::BreakNode.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::compiler::nodes::BreakNode.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::compiler::nodes::BreakNode.BreakNode$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::compiler::nodes::BreakNode.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::BreakNode.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::compiler::nodes::BreakNode.meta_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::BreakNode.property$0_1 (local.get $self))
  )
  (func $src::compiler::nodes::BreakNode.meta_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::BreakNode.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::compiler::nodes::BreakNode.property$0_1 (param $self i64) (result i64)
    (call $src::compiler::nodes::NodeMeta.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::compiler::nodes::BreakNode.property$0_2 (param $self i64) (param $value i64)
    (call $src::compiler::nodes::NodeMeta.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::compiler::nodes::BreakNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::compiler::nodes::BreakNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::compiler::nodes::CodeNode.nodeName_1 (param $self i64) (result i64)
    (local $var$1 i64)
    (block $B1 (result i64)
      (local.set $var$1 (local.get $self))
      (block $B1_0
          (block $B1_1
              (block $B1_2
                  (block $B1_3
                      (block $B1_4
                          (block $B1_5
                              (block $B1_6
                                  (block $B1_7
                                      (block $B1_8
                                          (block $B1_9
                                              (block $B1_10
                                                  (block $B1_11
                                                      (block $B1_12
                                                          (block $B1_13
                                                              (block $B1_14
                                                                  (block $B1_15
                                                                      (block $B1_16
                                                                          (block $B1_17
                                                                              (block $B1_18
                                                                                  (block $B1_19
                                                                                      (block $B1_20
                                                                                          (block $B1_21
                                                                                              (block $B1_22
                                                                                                  (block $B1_23
                                                                                                      (block $B1_24
                                                                                                          (block $B1_25
                                                                                                              (block $B1_26
                                                                                                                  (block $B1_27
                                                                                                                      (block $B1_28
                                                                                                                          (block $B1_29
                                                                                                                              (block $B1_30
                                                                                                                                  (block $B1_31
                                                                                                                                      (block $B1_32
                                                                                                                                          (block $B1_33
                                                                                                                                              (block $B1_34
                                                                                                                                                  (block $B1_35
                                                                                                                                                      (block $B1_36
                                                                                                                                                          (block $B1_37
                                                                                                                                                              (block $B1_38
                                                                                                                                                                  (block $B1_39
                                                                                                                                                                      (block $B1_40
                                                                                                                                                                          (block $B1_41
                                                                                                                                                                              (block $B1_42
                                                                                                                                                                                  (block $B1_43
                                                                                                                                                                                      (block $B1_44
                                                                                                                                                                                          (block $B1_45
                                                                                                                                                                                              (block $B1_46
                                                                                                                                                                                                  (block $B1_47
                                                                                                                                                                                                      (block $B1_48
                                                                                                                                                                                                          (block $B1_49
                                                                                                                                                                                                              (block $B1_50
                                                                                                                                                                                                                  (block $B1_51
                                                                                                                                                                                                                      (block $B1_52
                                                                                                                                                                                                                          (block $B1_53
                                                                                                                                                                                                                              (block $B1_54
                                                                                                                                                                                                                                  (block $B1_55
                                                                                                                                                                                                                                      (block $B1_56
                                                                                                                                                                                                                                          (block $B1_57
                                                                                                                                                                                                                                              (block $B1_58
                                                                                                                                                                                                                                                  (block $B1_59
                                                                                                                                                                                                                                                      (block $B1_60
                                                                                                                                                                                                                                                          (block $B1_61
                                                                                                                                                                                                                                                              (br_if $B1_0 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_1 (call $src::compiler::nodes::ErrorNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_2 (call $src::compiler::nodes::CodeNodeCons.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_3 (call $src::compiler::nodes::Document.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_4 (call $src::compiler::nodes::PrivateModifierNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_5 (call $src::compiler::nodes::NoModifierNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_6 (call $src::compiler::nodes::NameIdentifierNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_7 (call $src::compiler::nodes::QNameNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_8 (call $src::compiler::nodes::FunctionTypeNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_9 (call $src::compiler::nodes::EffectMemberDeclarationNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_10 (call $src::compiler::nodes::ReferenceNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_11 (call $src::compiler::nodes::BlockNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_12 (call $src::compiler::nodes::MemberNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_13 (call $src::compiler::nodes::DecoratorNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_14 (call $src::compiler::nodes::ParameterNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_15 (call $src::compiler::nodes::FunctionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_16 (call $src::compiler::nodes::VarDeclarationNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_17 (call $src::compiler::nodes::AssignmentNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_18 (call $src::compiler::nodes::ParenExpressionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_19 (call $src::compiler::nodes::ImplDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_20 (call $src::compiler::nodes::ImportDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_21 (call $src::compiler::nodes::FunDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_22 (call $src::compiler::nodes::EffectDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_23 (call $src::compiler::nodes::StructDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_24 (call $src::compiler::nodes::OverloadedFunDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_25 (call $src::compiler::nodes::VarDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_26 (call $src::compiler::nodes::TypeDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_27 (call $src::compiler::nodes::TraitDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_28 (call $src::compiler::nodes::EnumDirectiveNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_29 (call $src::compiler::nodes::FloatLiteralNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_30 (call $src::compiler::nodes::IntegerLiteralNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_31 (call $src::compiler::nodes::HexLiteralNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_32 (call $src::compiler::nodes::BooleanLiteralNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_33 (call $src::compiler::nodes::StringLiteralNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_34 (call $src::compiler::nodes::UnknownExpressionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_35 (call $src::compiler::nodes::StackTypeNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_36 (call $src::compiler::nodes::StructTypeNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_37 (call $src::compiler::nodes::AbstractFunctionCallNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_38 (call $src::compiler::nodes::InjectedFunctionCallNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_39 (call $src::compiler::nodes::FunctionCallNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_40 (call $src::compiler::nodes::BinaryExpressionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_41 (call $src::compiler::nodes::AsExpressionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_42 (call $src::compiler::nodes::IsExpressionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_43 (call $src::compiler::nodes::UnaryExpressionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_44 (call $src::compiler::nodes::WasmAtomNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_45 (call $src::compiler::nodes::WasmExpressionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_46 (call $src::compiler::nodes::IfNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_47 (call $src::compiler::nodes::UnionTypeNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_48 (call $src::compiler::nodes::IntersectionTypeNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_49 (call $src::compiler::nodes::StructDeclarationNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_50 (call $src::compiler::nodes::EffectDeclarationNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_51 (call $src::compiler::nodes::PatternMatcherNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_52 (call $src::compiler::nodes::MatchConditionNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_53 (call $src::compiler::nodes::MatchCaseIsNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_54 (call $src::compiler::nodes::MatchLiteralNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_55 (call $src::compiler::nodes::MatchDefaultNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_56 (call $src::compiler::nodes::LoopNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_57 (call $src::compiler::nodes::ContinueNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_58 (call $src::compiler::nodes::BreakNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_59 (call $src::compiler::nodes::InjectedLiteralNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_60 (call $src::compiler::nodes::StackLiteralNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                              (br_if $B1_61 (call $src::compiler::nodes::NameLiteralPairNode.is_1 (local.get $var$1)))
                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                          (i64.const 0x00000004000057a6)
                                                                                                                                                                                                                                                          (br $B1)
                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                      (i64.const 0x0000000400005781)
                                                                                                                                                                                                                                                      (br $B1)
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                  (i64.const 0x0000000400005756)
                                                                                                                                                                                                                                                  (br $B1)
                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                              (i64.const 0x000000040000573f)
                                                                                                                                                                                                                                              (br $B1)
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                          (i64.const 0x0000000400005722)
                                                                                                                                                                                                                                          (br $B1)
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                      (i64.const 0x000000040000570d)
                                                                                                                                                                                                                                      (br $B1)
                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                  (i64.const 0x00000004000056e8)
                                                                                                                                                                                                                                  (br $B1)
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                              (i64.const 0x00000004000056c3)
                                                                                                                                                                                                                              (br $B1)
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                          (i64.const 0x00000004000056a0)
                                                                                                                                                                                                                          (br $B1)
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                      (i64.const 0x0000000400005677)
                                                                                                                                                                                                                      (br $B1)
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                  (i64.const 0x000000040000564e)
                                                                                                                                                                                                                  (br $B1)
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (i64.const 0x000000040000561f)
                                                                                                                                                                                                              (br $B1)
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (i64.const 0x00000004000055f0)
                                                                                                                                                                                                          (br $B1)
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (i64.const 0x00000004000055c3)
                                                                                                                                                                                                      (br $B1)
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (i64.const 0x00000004000055a4)
                                                                                                                                                                                                  (br $B1)
                                                                                                                                                                                                )
                                                                                                                                                                                              (i64.const 0x0000000400005593)
                                                                                                                                                                                              (br $B1)
                                                                                                                                                                                            )
                                                                                                                                                                                          (i64.const 0x000000040000556a)
                                                                                                                                                                                          (br $B1)
                                                                                                                                                                                        )
                                                                                                                                                                                      (i64.const 0x000000040000554d)
                                                                                                                                                                                      (br $B1)
                                                                                                                                                                                    )
                                                                                                                                                                                  (i64.const 0x0000000400005522)
                                                                                                                                                                                  (br $B1)
                                                                                                                                                                                )
                                                                                                                                                                              (i64.const 0x00000004000054fd)
                                                                                                                                                                              (br $B1)
                                                                                                                                                                            )
                                                                                                                                                                          (i64.const 0x00000004000054d8)
                                                                                                                                                                          (br $B1)
                                                                                                                                                                        )
                                                                                                                                                                      (i64.const 0x00000004000054ab)
                                                                                                                                                                      (br $B1)
                                                                                                                                                                    )
                                                                                                                                                                  (i64.const 0x0000000400005486)
                                                                                                                                                                  (br $B1)
                                                                                                                                                                )
                                                                                                                                                              (i64.const 0x0000000400005451)
                                                                                                                                                              (br $B1)
                                                                                                                                                            )
                                                                                                                                                          (i64.const 0x000000040000541c)
                                                                                                                                                          (br $B1)
                                                                                                                                                        )
                                                                                                                                                      (i64.const 0x00000004000053fb)
                                                                                                                                                      (br $B1)
                                                                                                                                                    )
                                                                                                                                                  (i64.const 0x00000004000053dc)
                                                                                                                                                  (br $B1)
                                                                                                                                                )
                                                                                                                                              (i64.const 0x00000004000053ad)
                                                                                                                                              (br $B1)
                                                                                                                                            )
                                                                                                                                          (i64.const 0x0000000400005386)
                                                                                                                                          (br $B1)
                                                                                                                                        )
                                                                                                                                      (i64.const 0x000000040000535d)
                                                                                                                                      (br $B1)
                                                                                                                                    )
                                                                                                                                  (i64.const 0x000000040000533c)
                                                                                                                                  (br $B1)
                                                                                                                                )
                                                                                                                              (i64.const 0x0000000400005313)
                                                                                                                              (br $B1)
                                                                                                                            )
                                                                                                                          (i64.const 0x00000004000052ee)
                                                                                                                          (br $B1)
                                                                                                                        )
                                                                                                                      (i64.const 0x00000004000052c7)
                                                                                                                      (br $B1)
                                                                                                                    )
                                                                                                                  (i64.const 0x000000040000529e)
                                                                                                                  (br $B1)
                                                                                                                )
                                                                                                              (i64.const 0x0000000400005277)
                                                                                                              (br $B1)
                                                                                                            )
                                                                                                          (i64.const 0x0000000400005252)
                                                                                                          (br $B1)
                                                                                                        )
                                                                                                      (i64.const 0x0000000400005219)
                                                                                                      (br $B1)
                                                                                                    )
                                                                                                  (i64.const 0x00000004000051ee)
                                                                                                  (br $B1)
                                                                                                )
                                                                                              (i64.const 0x00000004000051c3)
                                                                                              (br $B1)
                                                                                            )
                                                                                          (i64.const 0x000000040000519e)
                                                                                          (br $B1)
                                                                                        )
                                                                                      (i64.const 0x0000000400005173)
                                                                                      (br $B1)
                                                                                    )
                                                                                  (i64.const 0x000000040000514c)
                                                                                  (br $B1)
                                                                                )
                                                                              (i64.const 0x0000000400005121)
                                                                              (br $B1)
                                                                            )
                                                                          (i64.const 0x0000000400005100)
                                                                          (br $B1)
                                                                        )
                                                                      (i64.const 0x00000004000050d7)
                                                                      (br $B1)
                                                                    )
                                                                  (i64.const 0x00000004000050ba)
                                                                  (br $B1)
                                                                )
                                                              (i64.const 0x000000040000509b)
                                                              (br $B1)
                                                            )
                                                          (i64.const 0x000000040000507c)
                                                          (br $B1)
                                                        )
                                                      (i64.const 0x0000000400005063)
                                                      (br $B1)
                                                    )
                                                  (i64.const 0x000000040000504c)
                                                  (br $B1)
                                                )
                                              (i64.const 0x000000040000502d)
                                              (br $B1)
                                            )
                                          (i64.const 0x0000000400004ff2)
                                          (br $B1)
                                        )
                                      (i64.const 0x0000000400004fcd)
                                      (br $B1)
                                    )
                                  (i64.const 0x0000000400004fb6)
                                  (br $B1)
                                )
                              (i64.const 0x0000000400004f8d)
                              (br $B1)
                            )
                          (i64.const 0x0000000400004f6c)
                          (br $B1)
                        )
                      (i64.const 0x0000000400004f41)
                      (br $B1)
                    )
                  (i64.const 0x0000000400004f2c)
                  (br $B1)
                )
              (i64.const 0x0000000400004f0f)
              (br $B1)
            )
          (i64.const 0x0000000400004ef8)
          (br $B1)
        )
      (i64.const 0x0000000400004ee1)
      (br $B1)
    )
  )
  (func $src::compiler::nodes::CodeNode.getAnnotations_1 (param $self i64) (result i64)
    (local $var$1 i64)
    (block $B1 (result i64)
      (local.set $var$1 (call $src::compiler::nodes::CodeNode.meta_1 (local.get $self)))
      (block $B1_0
          (block $B1_1
              (br_if $B1_0 (call $src::compiler::nodes::NodeMeta.is_1 (local.get $var$1)))
            )
          (call $src::compiler::annotations::NoAnnotation.apply_1)
          (br $B1)
        )
      (call $src::compiler::nodes::NodeMeta.annotations_1 (local.get $var$1))
      (br $B1)
    )
  )
  (func $src::compiler::nodes::CodeNode.annotate_1 (param $self i64) (param $annotation i64) (result i64)
    (local $var$2 i64)
    (block $B1 (result i64)
      (block $B2
          (local.set $var$2 (call $src::compiler::nodes::CodeNode.meta_1 (local.get $self)))
          (block $B2_0
              (block $B2_1
                  (br_if $B2_0 (call $src::compiler::nodes::NodeMeta.is_1 (local.get $var$2)))
                )
              (call $support::env::printf_15 (call $system::core::string::string.++_1 (i64.const 0x00000004000057d1) (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $self))))
              (br $B2)
            )
          (call $src::compiler::nodes::NodeMeta.annotate_1 (local.get $var$2) (local.get $annotation))
          (br $B2)
        )
      (local.get $self)
    )
  )
  (func $src::compiler::nodes::CodeNode.meta_1 (param $self i64) (result i64)
    (local $src::compiler::nodes::meta_62 i64)
    (local $src::compiler::nodes::meta_63 i64)
    (local $src::compiler::nodes::meta_64 i64)
    (local $src::compiler::nodes::meta_65 i64)
    (local $src::compiler::nodes::meta_66 i64)
    (local $src::compiler::nodes::meta_67 i64)
    (local $src::compiler::nodes::meta_68 i64)
    (local $src::compiler::nodes::meta_69 i64)
    (local $src::compiler::nodes::meta_70 i64)
    (local $src::compiler::nodes::meta_71 i64)
    (local $src::compiler::nodes::meta_72 i64)
    (local $src::compiler::nodes::meta_73 i64)
    (local $src::compiler::nodes::meta_74 i64)
    (local $src::compiler::nodes::meta_75 i64)
    (local $src::compiler::nodes::meta_76 i64)
    (local $src::compiler::nodes::meta_77 i64)
    (local $src::compiler::nodes::meta_78 i64)
    (local $src::compiler::nodes::meta_79 i64)
    (local $src::compiler::nodes::meta_80 i64)
    (local $src::compiler::nodes::meta_81 i64)
    (local $src::compiler::nodes::meta_82 i64)
    (local $src::compiler::nodes::meta_83 i64)
    (local $src::compiler::nodes::meta_84 i64)
    (local $src::compiler::nodes::meta_85 i64)
    (local $src::compiler::nodes::meta_86 i64)
    (local $src::compiler::nodes::meta_87 i64)
    (local $src::compiler::nodes::meta_88 i64)
    (local $src::compiler::nodes::meta_89 i64)
    (local $src::compiler::nodes::meta_90 i64)
    (local $src::compiler::nodes::meta_91 i64)
    (local $src::compiler::nodes::meta_92 i64)
    (local $src::compiler::nodes::meta_93 i64)
    (local $src::compiler::nodes::meta_94 i64)
    (local $src::compiler::nodes::meta_95 i64)
    (local $src::compiler::nodes::meta_96 i64)
    (local $src::compiler::nodes::meta_97 i64)
    (local $src::compiler::nodes::meta_98 i64)
    (local $src::compiler::nodes::meta_99 i64)
    (local $src::compiler::nodes::meta_100 i64)
    (local $src::compiler::nodes::meta_101 i64)
    (local $src::compiler::nodes::meta_102 i64)
    (local $src::compiler::nodes::meta_103 i64)
    (local $src::compiler::nodes::meta_104 i64)
    (local $src::compiler::nodes::meta_105 i64)
    (local $src::compiler::nodes::meta_106 i64)
    (local $src::compiler::nodes::meta_107 i64)
    (local $src::compiler::nodes::meta_108 i64)
    (local $src::compiler::nodes::meta_109 i64)
    (local $src::compiler::nodes::meta_110 i64)
    (local $src::compiler::nodes::meta_111 i64)
    (local $src::compiler::nodes::meta_112 i64)
    (local $src::compiler::nodes::meta_113 i64)
    (local $src::compiler::nodes::meta_114 i64)
    (local $src::compiler::nodes::meta_115 i64)
    (local $src::compiler::nodes::meta_116 i64)
    (local $src::compiler::nodes::meta_117 i64)
    (local $src::compiler::nodes::meta_118 i64)
    (local $src::compiler::nodes::meta_119 i64)
    (local $src::compiler::nodes::meta_120 i64)
    (local $src::compiler::nodes::meta_121 i64)
    (local $var$61 i64)
    (block $B62 (result i64)
      (local.set $var$61 (local.get $self))
      (block $B62_0
          (block $B62_1
              (block $B62_2
                  (block $B62_3
                      (block $B62_4
                          (block $B62_5
                              (block $B62_6
                                  (block $B62_7
                                      (block $B62_8
                                          (block $B62_9
                                              (block $B62_10
                                                  (block $B62_11
                                                      (block $B62_12
                                                          (block $B62_13
                                                              (block $B62_14
                                                                  (block $B62_15
                                                                      (block $B62_16
                                                                          (block $B62_17
                                                                              (block $B62_18
                                                                                  (block $B62_19
                                                                                      (block $B62_20
                                                                                          (block $B62_21
                                                                                              (block $B62_22
                                                                                                  (block $B62_23
                                                                                                      (block $B62_24
                                                                                                          (block $B62_25
                                                                                                              (block $B62_26
                                                                                                                  (block $B62_27
                                                                                                                      (block $B62_28
                                                                                                                          (block $B62_29
                                                                                                                              (block $B62_30
                                                                                                                                  (block $B62_31
                                                                                                                                      (block $B62_32
                                                                                                                                          (block $B62_33
                                                                                                                                              (block $B62_34
                                                                                                                                                  (block $B62_35
                                                                                                                                                      (block $B62_36
                                                                                                                                                          (block $B62_37
                                                                                                                                                              (block $B62_38
                                                                                                                                                                  (block $B62_39
                                                                                                                                                                      (block $B62_40
                                                                                                                                                                          (block $B62_41
                                                                                                                                                                              (block $B62_42
                                                                                                                                                                                  (block $B62_43
                                                                                                                                                                                      (block $B62_44
                                                                                                                                                                                          (block $B62_45
                                                                                                                                                                                              (block $B62_46
                                                                                                                                                                                                  (block $B62_47
                                                                                                                                                                                                      (block $B62_48
                                                                                                                                                                                                          (block $B62_49
                                                                                                                                                                                                              (block $B62_50
                                                                                                                                                                                                                  (block $B62_51
                                                                                                                                                                                                                      (block $B62_52
                                                                                                                                                                                                                          (block $B62_53
                                                                                                                                                                                                                              (block $B62_54
                                                                                                                                                                                                                                  (block $B62_55
                                                                                                                                                                                                                                      (block $B62_56
                                                                                                                                                                                                                                          (block $B62_57
                                                                                                                                                                                                                                              (block $B62_58
                                                                                                                                                                                                                                                  (block $B62_59
                                                                                                                                                                                                                                                      (block $B62_60
                                                                                                                                                                                                                                                          (br_if $B62_0 (call $src::compiler::nodes::ErrorNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_1 (call $src::compiler::nodes::Document.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_2 (call $src::compiler::nodes::PrivateModifierNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_3 (call $src::compiler::nodes::NoModifierNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_4 (call $src::compiler::nodes::NameIdentifierNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_5 (call $src::compiler::nodes::QNameNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_6 (call $src::compiler::nodes::FunctionTypeNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_7 (call $src::compiler::nodes::EffectMemberDeclarationNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_8 (call $src::compiler::nodes::ReferenceNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_9 (call $src::compiler::nodes::BlockNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_10 (call $src::compiler::nodes::MemberNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_11 (call $src::compiler::nodes::DecoratorNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_12 (call $src::compiler::nodes::ParameterNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_13 (call $src::compiler::nodes::FunctionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_14 (call $src::compiler::nodes::VarDeclarationNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_15 (call $src::compiler::nodes::AssignmentNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_16 (call $src::compiler::nodes::ParenExpressionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_17 (call $src::compiler::nodes::ImplDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_18 (call $src::compiler::nodes::ImportDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_19 (call $src::compiler::nodes::FunDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_20 (call $src::compiler::nodes::EffectDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_21 (call $src::compiler::nodes::OverloadedFunDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_22 (call $src::compiler::nodes::VarDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_23 (call $src::compiler::nodes::TypeDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_24 (call $src::compiler::nodes::TraitDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_25 (call $src::compiler::nodes::EnumDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_26 (call $src::compiler::nodes::StructDirectiveNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_27 (call $src::compiler::nodes::FloatLiteralNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_28 (call $src::compiler::nodes::IntegerLiteralNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_29 (call $src::compiler::nodes::HexLiteralNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_30 (call $src::compiler::nodes::BooleanLiteralNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_31 (call $src::compiler::nodes::StringLiteralNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_32 (call $src::compiler::nodes::UnknownExpressionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_33 (call $src::compiler::nodes::InjectedLiteralNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_34 (call $src::compiler::nodes::StackLiteralNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_35 (call $src::compiler::nodes::NameLiteralPairNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_36 (call $src::compiler::nodes::StackTypeNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_37 (call $src::compiler::nodes::StructTypeNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_38 (call $src::compiler::nodes::AbstractFunctionCallNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_39 (call $src::compiler::nodes::InjectedFunctionCallNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_40 (call $src::compiler::nodes::FunctionCallNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_41 (call $src::compiler::nodes::BinaryExpressionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_42 (call $src::compiler::nodes::AsExpressionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_43 (call $src::compiler::nodes::IsExpressionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_44 (call $src::compiler::nodes::UnaryExpressionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_45 (call $src::compiler::nodes::WasmAtomNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_46 (call $src::compiler::nodes::WasmExpressionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_47 (call $src::compiler::nodes::IfNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_48 (call $src::compiler::nodes::UnionTypeNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_49 (call $src::compiler::nodes::IntersectionTypeNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_50 (call $src::compiler::nodes::StructDeclarationNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_51 (call $src::compiler::nodes::EffectDeclarationNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_52 (call $src::compiler::nodes::PatternMatcherNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_53 (call $src::compiler::nodes::MatchConditionNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_54 (call $src::compiler::nodes::MatchCaseIsNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_55 (call $src::compiler::nodes::MatchLiteralNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_56 (call $src::compiler::nodes::MatchDefaultNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_57 (call $src::compiler::nodes::LoopNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_58 (call $src::compiler::nodes::ContinueNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                          (br_if $B62_59 (call $src::compiler::nodes::BreakNode.is_1 (local.get $var$61)))
                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                      (block $B61 (result i64)
                                                                                                                                                                                                                                                          (call $src::helpers::Nil.apply_1)
                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                      (br $B62)
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                  (block $B60 (result i64)
                                                                                                                                                                                                                                                      (local.set $src::compiler::nodes::meta_121 (call $src::compiler::nodes::BreakNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                                                      (local.get $src::compiler::nodes::meta_121)
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                  (br $B62)
                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                              (block $B59 (result i64)
                                                                                                                                                                                                                                                  (local.set $src::compiler::nodes::meta_120 (call $src::compiler::nodes::ContinueNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                                                  (local.get $src::compiler::nodes::meta_120)
                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                              (br $B62)
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                          (block $B58 (result i64)
                                                                                                                                                                                                                                              (local.set $src::compiler::nodes::meta_119 (call $src::compiler::nodes::LoopNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                                              (local.get $src::compiler::nodes::meta_119)
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                          (br $B62)
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                      (block $B57 (result i64)
                                                                                                                                                                                                                                          (local.set $src::compiler::nodes::meta_118 (call $src::compiler::nodes::MatchDefaultNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                                          (local.get $src::compiler::nodes::meta_118)
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                      (br $B62)
                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                  (block $B56 (result i64)
                                                                                                                                                                                                                                      (local.set $src::compiler::nodes::meta_117 (call $src::compiler::nodes::MatchLiteralNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                                      (local.get $src::compiler::nodes::meta_117)
                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                  (br $B62)
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                              (block $B55 (result i64)
                                                                                                                                                                                                                                  (local.set $src::compiler::nodes::meta_116 (call $src::compiler::nodes::MatchCaseIsNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                                  (local.get $src::compiler::nodes::meta_116)
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                              (br $B62)
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                          (block $B54 (result i64)
                                                                                                                                                                                                                              (local.set $src::compiler::nodes::meta_115 (call $src::compiler::nodes::MatchConditionNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                              (local.get $src::compiler::nodes::meta_115)
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                          (br $B62)
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                      (block $B53 (result i64)
                                                                                                                                                                                                                          (local.set $src::compiler::nodes::meta_114 (call $src::compiler::nodes::PatternMatcherNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                          (local.get $src::compiler::nodes::meta_114)
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                      (br $B62)
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                  (block $B52 (result i64)
                                                                                                                                                                                                                      (local.set $src::compiler::nodes::meta_113 (call $src::compiler::nodes::EffectDeclarationNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                      (local.get $src::compiler::nodes::meta_113)
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                  (br $B62)
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (block $B51 (result i64)
                                                                                                                                                                                                                  (local.set $src::compiler::nodes::meta_112 (call $src::compiler::nodes::StructDeclarationNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                                  (local.get $src::compiler::nodes::meta_112)
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (br $B62)
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (block $B50 (result i64)
                                                                                                                                                                                                              (local.set $src::compiler::nodes::meta_111 (call $src::compiler::nodes::IntersectionTypeNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                              (local.get $src::compiler::nodes::meta_111)
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (br $B62)
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (block $B49 (result i64)
                                                                                                                                                                                                          (local.set $src::compiler::nodes::meta_110 (call $src::compiler::nodes::UnionTypeNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                          (local.get $src::compiler::nodes::meta_110)
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (br $B62)
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (block $B48 (result i64)
                                                                                                                                                                                                      (local.set $src::compiler::nodes::meta_109 (call $src::compiler::nodes::IfNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                      (local.get $src::compiler::nodes::meta_109)
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (br $B62)
                                                                                                                                                                                                )
                                                                                                                                                                                              (block $B47 (result i64)
                                                                                                                                                                                                  (local.set $src::compiler::nodes::meta_108 (call $src::compiler::nodes::WasmExpressionNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                                  (local.get $src::compiler::nodes::meta_108)
                                                                                                                                                                                                )
                                                                                                                                                                                              (br $B62)
                                                                                                                                                                                            )
                                                                                                                                                                                          (block $B46 (result i64)
                                                                                                                                                                                              (local.set $src::compiler::nodes::meta_107 (call $src::compiler::nodes::WasmAtomNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                              (local.get $src::compiler::nodes::meta_107)
                                                                                                                                                                                            )
                                                                                                                                                                                          (br $B62)
                                                                                                                                                                                        )
                                                                                                                                                                                      (block $B45 (result i64)
                                                                                                                                                                                          (local.set $src::compiler::nodes::meta_106 (call $src::compiler::nodes::UnaryExpressionNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                          (local.get $src::compiler::nodes::meta_106)
                                                                                                                                                                                        )
                                                                                                                                                                                      (br $B62)
                                                                                                                                                                                    )
                                                                                                                                                                                  (block $B44 (result i64)
                                                                                                                                                                                      (local.set $src::compiler::nodes::meta_105 (call $src::compiler::nodes::IsExpressionNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                      (local.get $src::compiler::nodes::meta_105)
                                                                                                                                                                                    )
                                                                                                                                                                                  (br $B62)
                                                                                                                                                                                )
                                                                                                                                                                              (block $B43 (result i64)
                                                                                                                                                                                  (local.set $src::compiler::nodes::meta_104 (call $src::compiler::nodes::AsExpressionNode.meta_1 (local.get $var$61)))
                                                                                                                                                                                  (local.get $src::compiler::nodes::meta_104)
                                                                                                                                                                                )
                                                                                                                                                                              (br $B62)
                                                                                                                                                                            )
                                                                                                                                                                          (block $B42 (result i64)
                                                                                                                                                                              (local.set $src::compiler::nodes::meta_103 (call $src::compiler::nodes::BinaryExpressionNode.meta_1 (local.get $var$61)))
                                                                                                                                                                              (local.get $src::compiler::nodes::meta_103)
                                                                                                                                                                            )
                                                                                                                                                                          (br $B62)
                                                                                                                                                                        )
                                                                                                                                                                      (block $B41 (result i64)
                                                                                                                                                                          (local.set $src::compiler::nodes::meta_102 (call $src::compiler::nodes::FunctionCallNode.meta_1 (local.get $var$61)))
                                                                                                                                                                          (local.get $src::compiler::nodes::meta_102)
                                                                                                                                                                        )
                                                                                                                                                                      (br $B62)
                                                                                                                                                                    )
                                                                                                                                                                  (block $B40 (result i64)
                                                                                                                                                                      (local.set $src::compiler::nodes::meta_101 (call $src::compiler::nodes::InjectedFunctionCallNode.meta_1 (local.get $var$61)))
                                                                                                                                                                      (local.get $src::compiler::nodes::meta_101)
                                                                                                                                                                    )
                                                                                                                                                                  (br $B62)
                                                                                                                                                                )
                                                                                                                                                              (block $B39 (result i64)
                                                                                                                                                                  (local.set $src::compiler::nodes::meta_100 (call $src::compiler::nodes::AbstractFunctionCallNode.meta_1 (local.get $var$61)))
                                                                                                                                                                  (local.get $src::compiler::nodes::meta_100)
                                                                                                                                                                )
                                                                                                                                                              (br $B62)
                                                                                                                                                            )
                                                                                                                                                          (block $B38 (result i64)
                                                                                                                                                              (local.set $src::compiler::nodes::meta_99 (call $src::compiler::nodes::StructTypeNode.meta_1 (local.get $var$61)))
                                                                                                                                                              (local.get $src::compiler::nodes::meta_99)
                                                                                                                                                            )
                                                                                                                                                          (br $B62)
                                                                                                                                                        )
                                                                                                                                                      (block $B37 (result i64)
                                                                                                                                                          (local.set $src::compiler::nodes::meta_98 (call $src::compiler::nodes::StackTypeNode.meta_1 (local.get $var$61)))
                                                                                                                                                          (local.get $src::compiler::nodes::meta_98)
                                                                                                                                                        )
                                                                                                                                                      (br $B62)
                                                                                                                                                    )
                                                                                                                                                  (block $B36 (result i64)
                                                                                                                                                      (local.set $src::compiler::nodes::meta_97 (call $src::compiler::nodes::NameLiteralPairNode.meta_1 (local.get $var$61)))
                                                                                                                                                      (local.get $src::compiler::nodes::meta_97)
                                                                                                                                                    )
                                                                                                                                                  (br $B62)
                                                                                                                                                )
                                                                                                                                              (block $B35 (result i64)
                                                                                                                                                  (local.set $src::compiler::nodes::meta_96 (call $src::compiler::nodes::StackLiteralNode.meta_1 (local.get $var$61)))
                                                                                                                                                  (local.get $src::compiler::nodes::meta_96)
                                                                                                                                                )
                                                                                                                                              (br $B62)
                                                                                                                                            )
                                                                                                                                          (block $B34 (result i64)
                                                                                                                                              (local.set $src::compiler::nodes::meta_95 (call $src::compiler::nodes::InjectedLiteralNode.meta_1 (local.get $var$61)))
                                                                                                                                              (local.get $src::compiler::nodes::meta_95)
                                                                                                                                            )
                                                                                                                                          (br $B62)
                                                                                                                                        )
                                                                                                                                      (block $B33 (result i64)
                                                                                                                                          (local.set $src::compiler::nodes::meta_94 (call $src::compiler::nodes::UnknownExpressionNode.meta_1 (local.get $var$61)))
                                                                                                                                          (local.get $src::compiler::nodes::meta_94)
                                                                                                                                        )
                                                                                                                                      (br $B62)
                                                                                                                                    )
                                                                                                                                  (block $B32 (result i64)
                                                                                                                                      (local.set $src::compiler::nodes::meta_93 (call $src::compiler::nodes::StringLiteralNode.meta_1 (local.get $var$61)))
                                                                                                                                      (local.get $src::compiler::nodes::meta_93)
                                                                                                                                    )
                                                                                                                                  (br $B62)
                                                                                                                                )
                                                                                                                              (block $B31 (result i64)
                                                                                                                                  (local.set $src::compiler::nodes::meta_92 (call $src::compiler::nodes::BooleanLiteralNode.meta_1 (local.get $var$61)))
                                                                                                                                  (local.get $src::compiler::nodes::meta_92)
                                                                                                                                )
                                                                                                                              (br $B62)
                                                                                                                            )
                                                                                                                          (block $B30 (result i64)
                                                                                                                              (local.set $src::compiler::nodes::meta_91 (call $src::compiler::nodes::HexLiteralNode.meta_1 (local.get $var$61)))
                                                                                                                              (local.get $src::compiler::nodes::meta_91)
                                                                                                                            )
                                                                                                                          (br $B62)
                                                                                                                        )
                                                                                                                      (block $B29 (result i64)
                                                                                                                          (local.set $src::compiler::nodes::meta_90 (call $src::compiler::nodes::IntegerLiteralNode.meta_1 (local.get $var$61)))
                                                                                                                          (local.get $src::compiler::nodes::meta_90)
                                                                                                                        )
                                                                                                                      (br $B62)
                                                                                                                    )
                                                                                                                  (block $B28 (result i64)
                                                                                                                      (local.set $src::compiler::nodes::meta_89 (call $src::compiler::nodes::FloatLiteralNode.meta_1 (local.get $var$61)))
                                                                                                                      (local.get $src::compiler::nodes::meta_89)
                                                                                                                    )
                                                                                                                  (br $B62)
                                                                                                                )
                                                                                                              (block $B27 (result i64)
                                                                                                                  (local.set $src::compiler::nodes::meta_88 (call $src::compiler::nodes::StructDirectiveNode.meta_1 (local.get $var$61)))
                                                                                                                  (local.get $src::compiler::nodes::meta_88)
                                                                                                                )
                                                                                                              (br $B62)
                                                                                                            )
                                                                                                          (block $B26 (result i64)
                                                                                                              (local.set $src::compiler::nodes::meta_87 (call $src::compiler::nodes::EnumDirectiveNode.meta_1 (local.get $var$61)))
                                                                                                              (local.get $src::compiler::nodes::meta_87)
                                                                                                            )
                                                                                                          (br $B62)
                                                                                                        )
                                                                                                      (block $B25 (result i64)
                                                                                                          (local.set $src::compiler::nodes::meta_86 (call $src::compiler::nodes::TraitDirectiveNode.meta_1 (local.get $var$61)))
                                                                                                          (local.get $src::compiler::nodes::meta_86)
                                                                                                        )
                                                                                                      (br $B62)
                                                                                                    )
                                                                                                  (block $B24 (result i64)
                                                                                                      (local.set $src::compiler::nodes::meta_85 (call $src::compiler::nodes::TypeDirectiveNode.meta_1 (local.get $var$61)))
                                                                                                      (local.get $src::compiler::nodes::meta_85)
                                                                                                    )
                                                                                                  (br $B62)
                                                                                                )
                                                                                              (block $B23 (result i64)
                                                                                                  (local.set $src::compiler::nodes::meta_84 (call $src::compiler::nodes::VarDirectiveNode.meta_1 (local.get $var$61)))
                                                                                                  (local.get $src::compiler::nodes::meta_84)
                                                                                                )
                                                                                              (br $B62)
                                                                                            )
                                                                                          (block $B22 (result i64)
                                                                                              (local.set $src::compiler::nodes::meta_83 (call $src::compiler::nodes::OverloadedFunDirectiveNode.meta_1 (local.get $var$61)))
                                                                                              (local.get $src::compiler::nodes::meta_83)
                                                                                            )
                                                                                          (br $B62)
                                                                                        )
                                                                                      (block $B21 (result i64)
                                                                                          (local.set $src::compiler::nodes::meta_82 (call $src::compiler::nodes::EffectDirectiveNode.meta_1 (local.get $var$61)))
                                                                                          (local.get $src::compiler::nodes::meta_82)
                                                                                        )
                                                                                      (br $B62)
                                                                                    )
                                                                                  (block $B20 (result i64)
                                                                                      (local.set $src::compiler::nodes::meta_81 (call $src::compiler::nodes::FunDirectiveNode.meta_1 (local.get $var$61)))
                                                                                      (local.get $src::compiler::nodes::meta_81)
                                                                                    )
                                                                                  (br $B62)
                                                                                )
                                                                              (block $B19 (result i64)
                                                                                  (local.set $src::compiler::nodes::meta_80 (call $src::compiler::nodes::ImportDirectiveNode.meta_1 (local.get $var$61)))
                                                                                  (local.get $src::compiler::nodes::meta_80)
                                                                                )
                                                                              (br $B62)
                                                                            )
                                                                          (block $B18 (result i64)
                                                                              (local.set $src::compiler::nodes::meta_79 (call $src::compiler::nodes::ImplDirectiveNode.meta_1 (local.get $var$61)))
                                                                              (local.get $src::compiler::nodes::meta_79)
                                                                            )
                                                                          (br $B62)
                                                                        )
                                                                      (block $B17 (result i64)
                                                                          (local.set $src::compiler::nodes::meta_78 (call $src::compiler::nodes::ParenExpressionNode.meta_1 (local.get $var$61)))
                                                                          (local.get $src::compiler::nodes::meta_78)
                                                                        )
                                                                      (br $B62)
                                                                    )
                                                                  (block $B16 (result i64)
                                                                      (local.set $src::compiler::nodes::meta_77 (call $src::compiler::nodes::AssignmentNode.meta_1 (local.get $var$61)))
                                                                      (local.get $src::compiler::nodes::meta_77)
                                                                    )
                                                                  (br $B62)
                                                                )
                                                              (block $B15 (result i64)
                                                                  (local.set $src::compiler::nodes::meta_76 (call $src::compiler::nodes::VarDeclarationNode.meta_1 (local.get $var$61)))
                                                                  (local.get $src::compiler::nodes::meta_76)
                                                                )
                                                              (br $B62)
                                                            )
                                                          (block $B14 (result i64)
                                                              (local.set $src::compiler::nodes::meta_75 (call $src::compiler::nodes::FunctionNode.meta_1 (local.get $var$61)))
                                                              (local.get $src::compiler::nodes::meta_75)
                                                            )
                                                          (br $B62)
                                                        )
                                                      (block $B13 (result i64)
                                                          (local.set $src::compiler::nodes::meta_74 (call $src::compiler::nodes::ParameterNode.meta_1 (local.get $var$61)))
                                                          (local.get $src::compiler::nodes::meta_74)
                                                        )
                                                      (br $B62)
                                                    )
                                                  (block $B12 (result i64)
                                                      (local.set $src::compiler::nodes::meta_73 (call $src::compiler::nodes::DecoratorNode.meta_1 (local.get $var$61)))
                                                      (local.get $src::compiler::nodes::meta_73)
                                                    )
                                                  (br $B62)
                                                )
                                              (block $B11 (result i64)
                                                  (local.set $src::compiler::nodes::meta_72 (call $src::compiler::nodes::MemberNode.meta_1 (local.get $var$61)))
                                                  (local.get $src::compiler::nodes::meta_72)
                                                )
                                              (br $B62)
                                            )
                                          (block $B10 (result i64)
                                              (local.set $src::compiler::nodes::meta_71 (call $src::compiler::nodes::BlockNode.meta_1 (local.get $var$61)))
                                              (local.get $src::compiler::nodes::meta_71)
                                            )
                                          (br $B62)
                                        )
                                      (block $B9 (result i64)
                                          (local.set $src::compiler::nodes::meta_70 (call $src::compiler::nodes::ReferenceNode.meta_1 (local.get $var$61)))
                                          (local.get $src::compiler::nodes::meta_70)
                                        )
                                      (br $B62)
                                    )
                                  (block $B8 (result i64)
                                      (local.set $src::compiler::nodes::meta_69 (call $src::compiler::nodes::EffectMemberDeclarationNode.meta_1 (local.get $var$61)))
                                      (local.get $src::compiler::nodes::meta_69)
                                    )
                                  (br $B62)
                                )
                              (block $B7 (result i64)
                                  (local.set $src::compiler::nodes::meta_68 (call $src::compiler::nodes::FunctionTypeNode.meta_1 (local.get $var$61)))
                                  (local.get $src::compiler::nodes::meta_68)
                                )
                              (br $B62)
                            )
                          (block $B6 (result i64)
                              (local.set $src::compiler::nodes::meta_67 (call $src::compiler::nodes::QNameNode.meta_1 (local.get $var$61)))
                              (local.get $src::compiler::nodes::meta_67)
                            )
                          (br $B62)
                        )
                      (block $B5 (result i64)
                          (local.set $src::compiler::nodes::meta_66 (call $src::compiler::nodes::NameIdentifierNode.meta_1 (local.get $var$61)))
                          (local.get $src::compiler::nodes::meta_66)
                        )
                      (br $B62)
                    )
                  (block $B4 (result i64)
                      (local.set $src::compiler::nodes::meta_65 (call $src::compiler::nodes::NoModifierNode.meta_1 (local.get $var$61)))
                      (local.get $src::compiler::nodes::meta_65)
                    )
                  (br $B62)
                )
              (block $B3 (result i64)
                  (local.set $src::compiler::nodes::meta_64 (call $src::compiler::nodes::PrivateModifierNode.meta_1 (local.get $var$61)))
                  (local.get $src::compiler::nodes::meta_64)
                )
              (br $B62)
            )
          (block $B2 (result i64)
              (local.set $src::compiler::nodes::meta_63 (call $src::compiler::nodes::Document.meta_1 (local.get $var$61)))
              (local.get $src::compiler::nodes::meta_63)
            )
          (br $B62)
        )
      (block $B1 (result i64)
          (local.set $src::compiler::nodes::meta_62 (call $src::compiler::nodes::ErrorNode.meta_1 (local.get $var$61)))
          (local.get $src::compiler::nodes::meta_62)
        )
      (br $B62)
    )
  )
  (func $src::compiler::nodes::CodeNode.printWithSeparator_1 (param $self i64) (param $sb i64) (param $indentation i32) (param $separator i64) (result i32)
    (block $B1 (result i32)
      (call $src::compiler::nodes::CodeNode.printWithSeparator_2 (local.get $self) (local.get $sb) (local.get $indentation) (local.get $separator) (i32.const 0))
    )
  )
  (func $src::compiler::nodes::CodeNode.printWithSeparator_2 (param $self i64) (param $sb i64) (param $indentation i32) (param $separator i64) (param $counter i32) (result i32)
    (local $src::compiler::nodes::current i64)
    (local $src::compiler::nodes::ct i32)
    (local $src::compiler::nodes::head_1 i64)
    (local $src::compiler::nodes::tail_1 i64)
    (local $var$9 i64)
    (block $B1 (result i32)
      (local.set $src::compiler::nodes::current (local.get $self))
      (local.set $src::compiler::nodes::ct (local.get $counter))
      (block $B8
          (local.set $var$9 (local.get $src::compiler::nodes::current))
          (block $B8_0
              (block $B8_1
                  (br_if $B8_0 (call $src::compiler::nodes::CodeNodeCons.is_1 (local.get $var$9)))
                )
              (block $B3
                  (if $IF4 (call $system::core::i32::i32.>_1 (local.get $src::compiler::nodes::ct) (i32.const 0))
                      (then
                        (block $B5
                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $separator)))
                            (if $IF6 (call $system::core::string::string.==_1 (local.get $separator) (i64.const 0x00000004000057fc))
                                (then
                                  (block $B7
                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::helpers::repeat_1 (i64.const 0x0000000400005803) (local.get $indentation))))
                                    )
                                )
                                (else)
                              )
                          )
                      )
                      (else)
                    )
                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::current) (local.get $sb) (local.get $indentation))
                  (local.set $src::compiler::nodes::ct (call $system::core::i32::i32.+_1 (local.get $src::compiler::nodes::ct) (i32.const 1)))
                )
              (br $B8)
            )
          (block $B2
              (local.set $src::compiler::nodes::head_1 (call $src::compiler::nodes::CodeNodeCons.head_1 (local.get $var$9)))
              (local.set $src::compiler::nodes::tail_1 (call $src::compiler::nodes::CodeNodeCons.tail_1 (local.get $var$9)))
              (local.set $src::compiler::nodes::ct (call $src::compiler::nodes::CodeNode.printWithSeparator_2 (local.get $src::compiler::nodes::head_1) (local.get $sb) (local.get $indentation) (local.get $separator) (local.get $src::compiler::nodes::ct)))
              (local.set $src::compiler::nodes::ct (call $src::compiler::nodes::CodeNode.printWithSeparator_2 (local.get $src::compiler::nodes::tail_1) (local.get $sb) (local.get $indentation) (local.get $separator) (local.get $src::compiler::nodes::ct)))
              (local.set $src::compiler::nodes::current (local.get $src::compiler::nodes::tail_1))
            )
          (br $B8)
        )
      (local.get $src::compiler::nodes::ct)
    )
  )
  (func $src::compiler::nodes::CodeNode.printCurlyBlock_1 (param $head i64) (param $sb i64) (param $indentation i32)
    (local $src::compiler::nodes::ind i64)
    (block $B1
      (local.set $src::compiler::nodes::ind (call $src::helpers::repeat_1 (i64.const 0x000000040000580c) (local.get $indentation)))
      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005815)) (local.get $src::compiler::nodes::ind)) (i64.const 0x000000040000581e)))
      (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $head) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)) (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400005827) (local.get $src::compiler::nodes::ind)) (i64.const 0x000000040000582e))))
      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005837)) (local.get $src::compiler::nodes::ind)) (i64.const 0x000000040000583e)))
    )
  )
  (func $src::compiler::nodes::CodeNode.printNode_1 (param $self i64) (param $sb i64) (param $indentation i32)
    (local $src::compiler::nodes::ind_1 i64)
    (local $src::compiler::nodes::desc_1 i64)
    (local $src::compiler::nodes::head_3 i64)
    (local $src::compiler::nodes::tail_2 i64)
    (local $src::compiler::nodes::headDirective_3 i64)
    (local $src::compiler::nodes::name_9 i64)
    (local $src::compiler::nodes::names_1 i64)
    (local $src::compiler::nodes::parameters_1 i64)
    (local $src::compiler::nodes::returnType_2 i64)
    (local $src::compiler::nodes::effect_1 i64)
    (local $src::compiler::nodes::variable_1 i64)
    (local $src::compiler::nodes::headStatement_1 i64)
    (local $src::compiler::nodes::lhs_273 i64)
    (local $src::compiler::nodes::operator_3 i64)
    (local $src::compiler::nodes::rhs_77 i64)
    (local $src::compiler::nodes::decoratorName_1 i64)
    (local $src::compiler::nodes::headArgument_5 i64)
    (local $src::compiler::nodes::parameterName_1 i64)
    (local $src::compiler::nodes::parameterType_1 i64)
    (local $src::compiler::nodes::functionName_2 i64)
    (local $src::compiler::nodes::headParameter_3 i64)
    (local $src::compiler::nodes::returnType_3 i64)
    (local $src::compiler::nodes::body_5 i64)
    (local $src::compiler::nodes::meta_122 i64)
    (local $src::compiler::nodes::name_10 i64)
    (local $src::compiler::nodes::typeDecl_1 i64)
    (local $src::compiler::nodes::value_369 i64)
    (local $src::compiler::nodes::lhs_274 i64)
    (local $src::compiler::nodes::rhs_78 i64)
    (local $src::compiler::nodes::modifier_6 i64)
    (local $src::compiler::nodes::decl_2 i64)
    (local $src::compiler::nodes::baseImpl_1 i64)
    (local $src::compiler::nodes::targetImpl_1 i64)
    (local $src::compiler::nodes::headDirective_4 i64)
    (local $src::compiler::nodes::module_1 i64)
    (local $src::compiler::nodes::alias_1 i64)
    (local $src::compiler::nodes::headDecorator_1 i64)
    (local $src::compiler::nodes::modifier_7 i64)
    (local $src::compiler::nodes::function_1 i64)
    (local $src::compiler::nodes::effectDecl_1 i64)
    (local $src::compiler::nodes::functionName_3 i64)
    (local $src::compiler::nodes::headFun_1 i64)
    (local $src::compiler::nodes::modifier_8 i64)
    (local $src::compiler::nodes::decl_3 i64)
    (local $src::compiler::nodes::modifier_9 i64)
    (local $src::compiler::nodes::name_11 i64)
    (local $src::compiler::nodes::declType_1 i64)
    (local $src::compiler::nodes::modifier_10 i64)
    (local $src::compiler::nodes::name_12 i64)
    (local $src::compiler::nodes::headDirective_5 i64)
    (local $src::compiler::nodes::modifier_11 i64)
    (local $src::compiler::nodes::name_13 i64)
    (local $src::compiler::nodes::headDeclaration_1 i64)
    (local $src::compiler::nodes::name_14 i64)
    (local $src::compiler::nodes::value_370 i64)
    (local $src::compiler::nodes::value_371 i64)
    (local $src::compiler::nodes::value_372 i64)
    (local $src::compiler::nodes::value_373 i64)
    (local $src::compiler::nodes::value_374 i32)
    (local $src::compiler::nodes::value_375 i64)
    (local $src::compiler::nodes::headNames_1 i64)
    (local $src::compiler::nodes::headParameter_4 i64)
    (local $src::compiler::nodes::headArgument_6 i64)
    (local $src::compiler::nodes::resolvedFunction_3 i64)
    (local $src::compiler::nodes::headArgument_7 i64)
    (local $src::compiler::nodes::resolvedFunction_4 i64)
    (local $src::compiler::nodes::functionNode_1 i64)
    (local $src::compiler::nodes::headArgument_8 i64)
    (local $src::compiler::nodes::resolvedFunction_5 i64)
    (local $src::compiler::nodes::expression_2 i64)
    (local $src::compiler::nodes::lhs_275 i64)
    (local $src::compiler::nodes::operator_4 i64)
    (local $src::compiler::nodes::rhs_79 i64)
    (local $src::compiler::nodes::name_15 i64)
    (local $src::compiler::nodes::lhs_276 i64)
    (local $src::compiler::nodes::rhs_80 i64)
    (local $src::compiler::nodes::lhs_277 i64)
    (local $src::compiler::nodes::rhs_81 i64)
    (local $src::compiler::nodes::operator_5 i64)
    (local $src::compiler::nodes::rhs_82 i64)
    (local $src::compiler::nodes::symbol_1 i64)
    (local $src::compiler::nodes::headArgument_9 i64)
    (local $src::compiler::nodes::headAtom_1 i64)
    (local $src::compiler::nodes::condition_2 i64)
    (local $src::compiler::nodes::truePart_1 i64)
    (local $src::compiler::nodes::falsePart_1 i64)
    (local $src::compiler::nodes::headType_2 i64)
    (local $src::compiler::nodes::headType_3 i64)
    (local $src::compiler::nodes::name_16 i64)
    (local $src::compiler::nodes::headParameter_5 i64)
    (local $src::compiler::nodes::name_17 i64)
    (local $src::compiler::nodes::lhs_278 i64)
    (local $src::compiler::nodes::headMatcher_1 i64)
    (local $src::compiler::nodes::declaredName_3 i64)
    (local $src::compiler::nodes::condition_3 i64)
    (local $src::compiler::nodes::body_6 i64)
    (local $src::compiler::nodes::declaredName_4 i64)
    (local $src::compiler::nodes::typeReference_1 i64)
    (local $src::compiler::nodes::headDeconstruct_1 i64)
    (local $src::compiler::nodes::body_7 i64)
    (local $src::compiler::nodes::literal_1 i64)
    (local $src::compiler::nodes::body_8 i64)
    (local $src::compiler::nodes::declaredName_5 i64)
    (local $src::compiler::nodes::body_9 i64)
    (local $src::compiler::nodes::expression_3 i64)
    (local $var$108 i64)
    (local $var$109 i64)
    (block $B1
      (local.set $src::compiler::nodes::ind_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400005845) (local.get $indentation)))
      (block $B102
          (local.set $var$108 (local.get $self))
          (block $B102_0
              (block $B102_1
                  (block $B102_2
                      (block $B102_3
                          (block $B102_4
                              (block $B102_5
                                  (block $B102_6
                                      (block $B102_7
                                          (block $B102_8
                                              (block $B102_9
                                                  (block $B102_10
                                                      (block $B102_11
                                                          (block $B102_12
                                                              (block $B102_13
                                                                  (block $B102_14
                                                                      (block $B102_15
                                                                          (block $B102_16
                                                                              (block $B102_17
                                                                                  (block $B102_18
                                                                                      (block $B102_19
                                                                                          (block $B102_20
                                                                                              (block $B102_21
                                                                                                  (block $B102_22
                                                                                                      (block $B102_23
                                                                                                          (block $B102_24
                                                                                                              (block $B102_25
                                                                                                                  (block $B102_26
                                                                                                                      (block $B102_27
                                                                                                                          (block $B102_28
                                                                                                                              (block $B102_29
                                                                                                                                  (block $B102_30
                                                                                                                                      (block $B102_31
                                                                                                                                          (block $B102_32
                                                                                                                                              (block $B102_33
                                                                                                                                                  (block $B102_34
                                                                                                                                                      (block $B102_35
                                                                                                                                                          (block $B102_36
                                                                                                                                                              (block $B102_37
                                                                                                                                                                  (block $B102_38
                                                                                                                                                                      (block $B102_39
                                                                                                                                                                          (block $B102_40
                                                                                                                                                                              (block $B102_41
                                                                                                                                                                                  (block $B102_42
                                                                                                                                                                                      (block $B102_43
                                                                                                                                                                                          (block $B102_44
                                                                                                                                                                                              (block $B102_45
                                                                                                                                                                                                  (block $B102_46
                                                                                                                                                                                                      (block $B102_47
                                                                                                                                                                                                          (block $B102_48
                                                                                                                                                                                                              (block $B102_49
                                                                                                                                                                                                                  (block $B102_50
                                                                                                                                                                                                                      (block $B102_51
                                                                                                                                                                                                                          (block $B102_52
                                                                                                                                                                                                                              (block $B102_53
                                                                                                                                                                                                                                  (block $B102_54
                                                                                                                                                                                                                                      (block $B102_55
                                                                                                                                                                                                                                          (block $B102_56
                                                                                                                                                                                                                                              (block $B102_57
                                                                                                                                                                                                                                                  (block $B102_58
                                                                                                                                                                                                                                                      (block $B102_59
                                                                                                                                                                                                                                                          (block $B102_60
                                                                                                                                                                                                                                                              (block $B102_61
                                                                                                                                                                                                                                                                  (br_if $B102_0 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_1 (call $src::compiler::nodes::ErrorNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_2 (call $src::compiler::nodes::CodeNodeCons.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_3 (call $src::compiler::nodes::Document.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_4 (call $src::compiler::nodes::NameIdentifierNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_5 (call $src::compiler::nodes::PrivateModifierNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_6 (call $src::compiler::nodes::NoModifierNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_7 (call $src::compiler::nodes::InjectedLiteralNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_8 (call $src::compiler::nodes::QNameNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_9 (call $src::compiler::nodes::FunctionTypeNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_10 (call $src::compiler::nodes::EffectMemberDeclarationNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_11 (call $src::compiler::nodes::ReferenceNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_12 (call $src::compiler::nodes::BlockNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_13 (call $src::compiler::nodes::MemberNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_14 (call $src::compiler::nodes::DecoratorNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_15 (call $src::compiler::nodes::ParameterNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_16 (call $src::compiler::nodes::FunctionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_17 (call $src::compiler::nodes::VarDeclarationNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_18 (call $src::compiler::nodes::AssignmentNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_19 (call $src::compiler::nodes::StructDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_20 (call $src::compiler::nodes::ImplDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_21 (call $src::compiler::nodes::ImportDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_22 (call $src::compiler::nodes::FunDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_23 (call $src::compiler::nodes::EffectDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_24 (call $src::compiler::nodes::OverloadedFunDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_25 (call $src::compiler::nodes::VarDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_26 (call $src::compiler::nodes::TypeDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_27 (call $src::compiler::nodes::TraitDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_28 (call $src::compiler::nodes::EnumDirectiveNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_29 (call $src::compiler::nodes::NameLiteralPairNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_30 (call $src::compiler::nodes::FloatLiteralNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_31 (call $src::compiler::nodes::IntegerLiteralNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_32 (call $src::compiler::nodes::HexLiteralNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_33 (call $src::compiler::nodes::BooleanLiteralNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_34 (call $src::compiler::nodes::StringLiteralNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_35 (call $src::compiler::nodes::UnknownExpressionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_36 (call $src::compiler::nodes::StackLiteralNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_37 (call $src::compiler::nodes::StructTypeNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_38 (call $src::compiler::nodes::AbstractFunctionCallNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_39 (call $src::compiler::nodes::InjectedFunctionCallNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_40 (call $src::compiler::nodes::FunctionCallNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_41 (call $src::compiler::nodes::ParenExpressionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_42 (call $src::compiler::nodes::BinaryExpressionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_43 (call $src::compiler::nodes::AsExpressionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_44 (call $src::compiler::nodes::IsExpressionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_45 (call $src::compiler::nodes::UnaryExpressionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_46 (call $src::compiler::nodes::WasmAtomNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_47 (call $src::compiler::nodes::WasmExpressionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_48 (call $src::compiler::nodes::IfNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_49 (call $src::compiler::nodes::UnionTypeNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_50 (call $src::compiler::nodes::IntersectionTypeNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_51 (call $src::compiler::nodes::StructDeclarationNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_52 (call $src::compiler::nodes::EffectDeclarationNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_53 (call $src::compiler::nodes::PatternMatcherNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_54 (call $src::compiler::nodes::MatchConditionNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_55 (call $src::compiler::nodes::MatchCaseIsNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_56 (call $src::compiler::nodes::MatchLiteralNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_57 (call $src::compiler::nodes::MatchDefaultNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_58 (call $src::compiler::nodes::LoopNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_59 (call $src::compiler::nodes::ContinueNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                  (br_if $B102_60 (call $src::compiler::nodes::BreakNode.is_1 (local.get $var$108)))
                                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                                              (call $support::env::printf_15 (call $system::core::string::string.++_1 (i64.const 0x0000000400005d13) (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $self))))
                                                                                                                                                                                                                                                              (br $B102)
                                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                                          (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005d04))
                                                                                                                                                                                                                                                          (br $B102)
                                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                                      (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005cef))
                                                                                                                                                                                                                                                      (br $B102)
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                  (block $B101
                                                                                                                                                                                                                                                      (local.set $src::compiler::nodes::expression_3 (call $src::compiler::nodes::LoopNode.expression_1 (local.get $var$108)))
                                                                                                                                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005ce0)))
                                                                                                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::expression_3) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                  (br $B102)
                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                              (block $B98
                                                                                                                                                                                                                                                  (local.set $src::compiler::nodes::declaredName_5 (call $src::compiler::nodes::MatchDefaultNode.declaredName_1 (local.get $var$108)))
                                                                                                                                                                                                                                                  (local.set $src::compiler::nodes::body_9 (call $src::compiler::nodes::MatchDefaultNode.body_1 (local.get $var$108)))
                                                                                                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005cbf)))
                                                                                                                                                                                                                                                  (if $IF99 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::declaredName_5)))
                                                                                                                                                                                                                                                      (then
                                                                                                                                                                                                                                                        (block $B100
                                                                                                                                                                                                                                                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005ccc)))
                                                                                                                                                                                                                                                            (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::declaredName_5) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                                      (else)
                                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005cd3)))
                                                                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::body_9) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                                                                )
                                                                                                                                                                                                                                              (br $B102)
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                          (block $B97
                                                                                                                                                                                                                                              (local.set $src::compiler::nodes::literal_1 (call $src::compiler::nodes::MatchLiteralNode.literal_1 (local.get $var$108)))
                                                                                                                                                                                                                                              (local.set $src::compiler::nodes::body_8 (call $src::compiler::nodes::MatchLiteralNode.body_1 (local.get $var$108)))
                                                                                                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005ca5)))
                                                                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::literal_1) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005cb2)))
                                                                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::body_8) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                          (br $B102)
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                      (block $B94
                                                                                                                                                                                                                                          (local.set $src::compiler::nodes::declaredName_4 (call $src::compiler::nodes::MatchCaseIsNode.declaredName_1 (local.get $var$108)))
                                                                                                                                                                                                                                          (local.set $src::compiler::nodes::typeReference_1 (call $src::compiler::nodes::MatchCaseIsNode.typeReference_1 (local.get $var$108)))
                                                                                                                                                                                                                                          (local.set $src::compiler::nodes::headDeconstruct_1 (call $src::compiler::nodes::MatchCaseIsNode.headDeconstruct_1 (local.get $var$108)))
                                                                                                                                                                                                                                          (local.set $src::compiler::nodes::body_7 (call $src::compiler::nodes::MatchCaseIsNode.body_1 (local.get $var$108)))
                                                                                                                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c77)))
                                                                                                                                                                                                                                          (if $IF95 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::declaredName_4)))
                                                                                                                                                                                                                                              (then
                                                                                                                                                                                                                                                (block $B96
                                                                                                                                                                                                                                                    (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c84)))
                                                                                                                                                                                                                                                    (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::declaredName_4) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                              (else)
                                                                                                                                                                                                                                            )
                                                                                                                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c8b)))
                                                                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::typeReference_1) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c98)))
                                                                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::body_7) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                      (br $B102)
                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                  (block $B91
                                                                                                                                                                                                                                      (local.set $src::compiler::nodes::declaredName_3 (call $src::compiler::nodes::MatchConditionNode.declaredName_1 (local.get $var$108)))
                                                                                                                                                                                                                                      (local.set $src::compiler::nodes::condition_3 (call $src::compiler::nodes::MatchConditionNode.condition_1 (local.get $var$108)))
                                                                                                                                                                                                                                      (local.set $src::compiler::nodes::body_6 (call $src::compiler::nodes::MatchConditionNode.body_1 (local.get $var$108)))
                                                                                                                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c49)))
                                                                                                                                                                                                                                      (if $IF92 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::declaredName_3)))
                                                                                                                                                                                                                                          (then
                                                                                                                                                                                                                                            (block $B93
                                                                                                                                                                                                                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c56)))
                                                                                                                                                                                                                                                (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::declaredName_3) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                              )
                                                                                                                                                                                                                                          )
                                                                                                                                                                                                                                          (else)
                                                                                                                                                                                                                                        )
                                                                                                                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c5d)))
                                                                                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::condition_3) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c6a)))
                                                                                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::body_6) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                                                    )
                                                                                                                                                                                                                                  (br $B102)
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                              (block $B90
                                                                                                                                                                                                                                  (local.set $src::compiler::nodes::lhs_278 (call $src::compiler::nodes::PatternMatcherNode.lhs_1 (local.get $var$108)))
                                                                                                                                                                                                                                  (local.set $src::compiler::nodes::headMatcher_1 (call $src::compiler::nodes::PatternMatcherNode.headMatcher_1 (local.get $var$108)))
                                                                                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c31)))
                                                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::lhs_278) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c42)))
                                                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printCurlyBlock_1 (local.get $src::compiler::nodes::headMatcher_1) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                )
                                                                                                                                                                                                                              (br $B102)
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                          (block $B89
                                                                                                                                                                                                                              (local.set $src::compiler::nodes::name_17 (call $src::compiler::nodes::EffectDeclarationNode.name_1 (local.get $var$108)))
                                                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::name_17) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                            )
                                                                                                                                                                                                                          (br $B102)
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                      (block $B88
                                                                                                                                                                                                                          (local.set $src::compiler::nodes::name_16 (call $src::compiler::nodes::StructDeclarationNode.name_1 (local.get $var$108)))
                                                                                                                                                                                                                          (local.set $src::compiler::nodes::headParameter_5 (call $src::compiler::nodes::StructDeclarationNode.headParameter_1 (local.get $var$108)))
                                                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::name_16) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c1a)))
                                                                                                                                                                                                                          (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headParameter_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)) (i64.const 0x0000000400005c21)))
                                                                                                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005c2a)))
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                      (br $B102)
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                  (block $B87
                                                                                                                                                                                                                      (local.set $src::compiler::nodes::headType_3 (call $src::compiler::nodes::IntersectionTypeNode.headType_1 (local.get $var$108)))
                                                                                                                                                                                                                      (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headType_3) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)) (i64.const 0x0000000400005c0f)))
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                  (br $B102)
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (block $B86
                                                                                                                                                                                                                  (local.set $src::compiler::nodes::headType_2 (call $src::compiler::nodes::UnionTypeNode.headType_1 (local.get $var$108)))
                                                                                                                                                                                                                  (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headType_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)) (i64.const 0x0000000400005c04)))
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (br $B102)
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (block $B81
                                                                                                                                                                                                              (local.set $src::compiler::nodes::condition_2 (call $src::compiler::nodes::IfNode.condition_1 (local.get $var$108)))
                                                                                                                                                                                                              (local.set $src::compiler::nodes::truePart_1 (call $src::compiler::nodes::IfNode.truePart_1 (local.get $var$108)))
                                                                                                                                                                                                              (local.set $src::compiler::nodes::falsePart_1 (call $src::compiler::nodes::IfNode.falsePart_1 (local.get $var$108)))
                                                                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005bdd)))
                                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::condition_2) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005bea)))
                                                                                                                                                                                                              (block $B82
                                                                                                                                                                                                                  (local.set $var$109 (local.get $src::compiler::nodes::truePart_1))
                                                                                                                                                                                                                  (block $B82_0
                                                                                                                                                                                                                      (block $B82_1
                                                                                                                                                                                                                          (br_if $B82_0 (call $src::compiler::nodes::BlockNode.is_1 (local.get $var$109)))
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::truePart_1) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                                      (br $B82)
                                                                                                                                                                                                                    )
                                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::truePart_1) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                  (br $B82)
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (if $IF83 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::falsePart_1)))
                                                                                                                                                                                                                  (then
                                                                                                                                                                                                                    (block $B84
                                                                                                                                                                                                                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005bf3)))
                                                                                                                                                                                                                        (block $B85
                                                                                                                                                                                                                            (local.set $var$109 (local.get $src::compiler::nodes::falsePart_1))
                                                                                                                                                                                                                            (block $B85_0
                                                                                                                                                                                                                                (block $B85_1
                                                                                                                                                                                                                                    (block $B85_2
                                                                                                                                                                                                                                        (br_if $B85_0 (call $src::compiler::nodes::IfNode.is_1 (local.get $var$109)))
                                                                                                                                                                                                                                        (br_if $B85_1 (call $src::compiler::nodes::BlockNode.is_1 (local.get $var$109)))
                                                                                                                                                                                                                                      )
                                                                                                                                                                                                                                    (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::falsePart_1) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                                                    (br $B85)
                                                                                                                                                                                                                                  )
                                                                                                                                                                                                                                (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::falsePart_1) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                                (br $B85)
                                                                                                                                                                                                                              )
                                                                                                                                                                                                                            (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::falsePart_1) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                                            (br $B85)
                                                                                                                                                                                                                          )
                                                                                                                                                                                                                      )
                                                                                                                                                                                                                  )
                                                                                                                                                                                                                  (else)
                                                                                                                                                                                                                )
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (br $B102)
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (block $B80
                                                                                                                                                                                                          (local.set $src::compiler::nodes::headAtom_1 (call $src::compiler::nodes::WasmExpressionNode.headAtom_1 (local.get $var$108)))
                                                                                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005bcc)))
                                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printCurlyBlock_1 (local.get $src::compiler::nodes::headAtom_1) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (br $B102)
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (block $B77
                                                                                                                                                                                                      (local.set $src::compiler::nodes::symbol_1 (call $src::compiler::nodes::WasmAtomNode.symbol_1 (local.get $var$108)))
                                                                                                                                                                                                      (local.set $src::compiler::nodes::headArgument_9 (call $src::compiler::nodes::WasmAtomNode.headArgument_1 (local.get $var$108)))
                                                                                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005bb0)) (local.get $src::compiler::nodes::symbol_1)))
                                                                                                                                                                                                      (if $IF78 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::headArgument_9)))
                                                                                                                                                                                                          (then
                                                                                                                                                                                                            (block $B79
                                                                                                                                                                                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005bb7)))
                                                                                                                                                                                                              )
                                                                                                                                                                                                          )
                                                                                                                                                                                                          (else)
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headArgument_9) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)) (i64.const 0x0000000400005bbe)))
                                                                                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005bc5)))
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (br $B102)
                                                                                                                                                                                                )
                                                                                                                                                                                              (block $B76
                                                                                                                                                                                                  (local.set $src::compiler::nodes::operator_5 (call $src::compiler::nodes::UnaryExpressionNode.operator_1 (local.get $var$108)))
                                                                                                                                                                                                  (local.set $src::compiler::nodes::rhs_82 (call $src::compiler::nodes::UnaryExpressionNode.rhs_1 (local.get $var$108)))
                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::operator_5) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::rhs_82) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                )
                                                                                                                                                                                              (br $B102)
                                                                                                                                                                                            )
                                                                                                                                                                                          (block $B75
                                                                                                                                                                                              (local.set $src::compiler::nodes::lhs_277 (call $src::compiler::nodes::IsExpressionNode.lhs_1 (local.get $var$108)))
                                                                                                                                                                                              (local.set $src::compiler::nodes::rhs_81 (call $src::compiler::nodes::IsExpressionNode.rhs_1 (local.get $var$108)))
                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::lhs_277) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005ba3)))
                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::rhs_81) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                            )
                                                                                                                                                                                          (br $B102)
                                                                                                                                                                                        )
                                                                                                                                                                                      (block $B74
                                                                                                                                                                                          (local.set $src::compiler::nodes::lhs_276 (call $src::compiler::nodes::AsExpressionNode.lhs_1 (local.get $var$108)))
                                                                                                                                                                                          (local.set $src::compiler::nodes::rhs_80 (call $src::compiler::nodes::AsExpressionNode.rhs_1 (local.get $var$108)))
                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::lhs_276) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b96)))
                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::rhs_80) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                        )
                                                                                                                                                                                      (br $B102)
                                                                                                                                                                                    )
                                                                                                                                                                                  (block $B67
                                                                                                                                                                                      (local.set $src::compiler::nodes::lhs_275 (call $src::compiler::nodes::BinaryExpressionNode.lhs_1 (local.get $var$108)))
                                                                                                                                                                                      (local.set $src::compiler::nodes::operator_4 (call $src::compiler::nodes::BinaryExpressionNode.operator_1 (local.get $var$108)))
                                                                                                                                                                                      (local.set $src::compiler::nodes::rhs_79 (call $src::compiler::nodes::BinaryExpressionNode.rhs_1 (local.get $var$108)))
                                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::lhs_275) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                      (block $B73
                                                                                                                                                                                          (local.set $var$109 (local.get $src::compiler::nodes::operator_4))
                                                                                                                                                                                          (block $B73_0
                                                                                                                                                                                              (block $B73_1
                                                                                                                                                                                                  (br_if $B73_0 (call $src::compiler::nodes::NameIdentifierNode.is_1 (local.get $var$109)))
                                                                                                                                                                                                )
                                                                                                                                                                                              (block $B72
                                                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b88)))
                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::operator_4) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b8f)))
                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::rhs_79) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                )
                                                                                                                                                                                              (br $B73)
                                                                                                                                                                                            )
                                                                                                                                                                                          (block $B68
                                                                                                                                                                                              (local.set $src::compiler::nodes::name_15 (call $src::compiler::nodes::NameIdentifierNode.name_1 (local.get $var$109)))
                                                                                                                                                                                              (if $IF69 (call $system::core::string::string.==_1 (local.get $src::compiler::nodes::name_15) (i64.const 0x0000000400005b63))
                                                                                                                                                                                                  (then
                                                                                                                                                                                                    (block $B70
                                                                                                                                                                                                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b6c)))
                                                                                                                                                                                                        (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::rhs_79) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b73)))
                                                                                                                                                                                                      )
                                                                                                                                                                                                  )
                                                                                                                                                                                                  (else
                                                                                                                                                                                                    (block $B71
                                                                                                                                                                                                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b7a)))
                                                                                                                                                                                                        (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::operator_4) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b81)))
                                                                                                                                                                                                        (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::rhs_79) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                                      )
                                                                                                                                                                                                  )
                                                                                                                                                                                                )
                                                                                                                                                                                            )
                                                                                                                                                                                          (br $B73)
                                                                                                                                                                                        )
                                                                                                                                                                                    )
                                                                                                                                                                                  (br $B102)
                                                                                                                                                                                )
                                                                                                                                                                              (block $B66
                                                                                                                                                                                  (local.set $src::compiler::nodes::expression_2 (call $src::compiler::nodes::ParenExpressionNode.expression_1 (local.get $var$108)))
                                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b55)))
                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::expression_2) (local.get $sb) (local.get $indentation))
                                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b5c)))
                                                                                                                                                                                )
                                                                                                                                                                              (br $B102)
                                                                                                                                                                            )
                                                                                                                                                                          (block $B65
                                                                                                                                                                              (local.set $src::compiler::nodes::functionNode_1 (call $src::compiler::nodes::FunctionCallNode.functionNode_1 (local.get $var$108)))
                                                                                                                                                                              (local.set $src::compiler::nodes::headArgument_8 (call $src::compiler::nodes::FunctionCallNode.headArgument_1 (local.get $var$108)))
                                                                                                                                                                              (local.set $src::compiler::nodes::resolvedFunction_5 (call $src::compiler::nodes::FunctionCallNode.resolvedFunction_1 (local.get $var$108)))
                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::functionNode_1) (local.get $sb) (local.get $indentation))
                                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b3e)))
                                                                                                                                                                              (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headArgument_8) (local.get $sb) (local.get $indentation) (i64.const 0x0000000400005b45)))
                                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b4e)))
                                                                                                                                                                            )
                                                                                                                                                                          (br $B102)
                                                                                                                                                                        )
                                                                                                                                                                      (block $B64
                                                                                                                                                                          (local.set $src::compiler::nodes::headArgument_7 (call $src::compiler::nodes::InjectedFunctionCallNode.headArgument_1 (local.get $var$108)))
                                                                                                                                                                          (local.set $src::compiler::nodes::resolvedFunction_4 (call $src::compiler::nodes::InjectedFunctionCallNode.resolvedFunction_1 (local.get $var$108)))
                                                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005b15)))
                                                                                                                                                                        )
                                                                                                                                                                      (br $B102)
                                                                                                                                                                    )
                                                                                                                                                                  (block $B63
                                                                                                                                                                      (local.set $src::compiler::nodes::headArgument_6 (call $src::compiler::nodes::AbstractFunctionCallNode.headArgument_1 (local.get $var$108)))
                                                                                                                                                                      (local.set $src::compiler::nodes::resolvedFunction_3 (call $src::compiler::nodes::AbstractFunctionCallNode.resolvedFunction_1 (local.get $var$108)))
                                                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005aec)))
                                                                                                                                                                    )
                                                                                                                                                                  (br $B102)
                                                                                                                                                                )
                                                                                                                                                              (block $B62
                                                                                                                                                                  (local.set $src::compiler::nodes::headParameter_4 (call $src::compiler::nodes::StructTypeNode.headParameter_1 (local.get $var$108)))
                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005ac3)))
                                                                                                                                                                  (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headParameter_4) (local.get $sb) (local.get $indentation) (i64.const 0x0000000400005ada)))
                                                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005ae3)))
                                                                                                                                                                )
                                                                                                                                                              (br $B102)
                                                                                                                                                            )
                                                                                                                                                          (block $B61
                                                                                                                                                              (local.set $src::compiler::nodes::headNames_1 (call $src::compiler::nodes::StackLiteralNode.headNames_1 (local.get $var$108)))
                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a9e)))
                                                                                                                                                              (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headNames_1) (local.get $sb) (local.get $indentation) (i64.const 0x0000000400005ab3)))
                                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005aba)))
                                                                                                                                                            )
                                                                                                                                                          (br $B102)
                                                                                                                                                        )
                                                                                                                                                      (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a93))
                                                                                                                                                      (br $B102)
                                                                                                                                                    )
                                                                                                                                                  (block $B60
                                                                                                                                                      (local.set $src::compiler::nodes::value_375 (call $src::compiler::nodes::StringLiteralNode.value_1 (local.get $var$108)))
                                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::nodes::value_375)))
                                                                                                                                                    )
                                                                                                                                                  (br $B102)
                                                                                                                                                )
                                                                                                                                              (block $B56
                                                                                                                                                  (local.set $src::compiler::nodes::value_374 (call $src::compiler::nodes::BooleanLiteralNode.value_1 (local.get $var$108)))
                                                                                                                                                  (if $IF57 (call $system::core::boolean::boolean.==_1 (local.get $src::compiler::nodes::value_374) (i32.const 1))
                                                                                                                                                      (then
                                                                                                                                                        (block $B58
                                                                                                                                                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a77)))
                                                                                                                                                          )
                                                                                                                                                      )
                                                                                                                                                      (else
                                                                                                                                                        (block $B59
                                                                                                                                                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a84)))
                                                                                                                                                          )
                                                                                                                                                      )
                                                                                                                                                    )
                                                                                                                                                )
                                                                                                                                              (br $B102)
                                                                                                                                            )
                                                                                                                                          (block $B55
                                                                                                                                              (local.set $src::compiler::nodes::value_373 (call $src::compiler::nodes::HexLiteralNode.value_1 (local.get $var$108)))
                                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::nodes::value_373)))
                                                                                                                                            )
                                                                                                                                          (br $B102)
                                                                                                                                        )
                                                                                                                                      (block $B54
                                                                                                                                          (local.set $src::compiler::nodes::value_372 (call $src::compiler::nodes::IntegerLiteralNode.value_1 (local.get $var$108)))
                                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::nodes::value_372)))
                                                                                                                                        )
                                                                                                                                      (br $B102)
                                                                                                                                    )
                                                                                                                                  (block $B53
                                                                                                                                      (local.set $src::compiler::nodes::value_371 (call $src::compiler::nodes::FloatLiteralNode.value_1 (local.get $var$108)))
                                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::nodes::value_371)))
                                                                                                                                    )
                                                                                                                                  (br $B102)
                                                                                                                                )
                                                                                                                              (block $B52
                                                                                                                                  (local.set $src::compiler::nodes::name_14 (call $src::compiler::nodes::NameLiteralPairNode.name_1 (local.get $var$108)))
                                                                                                                                  (local.set $src::compiler::nodes::value_370 (call $src::compiler::nodes::NameLiteralPairNode.value_1 (local.get $var$108)))
                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::name_14) (local.get $sb) (local.get $indentation))
                                                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a70)))
                                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::value_370) (local.get $sb) (local.get $indentation))
                                                                                                                                )
                                                                                                                              (br $B102)
                                                                                                                            )
                                                                                                                          (block $B51
                                                                                                                              (local.set $src::compiler::nodes::modifier_11 (call $src::compiler::nodes::EnumDirectiveNode.modifier_1 (local.get $var$108)))
                                                                                                                              (local.set $src::compiler::nodes::name_13 (call $src::compiler::nodes::EnumDirectiveNode.name_1 (local.get $var$108)))
                                                                                                                              (local.set $src::compiler::nodes::headDeclaration_1 (call $src::compiler::nodes::EnumDirectiveNode.headDeclaration_1 (local.get $var$108)))
                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::modifier_11) (local.get $sb) (local.get $indentation))
                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a5a)))
                                                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::name_13) (local.get $sb) (local.get $indentation))
                                                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a69)))
                                                                                                                              (call $src::compiler::nodes::CodeNode.printCurlyBlock_1 (local.get $src::compiler::nodes::headDeclaration_1) (local.get $sb) (local.get $indentation))
                                                                                                                            )
                                                                                                                          (br $B102)
                                                                                                                        )
                                                                                                                      (block $B50
                                                                                                                          (local.set $src::compiler::nodes::modifier_10 (call $src::compiler::nodes::TraitDirectiveNode.modifier_1 (local.get $var$108)))
                                                                                                                          (local.set $src::compiler::nodes::name_12 (call $src::compiler::nodes::TraitDirectiveNode.name_1 (local.get $var$108)))
                                                                                                                          (local.set $src::compiler::nodes::headDirective_5 (call $src::compiler::nodes::TraitDirectiveNode.headDirective_1 (local.get $var$108)))
                                                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::modifier_10) (local.get $sb) (local.get $indentation))
                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a42)))
                                                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::name_12) (local.get $sb) (local.get $indentation))
                                                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a53)))
                                                                                                                          (call $src::compiler::nodes::CodeNode.printCurlyBlock_1 (local.get $src::compiler::nodes::headDirective_5) (local.get $sb) (local.get $indentation))
                                                                                                                        )
                                                                                                                      (br $B102)
                                                                                                                    )
                                                                                                                  (block $B47
                                                                                                                      (local.set $src::compiler::nodes::modifier_9 (call $src::compiler::nodes::TypeDirectiveNode.modifier_1 (local.get $var$108)))
                                                                                                                      (local.set $src::compiler::nodes::name_11 (call $src::compiler::nodes::TypeDirectiveNode.name_1 (local.get $var$108)))
                                                                                                                      (local.set $src::compiler::nodes::declType_1 (call $src::compiler::nodes::TypeDirectiveNode.declType_1 (local.get $var$108)))
                                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::modifier_9) (local.get $sb) (local.get $indentation))
                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a21)))
                                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::name_11) (local.get $sb) (local.get $indentation))
                                                                                                                      (if $IF48 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::declType_1)))
                                                                                                                          (then
                                                                                                                            (block $B49
                                                                                                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a30)))
                                                                                                                                (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::declType_1) (local.get $sb) (local.get $indentation))
                                                                                                                              )
                                                                                                                          )
                                                                                                                          (else)
                                                                                                                        )
                                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a3b)))
                                                                                                                    )
                                                                                                                  (br $B102)
                                                                                                                )
                                                                                                              (block $B46
                                                                                                                  (local.set $src::compiler::nodes::modifier_8 (call $src::compiler::nodes::VarDirectiveNode.modifier_1 (local.get $var$108)))
                                                                                                                  (local.set $src::compiler::nodes::decl_3 (call $src::compiler::nodes::VarDirectiveNode.decl_1 (local.get $var$108)))
                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::modifier_8) (local.get $sb) (local.get $indentation))
                                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::decl_3) (local.get $sb) (local.get $indentation))
                                                                                                                )
                                                                                                              (br $B102)
                                                                                                            )
                                                                                                          (block $B45
                                                                                                              (local.set $src::compiler::nodes::functionName_3 (call $src::compiler::nodes::OverloadedFunDirectiveNode.functionName_1 (local.get $var$108)))
                                                                                                              (local.set $src::compiler::nodes::headFun_1 (call $src::compiler::nodes::OverloadedFunDirectiveNode.headFun_1 (local.get $var$108)))
                                                                                                              (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headFun_1) (local.get $sb) (local.get $indentation) (call $system::core::string::string.++_1 (i64.const 0x0000000400005a1a) (local.get $src::compiler::nodes::ind_1))))
                                                                                                            )
                                                                                                          (br $B102)
                                                                                                        )
                                                                                                      (block $B44
                                                                                                          (local.set $src::compiler::nodes::effectDecl_1 (call $src::compiler::nodes::EffectDirectiveNode.effectDecl_1 (local.get $var$108)))
                                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::effectDecl_1) (local.get $sb) (local.get $indentation))
                                                                                                        )
                                                                                                      (br $B102)
                                                                                                    )
                                                                                                  (block $B41
                                                                                                      (local.set $src::compiler::nodes::headDecorator_1 (call $src::compiler::nodes::FunDirectiveNode.headDecorator_1 (local.get $var$108)))
                                                                                                      (local.set $src::compiler::nodes::modifier_7 (call $src::compiler::nodes::FunDirectiveNode.modifier_1 (local.get $var$108)))
                                                                                                      (local.set $src::compiler::nodes::function_1 (call $src::compiler::nodes::FunDirectiveNode.function_1 (local.get $var$108)))
                                                                                                      (if $IF42 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::headDecorator_1)))
                                                                                                          (then
                                                                                                            (block $B43
                                                                                                                (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headDecorator_1) (local.get $sb) (local.get $indentation) (call $system::core::string::string.++_1 (i64.const 0x0000000400005a05) (local.get $src::compiler::nodes::ind_1))))
                                                                                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a0c)) (local.get $src::compiler::nodes::ind_1)))
                                                                                                              )
                                                                                                          )
                                                                                                          (else)
                                                                                                        )
                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::modifier_7) (local.get $sb) (local.get $indentation))
                                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::function_1) (local.get $sb) (local.get $indentation))
                                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005a13)))
                                                                                                    )
                                                                                                  (br $B102)
                                                                                                )
                                                                                              (block $B38
                                                                                                  (local.set $src::compiler::nodes::module_1 (call $src::compiler::nodes::ImportDirectiveNode.module_1 (local.get $var$108)))
                                                                                                  (local.set $src::compiler::nodes::alias_1 (call $src::compiler::nodes::ImportDirectiveNode.alias_1 (local.get $var$108)))
                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x00000004000059de)))
                                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::module_1) (local.get $sb) (local.get $indentation))
                                                                                                  (if $IF39 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::alias_1)))
                                                                                                      (then
                                                                                                        (block $B40
                                                                                                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x00000004000059f1)))
                                                                                                            (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::alias_1) (local.get $sb) (local.get $indentation))
                                                                                                          )
                                                                                                      )
                                                                                                      (else)
                                                                                                    )
                                                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x00000004000059fe)))
                                                                                                )
                                                                                              (br $B102)
                                                                                            )
                                                                                          (block $B35
                                                                                              (local.set $src::compiler::nodes::baseImpl_1 (call $src::compiler::nodes::ImplDirectiveNode.baseImpl_1 (local.get $var$108)))
                                                                                              (local.set $src::compiler::nodes::targetImpl_1 (call $src::compiler::nodes::ImplDirectiveNode.targetImpl_1 (local.get $var$108)))
                                                                                              (local.set $src::compiler::nodes::headDirective_4 (call $src::compiler::nodes::ImplDirectiveNode.headDirective_1 (local.get $var$108)))
                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x00000004000059b9)))
                                                                                              (if $IF36 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::baseImpl_1)))
                                                                                                  (then
                                                                                                    (block $B37
                                                                                                        (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::baseImpl_1) (local.get $sb) (local.get $indentation))
                                                                                                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x00000004000059c8)))
                                                                                                      )
                                                                                                  )
                                                                                                  (else)
                                                                                                )
                                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::targetImpl_1) (local.get $sb) (local.get $indentation))
                                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x00000004000059d7)))
                                                                                              (call $src::compiler::nodes::CodeNode.printCurlyBlock_1 (local.get $src::compiler::nodes::headDirective_4) (local.get $sb) (local.get $indentation))
                                                                                            )
                                                                                          (br $B102)
                                                                                        )
                                                                                      (block $B34
                                                                                          (local.set $src::compiler::nodes::modifier_6 (call $src::compiler::nodes::StructDirectiveNode.modifier_1 (local.get $var$108)))
                                                                                          (local.set $src::compiler::nodes::decl_2 (call $src::compiler::nodes::StructDirectiveNode.decl_1 (local.get $var$108)))
                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::modifier_6) (local.get $sb) (local.get $indentation))
                                                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x00000004000059a6)))
                                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::decl_2) (local.get $sb) (local.get $indentation))
                                                                                        )
                                                                                      (br $B102)
                                                                                    )
                                                                                  (block $B33
                                                                                      (local.set $src::compiler::nodes::lhs_274 (call $src::compiler::nodes::AssignmentNode.lhs_1 (local.get $var$108)))
                                                                                      (local.set $src::compiler::nodes::rhs_78 (call $src::compiler::nodes::AssignmentNode.rhs_1 (local.get $var$108)))
                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::lhs_274) (local.get $sb) (local.get $indentation))
                                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000599b)))
                                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::rhs_78) (local.get $sb) (local.get $indentation))
                                                                                    )
                                                                                  (br $B102)
                                                                                )
                                                                              (block $B25
                                                                                  (local.set $src::compiler::nodes::meta_122 (call $src::compiler::nodes::VarDeclarationNode.meta_1 (local.get $var$108)))
                                                                                  (local.set $src::compiler::nodes::name_10 (call $src::compiler::nodes::VarDeclarationNode.name_1 (local.get $var$108)))
                                                                                  (local.set $src::compiler::nodes::typeDecl_1 (call $src::compiler::nodes::VarDeclarationNode.typeDecl_1 (local.get $var$108)))
                                                                                  (local.set $src::compiler::nodes::value_369 (call $src::compiler::nodes::VarDeclarationNode.value_1 (local.get $var$108)))
                                                                                  (if $IF26 (call $src::compiler::annotations::NodeAnnotation.has_1 (call $src::compiler::nodes::NodeMeta.annotations_1 (local.get $src::compiler::nodes::meta_122)) (call $system::core::native::ref.getDiscriminant_1 (call $src::compiler::annotations::MutableDeclaration.apply_1)))
                                                                                      (then
                                                                                        (block $B27
                                                                                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000596d)))
                                                                                          )
                                                                                      )
                                                                                      (else
                                                                                        (block $B28
                                                                                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000597a)))
                                                                                          )
                                                                                      )
                                                                                    )
                                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::name_10) (local.get $sb) (local.get $indentation))
                                                                                  (if $IF29 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::typeDecl_1)))
                                                                                      (then
                                                                                        (block $B30
                                                                                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005987)))
                                                                                            (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::typeDecl_1) (local.get $sb) (local.get $indentation))
                                                                                          )
                                                                                      )
                                                                                      (else)
                                                                                    )
                                                                                  (if $IF31 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::value_369)))
                                                                                      (then
                                                                                        (block $B32
                                                                                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005990)))
                                                                                            (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::value_369) (local.get $sb) (local.get $indentation))
                                                                                          )
                                                                                      )
                                                                                      (else)
                                                                                    )
                                                                                )
                                                                              (br $B102)
                                                                            )
                                                                          (block $B19
                                                                              (local.set $src::compiler::nodes::functionName_2 (call $src::compiler::nodes::FunctionNode.functionName_1 (local.get $var$108)))
                                                                              (local.set $src::compiler::nodes::headParameter_3 (call $src::compiler::nodes::FunctionNode.headParameter_1 (local.get $var$108)))
                                                                              (local.set $src::compiler::nodes::returnType_3 (call $src::compiler::nodes::FunctionNode.returnType_1 (local.get $var$108)))
                                                                              (local.set $src::compiler::nodes::body_5 (call $src::compiler::nodes::FunctionNode.body_1 (local.get $var$108)))
                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005935)))
                                                                              (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::functionName_2) (local.get $sb) (local.get $indentation))
                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005942)))
                                                                              (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headParameter_3) (local.get $sb) (local.get $indentation) (i64.const 0x0000000400005949)))
                                                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005952)))
                                                                              (if $IF20 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::returnType_3)))
                                                                                  (then
                                                                                    (block $B21
                                                                                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005959)))
                                                                                        (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::returnType_3) (local.get $sb) (local.get $indentation))
                                                                                      )
                                                                                  )
                                                                                  (else)
                                                                                )
                                                                              (if $IF22 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::body_5)))
                                                                                  (then
                                                                                    (block $B23
                                                                                        (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005962)))
                                                                                        (block $B24
                                                                                            (local.set $var$109 (local.get $src::compiler::nodes::body_5))
                                                                                            (block $B24_0
                                                                                                (block $B24_1
                                                                                                    (block $B24_2
                                                                                                        (br_if $B24_0 (call $src::compiler::nodes::BlockNode.is_1 (local.get $var$109)))
                                                                                                        (br_if $B24_1 (call $src::compiler::nodes::WasmExpressionNode.is_1 (local.get $var$109)))
                                                                                                      )
                                                                                                    (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::body_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                    (br $B24)
                                                                                                  )
                                                                                                (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::body_5) (local.get $sb) (local.get $indentation))
                                                                                                (br $B24)
                                                                                              )
                                                                                            (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::body_5) (local.get $sb) (local.get $indentation))
                                                                                            (br $B24)
                                                                                          )
                                                                                      )
                                                                                  )
                                                                                  (else)
                                                                                )
                                                                            )
                                                                          (br $B102)
                                                                        )
                                                                      (block $B16
                                                                          (local.set $src::compiler::nodes::parameterName_1 (call $src::compiler::nodes::ParameterNode.parameterName_1 (local.get $var$108)))
                                                                          (local.set $src::compiler::nodes::parameterType_1 (call $src::compiler::nodes::ParameterNode.parameterType_1 (local.get $var$108)))
                                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::parameterName_1) (local.get $sb) (local.get $indentation))
                                                                          (if $IF17 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::parameterType_1)))
                                                                              (then
                                                                                (block $B18
                                                                                    (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000592c)))
                                                                                    (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::parameterType_1) (local.get $sb) (local.get $indentation))
                                                                                  )
                                                                              )
                                                                              (else)
                                                                            )
                                                                        )
                                                                      (br $B102)
                                                                    )
                                                                  (block $B13
                                                                      (local.set $src::compiler::nodes::decoratorName_1 (call $src::compiler::nodes::DecoratorNode.decoratorName_1 (local.get $var$108)))
                                                                      (local.set $src::compiler::nodes::headArgument_5 (call $src::compiler::nodes::DecoratorNode.headArgument_1 (local.get $var$108)))
                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000590e)))
                                                                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::decoratorName_1) (local.get $sb) (local.get $indentation))
                                                                      (if $IF14 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::headArgument_5)))
                                                                          (then
                                                                            (block $B15
                                                                                (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005917)))
                                                                              )
                                                                          )
                                                                          (else)
                                                                        )
                                                                      (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headArgument_5) (local.get $sb) (local.get $indentation) (i64.const 0x000000040000591e)))
                                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005925)))
                                                                    )
                                                                  (br $B102)
                                                                )
                                                              (block $B12
                                                                  (local.set $src::compiler::nodes::lhs_273 (call $src::compiler::nodes::MemberNode.lhs_1 (local.get $var$108)))
                                                                  (local.set $src::compiler::nodes::operator_3 (call $src::compiler::nodes::MemberNode.operator_1 (local.get $var$108)))
                                                                  (local.set $src::compiler::nodes::rhs_77 (call $src::compiler::nodes::MemberNode.rhs_1 (local.get $var$108)))
                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::lhs_273) (local.get $sb) (local.get $indentation))
                                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::nodes::operator_3)))
                                                                  (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::rhs_77) (local.get $sb) (local.get $indentation))
                                                                )
                                                              (br $B102)
                                                            )
                                                          (block $B11
                                                              (local.set $src::compiler::nodes::headStatement_1 (call $src::compiler::nodes::BlockNode.headStatement_1 (local.get $var$108)))
                                                              (call $src::compiler::nodes::CodeNode.printCurlyBlock_1 (local.get $src::compiler::nodes::headStatement_1) (local.get $sb) (local.get $indentation))
                                                            )
                                                          (br $B102)
                                                        )
                                                      (block $B10
                                                          (local.set $src::compiler::nodes::variable_1 (call $src::compiler::nodes::ReferenceNode.variable_1 (local.get $var$108)))
                                                          (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::variable_1) (local.get $sb) (local.get $indentation))
                                                        )
                                                      (br $B102)
                                                    )
                                                  (i64.const 0x00000004000058d3)
                                                  (br $B102)
                                                )
                                              (block $B9
                                                  (local.set $src::compiler::nodes::parameters_1 (call $src::compiler::nodes::FunctionTypeNode.parameters_1 (local.get $var$108)))
                                                  (local.set $src::compiler::nodes::returnType_2 (call $src::compiler::nodes::FunctionTypeNode.returnType_1 (local.get $var$108)))
                                                  (local.set $src::compiler::nodes::effect_1 (call $src::compiler::nodes::FunctionTypeNode.effect_1 (local.get $var$108)))
                                                  (drop (i64.const 0x00000004000058ae))
                                                )
                                              (br $B102)
                                            )
                                          (block $B8
                                              (local.set $src::compiler::nodes::names_1 (call $src::compiler::nodes::QNameNode.names_1 (local.get $var$108)))
                                              (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::names_1) (local.get $sb) (local.get $indentation) (i64.const 0x00000004000058a5)))
                                            )
                                          (br $B102)
                                        )
                                      (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000588e))
                                      (br $B102)
                                    )
                                  (block $B7
                                      (nop)
                                    )
                                  (br $B102)
                                )
                              (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005879))
                              (br $B102)
                            )
                          (block $B6
                              (local.set $src::compiler::nodes::name_9 (call $src::compiler::nodes::NameIdentifierNode.name_1 (local.get $var$108)))
                              (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::nodes::name_9)))
                            )
                          (br $B102)
                        )
                      (block $B5
                          (local.set $src::compiler::nodes::headDirective_3 (call $src::compiler::nodes::Document.headDirective_1 (local.get $var$108)))
                          (drop (call $src::compiler::nodes::CodeNode.printWithSeparator_1 (local.get $src::compiler::nodes::headDirective_3) (local.get $sb) (local.get $indentation) (call $system::core::string::string.++_1 (i64.const 0x0000000400005872) (local.get $src::compiler::nodes::ind_1))))
                        )
                      (br $B102)
                    )
                  (block $B4
                      (local.set $src::compiler::nodes::head_3 (call $src::compiler::nodes::CodeNodeCons.head_1 (local.get $var$108)))
                      (local.set $src::compiler::nodes::tail_2 (call $src::compiler::nodes::CodeNodeCons.tail_1 (local.get $var$108)))
                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::head_3) (local.get $sb) (local.get $indentation))
                      (call $src::compiler::nodes::CodeNode.printNode_1 (local.get $src::compiler::nodes::tail_2) (local.get $sb) (local.get $indentation))
                    )
                  (br $B102)
                )
              (block $B3
                  (local.set $src::compiler::nodes::desc_1 (call $src::compiler::nodes::ErrorNode.desc_1 (local.get $var$108)))
                  (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x000000040000584e)) (local.get $src::compiler::nodes::desc_1)) (i64.const 0x0000000400005867)))
                )
              (br $B102)
            )
          (block $B2
              (nop)
            )
          (br $B102)
        )
    )
  )
  (func $src::compiler::nodes::CodeNode.printAst_1 (param $self i64) (param $sb i64) (param $indentation i32)
    (local $src::compiler::nodes::ind_2 i64)
    (local $src::compiler::nodes::head_4 i64)
    (local $src::compiler::nodes::tail_3 i64)
    (local $src::compiler::nodes::name_18 i64)
    (local $src::compiler::nodes::lhs_279 i64)
    (local $src::compiler::nodes::operator_6 i64)
    (local $src::compiler::nodes::rhs_83 i64)
    (local $src::compiler::nodes::desc_2 i64)
    (local $src::compiler::nodes::value_376 i64)
    (local $src::compiler::nodes::value_377 i64)
    (local $src::compiler::nodes::value_378 i64)
    (local $src::compiler::nodes::value_379 i32)
    (local $src::compiler::nodes::value_380 i64)
    (local $src::compiler::nodes::symbol_2 i64)
    (local $src::compiler::nodes::headArgument_10 i64)
    (local $src::compiler::nodes::annotations_1 i64)
    (local $src::compiler::nodes::head_5 i64)
    (local $src::compiler::nodes::tail_4 i64)
    (local $src::compiler::nodes::headDirective_6 i64)
    (local $src::compiler::nodes::parameters_2 i64)
    (local $src::compiler::nodes::returnType_4 i64)
    (local $src::compiler::nodes::effect_2 i64)
    (local $src::compiler::nodes::names_2 i64)
    (local $src::compiler::nodes::variable_2 i64)
    (local $src::compiler::nodes::headStatement_2 i64)
    (local $src::compiler::nodes::lhs_280 i64)
    (local $src::compiler::nodes::operator_7 i64)
    (local $src::compiler::nodes::rhs_84 i64)
    (local $src::compiler::nodes::decoratorName_2 i64)
    (local $src::compiler::nodes::headArgument_11 i64)
    (local $src::compiler::nodes::parameterName_2 i64)
    (local $src::compiler::nodes::parameterType_2 i64)
    (local $src::compiler::nodes::functionName_4 i64)
    (local $src::compiler::nodes::headParameter_6 i64)
    (local $src::compiler::nodes::returnType_5 i64)
    (local $src::compiler::nodes::body_10 i64)
    (local $src::compiler::nodes::name_19 i64)
    (local $src::compiler::nodes::value_381 i64)
    (local $src::compiler::nodes::headNames_2 i64)
    (local $src::compiler::nodes::name_20 i64)
    (local $src::compiler::nodes::typeDecl_2 i64)
    (local $src::compiler::nodes::value_382 i64)
    (local $src::compiler::nodes::lhs_281 i64)
    (local $src::compiler::nodes::rhs_85 i64)
    (local $src::compiler::nodes::baseImpl_2 i64)
    (local $src::compiler::nodes::targetImpl_2 i64)
    (local $src::compiler::nodes::headDirective_7 i64)
    (local $src::compiler::nodes::module_2 i64)
    (local $src::compiler::nodes::alias_2 i64)
    (local $src::compiler::nodes::modifier_12 i64)
    (local $src::compiler::nodes::decl_4 i64)
    (local $src::compiler::nodes::headDecorator_2 i64)
    (local $src::compiler::nodes::modifier_13 i64)
    (local $src::compiler::nodes::function_2 i64)
    (local $src::compiler::nodes::effectDecl_2 i64)
    (local $src::compiler::nodes::functionName_5 i64)
    (local $src::compiler::nodes::headFun_2 i64)
    (local $src::compiler::nodes::modifier_14 i64)
    (local $src::compiler::nodes::decl_5 i64)
    (local $src::compiler::nodes::modifier_15 i64)
    (local $src::compiler::nodes::name_21 i64)
    (local $src::compiler::nodes::declType_2 i64)
    (local $src::compiler::nodes::modifier_16 i64)
    (local $src::compiler::nodes::name_22 i64)
    (local $src::compiler::nodes::headDirective_8 i64)
    (local $src::compiler::nodes::modifier_17 i64)
    (local $src::compiler::nodes::name_23 i64)
    (local $src::compiler::nodes::headDeclaration_2 i64)
    (local $src::compiler::nodes::headParameter_7 i64)
    (local $src::compiler::nodes::headArgument_12 i64)
    (local $src::compiler::nodes::resolvedFunction_6 i64)
    (local $src::compiler::nodes::headArgument_13 i64)
    (local $src::compiler::nodes::resolvedFunction_7 i64)
    (local $src::compiler::nodes::functionNode_2 i64)
    (local $src::compiler::nodes::headArgument_14 i64)
    (local $src::compiler::nodes::resolvedFunction_8 i64)
    (local $src::compiler::nodes::expression_4 i64)
    (local $src::compiler::nodes::lhs_282 i64)
    (local $src::compiler::nodes::operator_8 i64)
    (local $src::compiler::nodes::rhs_86 i64)
    (local $src::compiler::nodes::lhs_283 i64)
    (local $src::compiler::nodes::rhs_87 i64)
    (local $src::compiler::nodes::lhs_284 i64)
    (local $src::compiler::nodes::rhs_88 i64)
    (local $src::compiler::nodes::operator_9 i64)
    (local $src::compiler::nodes::rhs_89 i64)
    (local $src::compiler::nodes::symbol_3 i64)
    (local $src::compiler::nodes::headArgument_15 i64)
    (local $src::compiler::nodes::headAtom_2 i64)
    (local $src::compiler::nodes::condition_4 i64)
    (local $src::compiler::nodes::truePart_2 i64)
    (local $src::compiler::nodes::falsePart_2 i64)
    (local $src::compiler::nodes::headType_4 i64)
    (local $src::compiler::nodes::headType_5 i64)
    (local $src::compiler::nodes::name_24 i64)
    (local $src::compiler::nodes::headParameter_8 i64)
    (local $src::compiler::nodes::name_25 i64)
    (local $src::compiler::nodes::lhs_285 i64)
    (local $src::compiler::nodes::headMatcher_2 i64)
    (local $src::compiler::nodes::declaredName_6 i64)
    (local $src::compiler::nodes::condition_5 i64)
    (local $src::compiler::nodes::body_11 i64)
    (local $src::compiler::nodes::declaredName_7 i64)
    (local $src::compiler::nodes::typeReference_2 i64)
    (local $src::compiler::nodes::headDeconstruct_2 i64)
    (local $src::compiler::nodes::body_12 i64)
    (local $src::compiler::nodes::literal_2 i64)
    (local $src::compiler::nodes::body_13 i64)
    (local $src::compiler::nodes::declaredName_8 i64)
    (local $src::compiler::nodes::body_14 i64)
    (local $src::compiler::nodes::expression_5 i64)
    (local $var$114 i64)
    (local $var$115 i64)
    (block $B1
      (local.set $src::compiler::nodes::ind_2 (call $src::helpers::repeat_1 (i64.const 0x0000000400005d46) (local.get $indentation)))
      (block $B68
          (local.set $var$114 (local.get $self))
          (block $B68_0
              (block $B68_1
                  (br_if $B68_0 (call $src::compiler::nodes::CodeNodeCons.is_1 (local.get $var$114)))
                )
              (block $B5
                  (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::nodes::ind_2)) (i64.const 0x0000000400005d4f)) (call $src::compiler::nodes::CodeNode.nodeName_1 (local.get $self))))
                  (block $B17
                      (local.set $var$115 (local.get $self))
                      (block $B17_0
                          (block $B17_1
                              (block $B17_2
                                  (block $B17_3
                                      (block $B17_4
                                          (block $B17_5
                                              (block $B17_6
                                                  (block $B17_7
                                                      (block $B17_8
                                                          (block $B17_9
                                                              (br_if $B17_0 (call $src::compiler::nodes::NameIdentifierNode.is_1 (local.get $var$115)))
                                                              (br_if $B17_1 (call $src::compiler::nodes::MemberNode.is_1 (local.get $var$115)))
                                                              (br_if $B17_2 (call $src::compiler::nodes::ErrorNode.is_1 (local.get $var$115)))
                                                              (br_if $B17_3 (call $src::compiler::nodes::FloatLiteralNode.is_1 (local.get $var$115)))
                                                              (br_if $B17_4 (call $src::compiler::nodes::IntegerLiteralNode.is_1 (local.get $var$115)))
                                                              (br_if $B17_5 (call $src::compiler::nodes::HexLiteralNode.is_1 (local.get $var$115)))
                                                              (br_if $B17_6 (call $src::compiler::nodes::BooleanLiteralNode.is_1 (local.get $var$115)))
                                                              (br_if $B17_7 (call $src::compiler::nodes::StringLiteralNode.is_1 (local.get $var$115)))
                                                              (br_if $B17_8 (call $src::compiler::nodes::WasmAtomNode.is_1 (local.get $var$115)))
                                                            )
                                                          (block $B16
                                                              (nop)
                                                            )
                                                          (br $B17)
                                                        )
                                                      (block $B15
                                                          (local.set $src::compiler::nodes::symbol_2 (call $src::compiler::nodes::WasmAtomNode.symbol_1 (local.get $var$115)))
                                                          (local.set $src::compiler::nodes::headArgument_10 (call $src::compiler::nodes::WasmAtomNode.headArgument_1 (local.get $var$115)))
                                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005e0e)) (local.get $src::compiler::nodes::symbol_2)))
                                                        )
                                                      (br $B17)
                                                    )
                                                  (block $B14
                                                      (local.set $src::compiler::nodes::value_380 (call $src::compiler::nodes::StringLiteralNode.value_1 (local.get $var$115)))
                                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005dfb)) (local.get $src::compiler::nodes::value_380)))
                                                    )
                                                  (br $B17)
                                                )
                                              (block $B12
                                                  (local.set $src::compiler::nodes::value_379 (call $src::compiler::nodes::BooleanLiteralNode.value_1 (local.get $var$115)))
                                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005dcc)) (if $IF13 (result i64) (local.get $src::compiler::nodes::value_379)
                                                                  (then
                                                                    (i64.const 0x0000000400005ddf)
                                                                  )
                                                                  (else
                                                                    (i64.const 0x0000000400005dec)
                                                                  )
                                                                )))
                                                )
                                              (br $B17)
                                            )
                                          (block $B11
                                              (local.set $src::compiler::nodes::value_378 (call $src::compiler::nodes::HexLiteralNode.value_1 (local.get $var$115)))
                                              (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005db9)) (local.get $src::compiler::nodes::value_378)))
                                            )
                                          (br $B17)
                                        )
                                      (block $B10
                                          (local.set $src::compiler::nodes::value_377 (call $src::compiler::nodes::IntegerLiteralNode.value_1 (local.get $var$115)))
                                          (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005da6)) (local.get $src::compiler::nodes::value_377)))
                                        )
                                      (br $B17)
                                    )
                                  (block $B9
                                      (local.set $src::compiler::nodes::value_376 (call $src::compiler::nodes::FloatLiteralNode.value_1 (local.get $var$115)))
                                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005d93)) (local.get $src::compiler::nodes::value_376)))
                                    )
                                  (br $B17)
                                )
                              (block $B8
                                  (local.set $src::compiler::nodes::desc_2 (call $src::compiler::nodes::ErrorNode.desc_1 (local.get $var$115)))
                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005d82)) (local.get $src::compiler::nodes::desc_2)))
                                )
                              (br $B17)
                            )
                          (block $B7
                              (local.set $src::compiler::nodes::lhs_279 (call $src::compiler::nodes::MemberNode.lhs_1 (local.get $var$115)))
                              (local.set $src::compiler::nodes::operator_6 (call $src::compiler::nodes::MemberNode.operator_1 (local.get $var$115)))
                              (local.set $src::compiler::nodes::rhs_83 (call $src::compiler::nodes::MemberNode.rhs_1 (local.get $var$115)))
                              (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005d69)) (local.get $src::compiler::nodes::operator_6)))
                            )
                          (br $B17)
                        )
                      (block $B6
                          (local.set $src::compiler::nodes::name_18 (call $src::compiler::nodes::NameIdentifierNode.name_1 (local.get $var$115)))
                          (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005d58)) (local.get $src::compiler::nodes::name_18)))
                        )
                      (br $B17)
                    )
                  (local.set $src::compiler::nodes::annotations_1 (call $src::compiler::annotations::NodeAnnotation.toString_1 (call $src::compiler::nodes::CodeNode.getAnnotations_1 (local.get $self))))
                  (if $IF18 (call $system::core::string::string.!=_1 (local.get $src::compiler::nodes::annotations_1) (i64.const 0x0000000400005e23))
                      (then
                        (block $B19
                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005e28)))
                            (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (local.get $src::compiler::nodes::annotations_1)))
                          )
                      )
                      (else)
                    )
                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400005e2f)))
                  (block $B67
                      (local.set $var$115 (local.get $self))
                      (block $B67_0
                          (block $B67_1
                              (block $B67_2
                                  (block $B67_3
                                      (block $B67_4
                                          (block $B67_5
                                              (block $B67_6
                                                  (block $B67_7
                                                      (block $B67_8
                                                          (block $B67_9
                                                              (block $B67_10
                                                                  (block $B67_11
                                                                      (block $B67_12
                                                                          (block $B67_13
                                                                              (block $B67_14
                                                                                  (block $B67_15
                                                                                      (block $B67_16
                                                                                          (block $B67_17
                                                                                              (block $B67_18
                                                                                                  (block $B67_19
                                                                                                      (block $B67_20
                                                                                                          (block $B67_21
                                                                                                              (block $B67_22
                                                                                                                  (block $B67_23
                                                                                                                      (block $B67_24
                                                                                                                          (block $B67_25
                                                                                                                              (block $B67_26
                                                                                                                                  (block $B67_27
                                                                                                                                      (block $B67_28
                                                                                                                                          (block $B67_29
                                                                                                                                              (block $B67_30
                                                                                                                                                  (block $B67_31
                                                                                                                                                      (block $B67_32
                                                                                                                                                          (block $B67_33
                                                                                                                                                              (block $B67_34
                                                                                                                                                                  (block $B67_35
                                                                                                                                                                      (block $B67_36
                                                                                                                                                                          (block $B67_37
                                                                                                                                                                              (block $B67_38
                                                                                                                                                                                  (block $B67_39
                                                                                                                                                                                      (block $B67_40
                                                                                                                                                                                          (block $B67_41
                                                                                                                                                                                              (block $B67_42
                                                                                                                                                                                                  (block $B67_43
                                                                                                                                                                                                      (block $B67_44
                                                                                                                                                                                                          (block $B67_45
                                                                                                                                                                                                              (block $B67_46
                                                                                                                                                                                                                  (br_if $B67_0 (call $src::compiler::nodes::CodeNodeCons.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_1 (call $src::compiler::nodes::Document.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_2 (call $src::compiler::nodes::FunctionTypeNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_3 (call $src::compiler::nodes::QNameNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_4 (call $src::compiler::nodes::ReferenceNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_5 (call $src::compiler::nodes::BlockNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_6 (call $src::compiler::nodes::MemberNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_7 (call $src::compiler::nodes::DecoratorNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_8 (call $src::compiler::nodes::ParameterNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_9 (call $src::compiler::nodes::FunctionNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_10 (call $src::compiler::nodes::NameLiteralPairNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_11 (call $src::compiler::nodes::StackLiteralNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_12 (call $src::compiler::nodes::VarDeclarationNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_13 (call $src::compiler::nodes::AssignmentNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_14 (call $src::compiler::nodes::ImplDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_15 (call $src::compiler::nodes::ImportDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_16 (call $src::compiler::nodes::StructDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_17 (call $src::compiler::nodes::FunDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_18 (call $src::compiler::nodes::EffectDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_19 (call $src::compiler::nodes::OverloadedFunDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_20 (call $src::compiler::nodes::VarDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_21 (call $src::compiler::nodes::TypeDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_22 (call $src::compiler::nodes::TraitDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_23 (call $src::compiler::nodes::EnumDirectiveNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_24 (call $src::compiler::nodes::StructTypeNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_25 (call $src::compiler::nodes::AbstractFunctionCallNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_26 (call $src::compiler::nodes::InjectedFunctionCallNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_27 (call $src::compiler::nodes::FunctionCallNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_28 (call $src::compiler::nodes::ParenExpressionNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_29 (call $src::compiler::nodes::BinaryExpressionNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_30 (call $src::compiler::nodes::AsExpressionNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_31 (call $src::compiler::nodes::IsExpressionNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_32 (call $src::compiler::nodes::UnaryExpressionNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_33 (call $src::compiler::nodes::WasmAtomNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_34 (call $src::compiler::nodes::WasmExpressionNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_35 (call $src::compiler::nodes::IfNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_36 (call $src::compiler::nodes::UnionTypeNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_37 (call $src::compiler::nodes::IntersectionTypeNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_38 (call $src::compiler::nodes::StructDeclarationNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_39 (call $src::compiler::nodes::EffectDeclarationNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_40 (call $src::compiler::nodes::PatternMatcherNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_41 (call $src::compiler::nodes::MatchConditionNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_42 (call $src::compiler::nodes::MatchCaseIsNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_43 (call $src::compiler::nodes::MatchLiteralNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_44 (call $src::compiler::nodes::MatchDefaultNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                  (br_if $B67_45 (call $src::compiler::nodes::LoopNode.is_1 (local.get $var$115)))
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (block $B66
                                                                                                                                                                                                                  (nop)
                                                                                                                                                                                                                )
                                                                                                                                                                                                              (br $B67)
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (block $B65
                                                                                                                                                                                                              (local.set $src::compiler::nodes::expression_5 (call $src::compiler::nodes::LoopNode.expression_1 (local.get $var$115)))
                                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::expression_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                            )
                                                                                                                                                                                                          (br $B67)
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (block $B64
                                                                                                                                                                                                          (local.set $src::compiler::nodes::declaredName_8 (call $src::compiler::nodes::MatchDefaultNode.declaredName_1 (local.get $var$115)))
                                                                                                                                                                                                          (local.set $src::compiler::nodes::body_14 (call $src::compiler::nodes::MatchDefaultNode.body_1 (local.get $var$115)))
                                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::declaredName_8) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::body_14) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                        )
                                                                                                                                                                                                      (br $B67)
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (block $B63
                                                                                                                                                                                                      (local.set $src::compiler::nodes::literal_2 (call $src::compiler::nodes::MatchLiteralNode.literal_1 (local.get $var$115)))
                                                                                                                                                                                                      (local.set $src::compiler::nodes::body_13 (call $src::compiler::nodes::MatchLiteralNode.body_1 (local.get $var$115)))
                                                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::literal_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::body_13) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                    )
                                                                                                                                                                                                  (br $B67)
                                                                                                                                                                                                )
                                                                                                                                                                                              (block $B62
                                                                                                                                                                                                  (local.set $src::compiler::nodes::declaredName_7 (call $src::compiler::nodes::MatchCaseIsNode.declaredName_1 (local.get $var$115)))
                                                                                                                                                                                                  (local.set $src::compiler::nodes::typeReference_2 (call $src::compiler::nodes::MatchCaseIsNode.typeReference_1 (local.get $var$115)))
                                                                                                                                                                                                  (local.set $src::compiler::nodes::headDeconstruct_2 (call $src::compiler::nodes::MatchCaseIsNode.headDeconstruct_1 (local.get $var$115)))
                                                                                                                                                                                                  (local.set $src::compiler::nodes::body_12 (call $src::compiler::nodes::MatchCaseIsNode.body_1 (local.get $var$115)))
                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::declaredName_7) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::typeReference_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headDeconstruct_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::body_12) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                                )
                                                                                                                                                                                              (br $B67)
                                                                                                                                                                                            )
                                                                                                                                                                                          (block $B61
                                                                                                                                                                                              (local.set $src::compiler::nodes::declaredName_6 (call $src::compiler::nodes::MatchConditionNode.declaredName_1 (local.get $var$115)))
                                                                                                                                                                                              (local.set $src::compiler::nodes::condition_5 (call $src::compiler::nodes::MatchConditionNode.condition_1 (local.get $var$115)))
                                                                                                                                                                                              (local.set $src::compiler::nodes::body_11 (call $src::compiler::nodes::MatchConditionNode.body_1 (local.get $var$115)))
                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::declaredName_6) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::condition_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::body_11) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                            )
                                                                                                                                                                                          (br $B67)
                                                                                                                                                                                        )
                                                                                                                                                                                      (block $B60
                                                                                                                                                                                          (local.set $src::compiler::nodes::lhs_285 (call $src::compiler::nodes::PatternMatcherNode.lhs_1 (local.get $var$115)))
                                                                                                                                                                                          (local.set $src::compiler::nodes::headMatcher_2 (call $src::compiler::nodes::PatternMatcherNode.headMatcher_1 (local.get $var$115)))
                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::lhs_285) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headMatcher_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                        )
                                                                                                                                                                                      (br $B67)
                                                                                                                                                                                    )
                                                                                                                                                                                  (block $B59
                                                                                                                                                                                      (local.set $src::compiler::nodes::name_25 (call $src::compiler::nodes::EffectDeclarationNode.name_1 (local.get $var$115)))
                                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::name_25) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                    )
                                                                                                                                                                                  (br $B67)
                                                                                                                                                                                )
                                                                                                                                                                              (block $B58
                                                                                                                                                                                  (local.set $src::compiler::nodes::name_24 (call $src::compiler::nodes::StructDeclarationNode.name_1 (local.get $var$115)))
                                                                                                                                                                                  (local.set $src::compiler::nodes::headParameter_8 (call $src::compiler::nodes::StructDeclarationNode.headParameter_1 (local.get $var$115)))
                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::name_24) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headParameter_8) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                                )
                                                                                                                                                                              (br $B67)
                                                                                                                                                                            )
                                                                                                                                                                          (block $B57
                                                                                                                                                                              (local.set $src::compiler::nodes::headType_5 (call $src::compiler::nodes::IntersectionTypeNode.headType_1 (local.get $var$115)))
                                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headType_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                            )
                                                                                                                                                                          (br $B67)
                                                                                                                                                                        )
                                                                                                                                                                      (block $B56
                                                                                                                                                                          (local.set $src::compiler::nodes::headType_4 (call $src::compiler::nodes::UnionTypeNode.headType_1 (local.get $var$115)))
                                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headType_4) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                        )
                                                                                                                                                                      (br $B67)
                                                                                                                                                                    )
                                                                                                                                                                  (block $B55
                                                                                                                                                                      (local.set $src::compiler::nodes::condition_4 (call $src::compiler::nodes::IfNode.condition_1 (local.get $var$115)))
                                                                                                                                                                      (local.set $src::compiler::nodes::truePart_2 (call $src::compiler::nodes::IfNode.truePart_1 (local.get $var$115)))
                                                                                                                                                                      (local.set $src::compiler::nodes::falsePart_2 (call $src::compiler::nodes::IfNode.falsePart_1 (local.get $var$115)))
                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::condition_4) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::truePart_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::falsePart_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                    )
                                                                                                                                                                  (br $B67)
                                                                                                                                                                )
                                                                                                                                                              (block $B54
                                                                                                                                                                  (local.set $src::compiler::nodes::headAtom_2 (call $src::compiler::nodes::WasmExpressionNode.headAtom_1 (local.get $var$115)))
                                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headAtom_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                                )
                                                                                                                                                              (br $B67)
                                                                                                                                                            )
                                                                                                                                                          (block $B53
                                                                                                                                                              (local.set $src::compiler::nodes::symbol_3 (call $src::compiler::nodes::WasmAtomNode.symbol_1 (local.get $var$115)))
                                                                                                                                                              (local.set $src::compiler::nodes::headArgument_15 (call $src::compiler::nodes::WasmAtomNode.headArgument_1 (local.get $var$115)))
                                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headArgument_15) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                            )
                                                                                                                                                          (br $B67)
                                                                                                                                                        )
                                                                                                                                                      (block $B52
                                                                                                                                                          (local.set $src::compiler::nodes::operator_9 (call $src::compiler::nodes::UnaryExpressionNode.operator_1 (local.get $var$115)))
                                                                                                                                                          (local.set $src::compiler::nodes::rhs_89 (call $src::compiler::nodes::UnaryExpressionNode.rhs_1 (local.get $var$115)))
                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::operator_9) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::rhs_89) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                        )
                                                                                                                                                      (br $B67)
                                                                                                                                                    )
                                                                                                                                                  (block $B51
                                                                                                                                                      (local.set $src::compiler::nodes::lhs_284 (call $src::compiler::nodes::IsExpressionNode.lhs_1 (local.get $var$115)))
                                                                                                                                                      (local.set $src::compiler::nodes::rhs_88 (call $src::compiler::nodes::IsExpressionNode.rhs_1 (local.get $var$115)))
                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::lhs_284) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::rhs_88) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                    )
                                                                                                                                                  (br $B67)
                                                                                                                                                )
                                                                                                                                              (block $B50
                                                                                                                                                  (local.set $src::compiler::nodes::lhs_283 (call $src::compiler::nodes::AsExpressionNode.lhs_1 (local.get $var$115)))
                                                                                                                                                  (local.set $src::compiler::nodes::rhs_87 (call $src::compiler::nodes::AsExpressionNode.rhs_1 (local.get $var$115)))
                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::lhs_283) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::rhs_87) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                                )
                                                                                                                                              (br $B67)
                                                                                                                                            )
                                                                                                                                          (block $B49
                                                                                                                                              (local.set $src::compiler::nodes::lhs_282 (call $src::compiler::nodes::BinaryExpressionNode.lhs_1 (local.get $var$115)))
                                                                                                                                              (local.set $src::compiler::nodes::operator_8 (call $src::compiler::nodes::BinaryExpressionNode.operator_1 (local.get $var$115)))
                                                                                                                                              (local.set $src::compiler::nodes::rhs_86 (call $src::compiler::nodes::BinaryExpressionNode.rhs_1 (local.get $var$115)))
                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::lhs_282) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::operator_8) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::rhs_86) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                            )
                                                                                                                                          (br $B67)
                                                                                                                                        )
                                                                                                                                      (block $B48
                                                                                                                                          (local.set $src::compiler::nodes::expression_4 (call $src::compiler::nodes::ParenExpressionNode.expression_1 (local.get $var$115)))
                                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::expression_4) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                        )
                                                                                                                                      (br $B67)
                                                                                                                                    )
                                                                                                                                  (block $B47
                                                                                                                                      (local.set $src::compiler::nodes::functionNode_2 (call $src::compiler::nodes::FunctionCallNode.functionNode_1 (local.get $var$115)))
                                                                                                                                      (local.set $src::compiler::nodes::headArgument_14 (call $src::compiler::nodes::FunctionCallNode.headArgument_1 (local.get $var$115)))
                                                                                                                                      (local.set $src::compiler::nodes::resolvedFunction_8 (call $src::compiler::nodes::FunctionCallNode.resolvedFunction_1 (local.get $var$115)))
                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::functionNode_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headArgument_14) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                    )
                                                                                                                                  (br $B67)
                                                                                                                                )
                                                                                                                              (block $B46
                                                                                                                                  (local.set $src::compiler::nodes::headArgument_13 (call $src::compiler::nodes::InjectedFunctionCallNode.headArgument_1 (local.get $var$115)))
                                                                                                                                  (local.set $src::compiler::nodes::resolvedFunction_7 (call $src::compiler::nodes::InjectedFunctionCallNode.resolvedFunction_1 (local.get $var$115)))
                                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headArgument_13) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                                )
                                                                                                                              (br $B67)
                                                                                                                            )
                                                                                                                          (block $B45
                                                                                                                              (local.set $src::compiler::nodes::headArgument_12 (call $src::compiler::nodes::AbstractFunctionCallNode.headArgument_1 (local.get $var$115)))
                                                                                                                              (local.set $src::compiler::nodes::resolvedFunction_6 (call $src::compiler::nodes::AbstractFunctionCallNode.resolvedFunction_1 (local.get $var$115)))
                                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headArgument_12) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                            )
                                                                                                                          (br $B67)
                                                                                                                        )
                                                                                                                      (block $B44
                                                                                                                          (local.set $src::compiler::nodes::headParameter_7 (call $src::compiler::nodes::StructTypeNode.headParameter_1 (local.get $var$115)))
                                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headParameter_7) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                        )
                                                                                                                      (br $B67)
                                                                                                                    )
                                                                                                                  (block $B43
                                                                                                                      (local.set $src::compiler::nodes::modifier_17 (call $src::compiler::nodes::EnumDirectiveNode.modifier_1 (local.get $var$115)))
                                                                                                                      (local.set $src::compiler::nodes::name_23 (call $src::compiler::nodes::EnumDirectiveNode.name_1 (local.get $var$115)))
                                                                                                                      (local.set $src::compiler::nodes::headDeclaration_2 (call $src::compiler::nodes::EnumDirectiveNode.headDeclaration_1 (local.get $var$115)))
                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::modifier_17) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::name_23) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headDeclaration_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                    )
                                                                                                                  (br $B67)
                                                                                                                )
                                                                                                              (block $B42
                                                                                                                  (local.set $src::compiler::nodes::modifier_16 (call $src::compiler::nodes::TraitDirectiveNode.modifier_1 (local.get $var$115)))
                                                                                                                  (local.set $src::compiler::nodes::name_22 (call $src::compiler::nodes::TraitDirectiveNode.name_1 (local.get $var$115)))
                                                                                                                  (local.set $src::compiler::nodes::headDirective_8 (call $src::compiler::nodes::TraitDirectiveNode.headDirective_1 (local.get $var$115)))
                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::modifier_16) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::name_22) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headDirective_8) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                                )
                                                                                                              (br $B67)
                                                                                                            )
                                                                                                          (block $B41
                                                                                                              (local.set $src::compiler::nodes::modifier_15 (call $src::compiler::nodes::TypeDirectiveNode.modifier_1 (local.get $var$115)))
                                                                                                              (local.set $src::compiler::nodes::name_21 (call $src::compiler::nodes::TypeDirectiveNode.name_1 (local.get $var$115)))
                                                                                                              (local.set $src::compiler::nodes::declType_2 (call $src::compiler::nodes::TypeDirectiveNode.declType_1 (local.get $var$115)))
                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::modifier_15) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::name_21) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::declType_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                            )
                                                                                                          (br $B67)
                                                                                                        )
                                                                                                      (block $B40
                                                                                                          (local.set $src::compiler::nodes::modifier_14 (call $src::compiler::nodes::VarDirectiveNode.modifier_1 (local.get $var$115)))
                                                                                                          (local.set $src::compiler::nodes::decl_5 (call $src::compiler::nodes::VarDirectiveNode.decl_1 (local.get $var$115)))
                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::modifier_14) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::decl_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                        )
                                                                                                      (br $B67)
                                                                                                    )
                                                                                                  (block $B39
                                                                                                      (local.set $src::compiler::nodes::functionName_5 (call $src::compiler::nodes::OverloadedFunDirectiveNode.functionName_1 (local.get $var$115)))
                                                                                                      (local.set $src::compiler::nodes::headFun_2 (call $src::compiler::nodes::OverloadedFunDirectiveNode.headFun_1 (local.get $var$115)))
                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::functionName_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headFun_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                    )
                                                                                                  (br $B67)
                                                                                                )
                                                                                              (block $B38
                                                                                                  (local.set $src::compiler::nodes::effectDecl_2 (call $src::compiler::nodes::EffectDirectiveNode.effectDecl_1 (local.get $var$115)))
                                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::effectDecl_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                                )
                                                                                              (br $B67)
                                                                                            )
                                                                                          (block $B37
                                                                                              (local.set $src::compiler::nodes::headDecorator_2 (call $src::compiler::nodes::FunDirectiveNode.headDecorator_1 (local.get $var$115)))
                                                                                              (local.set $src::compiler::nodes::modifier_13 (call $src::compiler::nodes::FunDirectiveNode.modifier_1 (local.get $var$115)))
                                                                                              (local.set $src::compiler::nodes::function_2 (call $src::compiler::nodes::FunDirectiveNode.function_1 (local.get $var$115)))
                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headDecorator_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::modifier_13) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::function_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                            )
                                                                                          (br $B67)
                                                                                        )
                                                                                      (block $B36
                                                                                          (local.set $src::compiler::nodes::modifier_12 (call $src::compiler::nodes::StructDirectiveNode.modifier_1 (local.get $var$115)))
                                                                                          (local.set $src::compiler::nodes::decl_4 (call $src::compiler::nodes::StructDirectiveNode.decl_1 (local.get $var$115)))
                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::modifier_12) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::decl_4) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                        )
                                                                                      (br $B67)
                                                                                    )
                                                                                  (block $B35
                                                                                      (local.set $src::compiler::nodes::module_2 (call $src::compiler::nodes::ImportDirectiveNode.module_1 (local.get $var$115)))
                                                                                      (local.set $src::compiler::nodes::alias_2 (call $src::compiler::nodes::ImportDirectiveNode.alias_1 (local.get $var$115)))
                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::module_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::alias_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                    )
                                                                                  (br $B67)
                                                                                )
                                                                              (block $B34
                                                                                  (local.set $src::compiler::nodes::baseImpl_2 (call $src::compiler::nodes::ImplDirectiveNode.baseImpl_1 (local.get $var$115)))
                                                                                  (local.set $src::compiler::nodes::targetImpl_2 (call $src::compiler::nodes::ImplDirectiveNode.targetImpl_1 (local.get $var$115)))
                                                                                  (local.set $src::compiler::nodes::headDirective_7 (call $src::compiler::nodes::ImplDirectiveNode.headDirective_1 (local.get $var$115)))
                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::baseImpl_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::targetImpl_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headDirective_7) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                                )
                                                                              (br $B67)
                                                                            )
                                                                          (block $B33
                                                                              (local.set $src::compiler::nodes::lhs_281 (call $src::compiler::nodes::AssignmentNode.lhs_1 (local.get $var$115)))
                                                                              (local.set $src::compiler::nodes::rhs_85 (call $src::compiler::nodes::AssignmentNode.rhs_1 (local.get $var$115)))
                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::lhs_281) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::rhs_85) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                            )
                                                                          (br $B67)
                                                                        )
                                                                      (block $B32
                                                                          (local.set $src::compiler::nodes::name_20 (call $src::compiler::nodes::VarDeclarationNode.name_1 (local.get $var$115)))
                                                                          (local.set $src::compiler::nodes::typeDecl_2 (call $src::compiler::nodes::VarDeclarationNode.typeDecl_1 (local.get $var$115)))
                                                                          (local.set $src::compiler::nodes::value_382 (call $src::compiler::nodes::VarDeclarationNode.value_1 (local.get $var$115)))
                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::name_20) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::typeDecl_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::value_382) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                        )
                                                                      (br $B67)
                                                                    )
                                                                  (block $B31
                                                                      (local.set $src::compiler::nodes::headNames_2 (call $src::compiler::nodes::StackLiteralNode.headNames_1 (local.get $var$115)))
                                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headNames_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                    )
                                                                  (br $B67)
                                                                )
                                                              (block $B30
                                                                  (local.set $src::compiler::nodes::name_19 (call $src::compiler::nodes::NameLiteralPairNode.name_1 (local.get $var$115)))
                                                                  (local.set $src::compiler::nodes::value_381 (call $src::compiler::nodes::NameLiteralPairNode.value_1 (local.get $var$115)))
                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::name_19) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::value_381) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                                )
                                                              (br $B67)
                                                            )
                                                          (block $B29
                                                              (local.set $src::compiler::nodes::functionName_4 (call $src::compiler::nodes::FunctionNode.functionName_1 (local.get $var$115)))
                                                              (local.set $src::compiler::nodes::headParameter_6 (call $src::compiler::nodes::FunctionNode.headParameter_1 (local.get $var$115)))
                                                              (local.set $src::compiler::nodes::returnType_5 (call $src::compiler::nodes::FunctionNode.returnType_1 (local.get $var$115)))
                                                              (local.set $src::compiler::nodes::body_10 (call $src::compiler::nodes::FunctionNode.body_1 (local.get $var$115)))
                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::functionName_4) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headParameter_6) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::returnType_5) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::body_10) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                            )
                                                          (br $B67)
                                                        )
                                                      (block $B28
                                                          (local.set $src::compiler::nodes::parameterName_2 (call $src::compiler::nodes::ParameterNode.parameterName_1 (local.get $var$115)))
                                                          (local.set $src::compiler::nodes::parameterType_2 (call $src::compiler::nodes::ParameterNode.parameterType_1 (local.get $var$115)))
                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::parameterName_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::parameterType_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                        )
                                                      (br $B67)
                                                    )
                                                  (block $B27
                                                      (local.set $src::compiler::nodes::decoratorName_2 (call $src::compiler::nodes::DecoratorNode.decoratorName_1 (local.get $var$115)))
                                                      (local.set $src::compiler::nodes::headArgument_11 (call $src::compiler::nodes::DecoratorNode.headArgument_1 (local.get $var$115)))
                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::decoratorName_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headArgument_11) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                    )
                                                  (br $B67)
                                                )
                                              (block $B26
                                                  (local.set $src::compiler::nodes::lhs_280 (call $src::compiler::nodes::MemberNode.lhs_1 (local.get $var$115)))
                                                  (local.set $src::compiler::nodes::operator_7 (call $src::compiler::nodes::MemberNode.operator_1 (local.get $var$115)))
                                                  (local.set $src::compiler::nodes::rhs_84 (call $src::compiler::nodes::MemberNode.rhs_1 (local.get $var$115)))
                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::lhs_280) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::rhs_84) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                                )
                                              (br $B67)
                                            )
                                          (block $B25
                                              (local.set $src::compiler::nodes::headStatement_2 (call $src::compiler::nodes::BlockNode.headStatement_1 (local.get $var$115)))
                                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headStatement_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                            )
                                          (br $B67)
                                        )
                                      (block $B24
                                          (local.set $src::compiler::nodes::variable_2 (call $src::compiler::nodes::ReferenceNode.variable_1 (local.get $var$115)))
                                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::variable_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                        )
                                      (br $B67)
                                    )
                                  (block $B23
                                      (local.set $src::compiler::nodes::names_2 (call $src::compiler::nodes::QNameNode.names_1 (local.get $var$115)))
                                      (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::names_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                    )
                                  (br $B67)
                                )
                              (block $B22
                                  (local.set $src::compiler::nodes::parameters_2 (call $src::compiler::nodes::FunctionTypeNode.parameters_1 (local.get $var$115)))
                                  (local.set $src::compiler::nodes::returnType_4 (call $src::compiler::nodes::FunctionTypeNode.returnType_1 (local.get $var$115)))
                                  (local.set $src::compiler::nodes::effect_2 (call $src::compiler::nodes::FunctionTypeNode.effect_1 (local.get $var$115)))
                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::parameters_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::returnType_4) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                  (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::effect_2) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                                )
                              (br $B67)
                            )
                          (block $B21
                              (local.set $src::compiler::nodes::headDirective_6 (call $src::compiler::nodes::Document.headDirective_1 (local.get $var$115)))
                              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::headDirective_6) (local.get $sb) (call $system::core::i32::i32.+_1 (local.get $indentation) (i32.const 1)))
                            )
                          (br $B67)
                        )
                      (block $B20
                          (local.set $src::compiler::nodes::head_5 (call $src::compiler::nodes::CodeNodeCons.head_1 (local.get $var$115)))
                          (local.set $src::compiler::nodes::tail_4 (call $src::compiler::nodes::CodeNodeCons.tail_1 (local.get $var$115)))
                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::head_5) (local.get $sb) (local.get $indentation))
                          (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::tail_4) (local.get $sb) (local.get $indentation))
                        )
                      (br $B67)
                    )
                )
              (br $B68)
            )
          (block $B2
              (local.set $src::compiler::nodes::head_4 (call $src::compiler::nodes::CodeNodeCons.head_1 (local.get $var$114)))
              (local.set $src::compiler::nodes::tail_3 (call $src::compiler::nodes::CodeNodeCons.tail_1 (local.get $var$114)))
              (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::head_4) (local.get $sb) (local.get $indentation))
              (if $IF3 (call $system::core::boolean::boolean.!_1 (call $src::compiler::nodes::EmptyNode.is_1 (local.get $src::compiler::nodes::tail_3)))
                  (then
                    (block $B4
                        (call $src::compiler::nodes::CodeNode.printAst_1 (local.get $src::compiler::nodes::tail_3) (local.get $sb) (local.get $indentation))
                      )
                  )
                  (else)
                )
            )
          (br $B68)
        )
    )
  )
  (data 0 (i32.const 20167) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 20174) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 20181) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 20188) "\00\00\00\00\00")
  (func $src::stringbuilder::StringBuilderLinkedList.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $src::stringbuilder::StringBuilderEmpty.is_1 (local.get $self)) (call $src::stringbuilder::StringBuilderCons.is_1 (local.get $self)))
    )
  )
  (func $src::stringbuilder::StringBuilderLinkedList.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::stringbuilder::StringBuilderLinkedList.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::stringbuilder::StringBuilderLinkedList.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::stringbuilder::StringBuilderLinkedList.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::stringbuilder::StringBuilderLinkedList.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::stringbuilder::StringBuilderEmpty.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::stringbuilder::StringBuilderCons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::stringbuilder::StringBuilderEmpty.is_1 (param $a i64) (result i32)
    (local $src::stringbuilder::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::stringbuilder::discriminant (i32.const 116))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::stringbuilder::discriminant))
    )
  )
  (func $src::stringbuilder::StringBuilderEmpty.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::stringbuilder::StringBuilderEmpty.StringBuilderEmpty$discriminant_1 (result i64)
    (local $src::stringbuilder::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::stringbuilder::discriminant_1 (i32.const 116))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::stringbuilder::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::stringbuilder::StringBuilderEmpty.apply_1 (result i64)
    (call $src::stringbuilder::StringBuilderEmpty.StringBuilderEmpty$discriminant_1)
  )
  (func $src::stringbuilder::StringBuilderEmpty.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::stringbuilder::StringBuilderEmpty.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::stringbuilder::StringBuilderEmpty.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::stringbuilder::StringBuilderEmpty.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::stringbuilder::StringBuilderCons.is_1 (param $a i64) (result i32)
    (local $src::stringbuilder::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::stringbuilder::discriminant_2 (i32.const 117))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::stringbuilder::discriminant_2))
    )
  )
  (func $src::stringbuilder::StringBuilderCons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::stringbuilder::StringBuilderCons.StringBuilderCons$discriminant_1 (result i64)
    (local $src::stringbuilder::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::stringbuilder::discriminant_3 (i32.const 117))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::stringbuilder::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::stringbuilder::StringBuilderCons.apply_1 (param $head i64) (param $tail i64) (result i64)
    (local $src::stringbuilder::$ref i64)
    (block $B1 (result i64)
      (local.set $src::stringbuilder::$ref (call $src::stringbuilder::StringBuilderCons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::stringbuilder::StringBuilderCons.property$0_2 (local.get $src::stringbuilder::$ref) (local.get $head))
      (call $src::stringbuilder::StringBuilderCons.property$1_2 (local.get $src::stringbuilder::$ref) (local.get $tail))
      (local.get $src::stringbuilder::$ref)
    )
  )
  (func $src::stringbuilder::StringBuilderCons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::stringbuilder::StringBuilderCons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::stringbuilder::StringBuilderCons.StringBuilderCons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::stringbuilder::StringBuilderCons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::stringbuilder::StringBuilderCons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::stringbuilder::StringBuilderCons.head_1 (param $self i64) (result i64)
    (call $src::stringbuilder::StringBuilderCons.property$0_1 (local.get $self))
  )
  (func $src::stringbuilder::StringBuilderCons.head_2 (param $self i64) (param $value i64)
    (call $src::stringbuilder::StringBuilderCons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::stringbuilder::StringBuilderCons.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::stringbuilder::StringBuilderCons.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::stringbuilder::StringBuilderCons.tail_1 (param $self i64) (result i64)
    (call $src::stringbuilder::StringBuilderCons.property$1_1 (local.get $self))
  )
  (func $src::stringbuilder::StringBuilderCons.tail_2 (param $self i64) (param $value i64)
    (call $src::stringbuilder::StringBuilderCons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::stringbuilder::StringBuilderCons.property$1_1 (param $self i64) (result i64)
    (call $src::stringbuilder::StringBuilderLinkedList.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::stringbuilder::StringBuilderCons.property$1_2 (param $self i64) (param $value i64)
    (call $src::stringbuilder::StringBuilderLinkedList.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::stringbuilder::StringBuilderCons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::stringbuilder::StringBuilderCons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::stringbuilder::StringBuilder.is_1 (param $a i64) (result i32)
    (local $src::stringbuilder::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::stringbuilder::discriminant_4 (i32.const 118))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::stringbuilder::discriminant_4))
    )
  )
  (func $src::stringbuilder::StringBuilder.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::stringbuilder::StringBuilder.StringBuilder$discriminant_1 (result i64)
    (local $src::stringbuilder::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::stringbuilder::discriminant_5 (i32.const 118))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::stringbuilder::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::stringbuilder::StringBuilder.apply_1 (param $mutableHead i64) (result i64)
    (local $src::stringbuilder::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::stringbuilder::$ref_1 (call $src::stringbuilder::StringBuilder.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 8))))
      (call $src::stringbuilder::StringBuilder.property$0_2 (local.get $src::stringbuilder::$ref_1) (local.get $mutableHead))
      (local.get $src::stringbuilder::$ref_1)
    )
  )
  (func $src::stringbuilder::StringBuilder.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::stringbuilder::StringBuilder.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::stringbuilder::StringBuilder.StringBuilder$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::stringbuilder::StringBuilder.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::stringbuilder::StringBuilder.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::stringbuilder::StringBuilder.mutableHead_1 (param $self i64) (result i64)
    (call $src::stringbuilder::StringBuilder.property$0_1 (local.get $self))
  )
  (func $src::stringbuilder::StringBuilder.mutableHead_2 (param $self i64) (param $value i64)
    (call $src::stringbuilder::StringBuilder.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::stringbuilder::StringBuilder.property$0_1 (param $self i64) (result i64)
    (call $src::stringbuilder::StringBuilderLinkedList.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::stringbuilder::StringBuilder.property$0_2 (param $self i64) (param $value i64)
    (call $src::stringbuilder::StringBuilderLinkedList.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::stringbuilder::StringBuilder.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::stringbuilder::StringBuilder.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::stringbuilder::StringBuilder.apply_3 (result i64)
    (block $B1 (result i64)
      (call $src::stringbuilder::StringBuilder.apply_1 (call $src::stringbuilder::StringBuilderEmpty.apply_1))
    )
  )
  (func $src::stringbuilder::StringBuilder.append_1 (param $self i64) (param $str i64) (result i64)
    (block $B1 (result i64)
      (if $IF2 (call $system::core::u32::u32.>_1 (call $system::core::string::string.length_1 (local.get $str)) (i32.const 0x0))
          (then
            (block $B3
                (call $src::stringbuilder::StringBuilder.mutableHead_2 (local.get $self) (call $src::stringbuilder::StringBuilderCons.apply_1 (local.get $str) (call $src::stringbuilder::StringBuilder.mutableHead_1 (local.get $self))))
              )
          )
          (else)
        )
      (local.get $self)
    )
  )
  (func $src::stringbuilder::StringBuilder.append_2 (param $self i64) (param $str i64) (result i64)
    (call $src::stringbuilder::StringBuilder.append_1 (local.get $self) (call $src::stringbuilder::StringBuilder.toString_1 (local.get $str)))
  )
  (func $src::stringbuilder::StringBuilder.appendln_1 (param $self i64) (param $str i64) (result i64)
    (block $B1 (result i64)
      (if $IF2 (call $system::core::u32::u32.>_1 (call $system::core::string::string.length_1 (local.get $str)) (i32.const 0x0))
          (then
            (block $B3
                (call $src::stringbuilder::StringBuilder.mutableHead_2 (local.get $self) (call $src::stringbuilder::StringBuilderCons.apply_1 (i64.const 0x0000000400004ec7) (call $src::stringbuilder::StringBuilderCons.apply_1 (local.get $str) (call $src::stringbuilder::StringBuilder.mutableHead_1 (local.get $self)))))
              )
          )
          (else
            (block $B4
                (call $src::stringbuilder::StringBuilder.mutableHead_2 (local.get $self) (call $src::stringbuilder::StringBuilderCons.apply_1 (i64.const 0x0000000400004ece) (call $src::stringbuilder::StringBuilder.mutableHead_1 (local.get $self))))
              )
          )
        )
      (local.get $self)
    )
  )
  (func $src::stringbuilder::StringBuilder.appendln_2 (param $self i64) (result i64)
    (block $B1 (result i64)
      (call $src::stringbuilder::StringBuilder.mutableHead_2 (local.get $self) (call $src::stringbuilder::StringBuilderCons.apply_1 (i64.const 0x0000000400004ed5) (call $src::stringbuilder::StringBuilder.mutableHead_1 (local.get $self))))
      (local.get $self)
    )
  )
  (func $src::stringbuilder::StringBuilder.isEmpty_1 (param $self i64) (result i32)
    (call $src::stringbuilder::StringBuilderEmpty.is_1 (call $src::stringbuilder::StringBuilder.mutableHead_1 (local.get $self)))
  )
  (func $src::stringbuilder::StringBuilder.calculateLength_1 (param $self i64) (result i32)
    (local $src::stringbuilder::current i64)
    (local $src::stringbuilder::len i32)
    (local $src::stringbuilder::head_1 i64)
    (local $src::stringbuilder::tail_1 i64)
    (local $var$5 i64)
    (block $B1 (result i32)
      (local.set $src::stringbuilder::current (local.get $self))
      (local.set $src::stringbuilder::len (i32.const 0x0))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (block $B5
                      (local.set $var$5 (local.get $src::stringbuilder::current))
                      (block $B5_0
                          (block $B5_1
                              (br_if $B5_0 (call $src::stringbuilder::StringBuilderEmpty.is_1 (local.get $var$5)))
                              (br_if $B5_1 (call $src::stringbuilder::StringBuilderCons.is_1 (local.get $var$5)))
                            )
                          (block $B4
                              (local.set $src::stringbuilder::head_1 (call $src::stringbuilder::StringBuilderCons.head_1 (local.get $var$5)))
                              (local.set $src::stringbuilder::tail_1 (call $src::stringbuilder::StringBuilderCons.tail_1 (local.get $var$5)))
                              (local.set $src::stringbuilder::current (local.get $src::stringbuilder::tail_1))
                              (local.set $src::stringbuilder::len (call $system::core::u32::u32.+_1 (local.get $src::stringbuilder::len) (call $system::core::string::string.length_1 (local.get $src::stringbuilder::head_1))))
                              (br $Loop2)
                            )
                          (br $B5)
                        )
                      (i32.const 0x0)
                      (br $B5)
                    )
                )
            )
        )
      (local.get $src::stringbuilder::len)
    )
  )
  (func $src::stringbuilder::StringBuilder.toString_1 (param $self i64) (result i64)
    (local $src::stringbuilder::current_1 i64)
    (local $src::stringbuilder::len_1 i32)
    (local $src::stringbuilder::$ret i64)
    (local $src::stringbuilder::cursor i32)
    (local $src::stringbuilder::head_2 i64)
    (local $src::stringbuilder::tail_2 i64)
    (local $src::stringbuilder::l i32)
    (local $var$8 i64)
    (block $B1 (result i64)
      (local.set $src::stringbuilder::current_1 (call $src::stringbuilder::StringBuilder.mutableHead_1 (local.get $self)))
      (local.set $src::stringbuilder::len_1 (call $src::stringbuilder::StringBuilder.calculateLength_1 (local.get $src::stringbuilder::current_1)))
      (if $IF2 (result i64) (call $system::core::u32::u32.==_1 (local.get $src::stringbuilder::len_1) (i32.const 0x0))
          (then
            (block $B3 (result i64)
                (i64.const 0x0000000400004edc)
              )
          )
          (else
            (block $B4 (result i64)
                (local.set $src::stringbuilder::$ret (call $system::core::bytes::bytes.apply_1 (call $system::core::u32::u32.*_1 (local.get $src::stringbuilder::len_1) (i32.const 0x2))))
                (local.set $src::stringbuilder::cursor (call $system::core::u32::u32.+_1 (call $system::core::bytes::bytes.ptr_1 (local.get $src::stringbuilder::$ret)) (call $system::core::u32::u32.*_1 (local.get $src::stringbuilder::len_1) (i32.const 0x2))))
                (block $Break5
                    (loop $Loop5
                        (block $B6
                            (block $B8
                                (local.set $var$8 (local.get $src::stringbuilder::current_1))
                                (block $B8_0
                                    (block $B8_1
                                        (br_if $B8_0 (call $src::stringbuilder::StringBuilderEmpty.is_1 (local.get $var$8)))
                                        (br_if $B8_1 (call $src::stringbuilder::StringBuilderCons.is_1 (local.get $var$8)))
                                      )
                                    (block $B7
                                        (local.set $src::stringbuilder::head_2 (call $src::stringbuilder::StringBuilderCons.head_1 (local.get $var$8)))
                                        (local.set $src::stringbuilder::tail_2 (call $src::stringbuilder::StringBuilderCons.tail_1 (local.get $var$8)))
                                        (local.set $src::stringbuilder::l (call $system::core::u32::u32.*_1 (call $system::core::string::string.length_1 (local.get $src::stringbuilder::head_2)) (i32.const 0x2)))
                                        (local.set $src::stringbuilder::cursor (call $system::core::u32::u32.-_1 (local.get $src::stringbuilder::cursor) (local.get $src::stringbuilder::l)))
                                        (drop (call $system::core::memory::memcpy_1 (local.get $src::stringbuilder::cursor) (call $system::core::string::string.ptr_1 (local.get $src::stringbuilder::head_2)) (local.get $src::stringbuilder::l)))
                                        (local.set $src::stringbuilder::current_1 (local.get $src::stringbuilder::tail_2))
                                        (br $Loop5)
                                      )
                                    (br $B8)
                                  )
                                (i32.const 0x0)
                                (br $B8)
                              )
                          )
                      )
                  )
                (call $system::core::string::string.fromBytes_1 (local.get $src::stringbuilder::$ret))
              )
          )
        )
    )
  )
  (data 0 (i32.const 19168) "\02\00\00\00?\00\00")
  (data 0 (i32.const 19175) "\00\00\00\00\00")
  (data 0 (i32.const 19180) "\00\00\00\00\00")
  (data 0 (i32.const 19185) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 19194) "\0e\00\00\00<\00E\00M\00P\00T\00Y\00>\00\00")
  (data 0 (i32.const 19213) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 19222) "\0e\00\00\00<\00R\00u\00l\00e\000\00>\00\00")
  (data 0 (i32.const 19241) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 19250) " \00\00\00|\00-\00<\00S\00y\00n\00t\00a\00x\00E\00r\00r\00o\00r\00>\00=\00\00")
  (data 0 (i32.const 19287) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 19296) "\04\00\00\00|\00-\00\00")
  (data 0 (i32.const 19305) "\02\00\00\00(\00\00")
  (data 0 (i32.const 19312) "\02\00\00\00,\00\00")
  (data 0 (i32.const 19319) "\04\00\00\00)\00\0a\00\00")
  (data 0 (i32.const 19328) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 19337) "\04\00\00\00|\00-\00\00")
  (data 0 (i32.const 19346) "\02\00\00\00=\00\00")
  (data 0 (i32.const 19353) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 19362) "*\00\00\00|\00-\00<\00U\00N\00E\00X\00P\00E\00C\00T\00E\00D\00 \00T\00O\00K\00E\00N\00>\00=\00\00")
  (data 0 (i32.const 19409) "\04\00\00\00 \00 \00\00")
  (data 0 (i32.const 19418) "\18\00\00\00|\00-\00(\00A\00s\00t\00C\00o\00n\00s\00)\00\0a\00\00")
  (data 0 (i32.const 19447) "\02\00\00\00\0a\00\00")
  (data 0 (i32.const 19454) "\1a\00\00\00M\00I\00S\00S\00I\00N\00G\00 \00R\00U\00L\00E\00 \00\00")
  (data 0 (i32.const 19485) "\02\00\00\00!\00\00")
  (data 0 (i32.const 19492) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19501) "\16\00\00\00|\00 \00T\00e\00r\00m\00i\00n\00a\00l\00(\00\00")
  (data 0 (i32.const 19528) "\02\00\00\00)\00\00")
  (data 0 (i32.const 19535) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19544) "\12\00\00\00|\00 \00 \00 \00f\00r\00o\00m\00:\00\00")
  (data 0 (i32.const 19567) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19576) "\22\00\00\00|\00 \00S\00t\00r\00i\00c\00t\00T\00e\00r\00m\00i\00n\00a\00l\00(\00\00")
  (data 0 (i32.const 19615) "\02\00\00\00)\00\00")
  (data 0 (i32.const 19622) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19631) "\12\00\00\00|\00 \00 \00 \00f\00r\00o\00m\00:\00\00")
  (data 0 (i32.const 19654) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19663) "\08\00\00\00|\00 \00O\00r\00\00")
  (data 0 (i32.const 19676) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19685) "\0c\00\00\00|\00 \00C\00o\00n\00s\00\00")
  (data 0 (i32.const 19702) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19711) "\0a\00\00\00|\00 \00C\00u\00t\00\00")
  (data 0 (i32.const 19726) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19735) "\12\00\00\00|\00 \00D\00i\00s\00c\00a\00r\00d\00\00")
  (data 0 (i32.const 19758) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19767) "\14\00\00\00|\00 \00O\00p\00t\00i\00o\00n\00a\00l\00\00")
  (data 0 (i32.const 19792) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19801) "\1c\00\00\00|\00 \00N\00o\00n\00T\00e\00r\00m\00i\00n\00a\00l\00(\00\00")
  (data 0 (i32.const 19834) "\02\00\00\00)\00\00")
  (data 0 (i32.const 19841) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19850) "\16\00\00\00|\00 \00O\00n\00e\00O\00r\00M\00o\00r\00e\00\00")
  (data 0 (i32.const 19877) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19886) "\18\00\00\00|\00 \00Z\00e\00r\00o\00O\00r\00M\00o\00r\00e\00\00")
  (data 0 (i32.const 19915) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19924) "\16\00\00\00|\00 \00L\00o\00o\00k\00A\00h\00e\00a\00d\00\00")
  (data 0 (i32.const 19951) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 19960) "&\00\00\00|\00 \00N\00e\00g\00a\00t\00i\00v\00e\00L\00o\00o\00k\00A\00h\00e\00a\00d\00\00")
  (data 0 (i32.const 20003) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 20012) ",\00\00\00|\00<\00-\00 \00b\00a\00c\00k\00t\00r\00a\00c\00k\00i\00n\00g\00 \00f\00r\00o\00m\00:\00\00")
  (data 0 (i32.const 20061) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 20070) "(\00\00\00|\00<\00-\00 \00b\00a\00c\00k\00t\00r\00a\00c\00k\00i\00n\00g\00 \00t\00o\00:\00\00")
  (data 0 (i32.const 20115) "\04\00\00\00|\00 \00\00")
  (data 0 (i32.const 20124) "&\00\00\00|\00 \00p\00u\00s\00h\00.\00 \00n\00e\00w\00 \00s\00t\00r\00i\00n\00g\00:\00\00")
  (global $src::parser::parser::TEST (mut i32) (i32.const 0))
  (func $src::parser::parser::AstNode.is_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $src::parser::parser::Rule0.is_1 (local.get $self)) (call $src::parser::parser::Leaf.is_1 (local.get $self))) (call $src::parser::parser::Node.is_1 (local.get $self))) (call $src::parser::parser::SyntaxError.is_1 (local.get $self))) (call $src::parser::parser::UnexpectedToken.is_1 (local.get $self))) (call $src::parser::parser::AstCons.is_1 (local.get $self)))
    )
  )
  (func $src::parser::parser::AstNode.as_1 (param $self i64) (result i64)
    (local.get $self)
  )
  (func $src::parser::parser::AstNode.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.==_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::parser::parser::AstNode.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::native::ref.!=_1 (local.get $lhs) (local.get $rhs))
  )
  (func $src::parser::parser::AstNode.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::parser::AstNode.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::parser::Rule0.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::Leaf.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::Node.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::SyntaxError.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::UnexpectedToken.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::AstCons.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::Rule0.is_1 (param $a i64) (result i32)
    (local $src::parser::parser::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::parser::parser::discriminant (i32.const 139))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::parser::discriminant))
    )
  )
  (func $src::parser::parser::Rule0.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::Rule0.Rule0$discriminant_1 (result i64)
    (local $src::parser::parser::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::parser::parser::discriminant_1 (i32.const 139))
      (call $system::core::i64::i64.<<_1 (call $system::core::u32::u32.as_1 (local.get $src::parser::parser::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::parser::parser::Rule0.apply_1 (result i64)
    (call $src::parser::parser::Rule0.Rule0$discriminant_1)
  )
  (func $src::parser::parser::Rule0.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::Rule0.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::Rule0.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::parser::Rule0.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::parser::Leaf.is_1 (param $a i64) (result i32)
    (local $src::parser::parser::discriminant_2 i32)
    (block $B1 (result i32)
      (local.set $src::parser::parser::discriminant_2 (i32.const 140))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::parser::discriminant_2))
    )
  )
  (func $src::parser::parser::Leaf.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::Leaf.Leaf$discriminant_1 (result i64)
    (local $src::parser::parser::discriminant_3 i32)
    (block $B1 (result i64)
      (local.set $src::parser::parser::discriminant_3 (i32.const 140))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::parser::discriminant_3)) (i32.const 32))
    )
  )
  (func $src::parser::parser::Leaf.apply_1 (param $token i64) (param $value i64) (result i64)
    (local $src::parser::parser::$ref i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::$ref (call $src::parser::parser::Leaf.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::parser::Leaf.property$0_2 (local.get $src::parser::parser::$ref) (local.get $token))
      (call $src::parser::parser::Leaf.property$1_2 (local.get $src::parser::parser::$ref) (local.get $value))
      (local.get $src::parser::parser::$ref)
    )
  )
  (func $src::parser::parser::Leaf.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::parser::Leaf.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::parser::Leaf.Leaf$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::parser::Leaf.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::Leaf.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::Leaf.token_1 (param $self i64) (result i64)
    (call $src::parser::parser::Leaf.property$0_1 (local.get $self))
  )
  (func $src::parser::parser::Leaf.token_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::Leaf.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::Leaf.property$0_1 (param $self i64) (result i64)
    (call $src::lexer::tokens::Token.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::parser::Leaf.property$0_2 (param $self i64) (param $value i64)
    (call $src::lexer::tokens::Token.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::parser::Leaf.value_1 (param $self i64) (result i64)
    (call $src::parser::parser::Leaf.property$1_1 (local.get $self))
  )
  (func $src::parser::parser::Leaf.value_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::Leaf.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::Leaf.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::parser::parser::Leaf.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::parser::Leaf.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::parser::Leaf.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::parser::Node.is_1 (param $a i64) (result i32)
    (local $src::parser::parser::discriminant_4 i32)
    (block $B1 (result i32)
      (local.set $src::parser::parser::discriminant_4 (i32.const 141))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::parser::discriminant_4))
    )
  )
  (func $src::parser::parser::Node.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::Node.Node$discriminant_1 (result i64)
    (local $src::parser::parser::discriminant_5 i32)
    (block $B1 (result i64)
      (local.set $src::parser::parser::discriminant_5 (i32.const 141))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::parser::discriminant_5)) (i32.const 32))
    )
  )
  (func $src::parser::parser::Node.apply_1 (param $name i64) (param $child i64) (param $start i32) (param $end i32) (result i64)
    (local $src::parser::parser::$ref_1 i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::$ref_1 (call $src::parser::parser::Node.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 24))))
      (call $src::parser::parser::Node.property$0_2 (local.get $src::parser::parser::$ref_1) (local.get $name))
      (call $src::parser::parser::Node.property$1_2 (local.get $src::parser::parser::$ref_1) (local.get $child))
      (call $src::parser::parser::Node.property$2_2 (local.get $src::parser::parser::$ref_1) (local.get $start))
      (call $src::parser::parser::Node.property$3_2 (local.get $src::parser::parser::$ref_1) (local.get $end))
      (local.get $src::parser::parser::$ref_1)
    )
  )
  (func $src::parser::parser::Node.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::parser::Node.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::parser::Node.Node$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::parser::Node.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::Node.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::Node.name_1 (param $self i64) (result i64)
    (call $src::parser::parser::Node.property$0_1 (local.get $self))
  )
  (func $src::parser::parser::Node.name_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::Node.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::Node.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::parser::parser::Node.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::parser::Node.child_1 (param $self i64) (result i64)
    (call $src::parser::parser::Node.property$1_1 (local.get $self))
  )
  (func $src::parser::parser::Node.child_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::Node.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::Node.property$1_1 (param $self i64) (result i64)
    (call $src::parser::parser::AstNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::parser::Node.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::AstNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::parser::Node.start_1 (param $self i64) (result i32)
    (call $src::parser::parser::Node.property$2_1 (local.get $self))
  )
  (func $src::parser::parser::Node.start_2 (param $self i64) (param $value i32)
    (call $src::parser::parser::Node.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::Node.property$2_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 16))
  )
  (func $src::parser::parser::Node.property$2_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 16))
  )
  (func $src::parser::parser::Node.end_1 (param $self i64) (result i32)
    (call $src::parser::parser::Node.property$3_1 (local.get $self))
  )
  (func $src::parser::parser::Node.end_2 (param $self i64) (param $value i32)
    (call $src::parser::parser::Node.property$3_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::Node.property$3_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 20))
  )
  (func $src::parser::parser::Node.property$3_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 20))
  )
  (func $src::parser::parser::Node.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::parser::Node.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::parser::SyntaxError.is_1 (param $a i64) (result i32)
    (local $src::parser::parser::discriminant_6 i32)
    (block $B1 (result i32)
      (local.set $src::parser::parser::discriminant_6 (i32.const 142))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::parser::discriminant_6))
    )
  )
  (func $src::parser::parser::SyntaxError.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::SyntaxError.SyntaxError$discriminant_1 (result i64)
    (local $src::parser::parser::discriminant_7 i32)
    (block $B1 (result i64)
      (local.set $src::parser::parser::discriminant_7 (i32.const 142))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::parser::discriminant_7)) (i32.const 32))
    )
  )
  (func $src::parser::parser::SyntaxError.apply_1 (param $token i64) (param $message i64) (result i64)
    (local $src::parser::parser::$ref_2 i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::$ref_2 (call $src::parser::parser::SyntaxError.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::parser::SyntaxError.property$0_2 (local.get $src::parser::parser::$ref_2) (local.get $token))
      (call $src::parser::parser::SyntaxError.property$1_2 (local.get $src::parser::parser::$ref_2) (local.get $message))
      (local.get $src::parser::parser::$ref_2)
    )
  )
  (func $src::parser::parser::SyntaxError.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::parser::SyntaxError.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::parser::SyntaxError.SyntaxError$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::parser::SyntaxError.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::SyntaxError.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::SyntaxError.token_1 (param $self i64) (result i64)
    (call $src::parser::parser::SyntaxError.property$0_1 (local.get $self))
  )
  (func $src::parser::parser::SyntaxError.token_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::SyntaxError.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::SyntaxError.property$0_1 (param $self i64) (result i64)
    (call $src::lexer::tokens::Token.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::parser::SyntaxError.property$0_2 (param $self i64) (param $value i64)
    (call $src::lexer::tokens::Token.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::parser::SyntaxError.message_1 (param $self i64) (result i64)
    (call $src::parser::parser::SyntaxError.property$1_1 (local.get $self))
  )
  (func $src::parser::parser::SyntaxError.message_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::SyntaxError.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::SyntaxError.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::parser::parser::SyntaxError.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::parser::SyntaxError.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::parser::SyntaxError.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::parser::UnexpectedToken.is_1 (param $a i64) (result i32)
    (local $src::parser::parser::discriminant_8 i32)
    (block $B1 (result i32)
      (local.set $src::parser::parser::discriminant_8 (i32.const 143))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::parser::discriminant_8))
    )
  )
  (func $src::parser::parser::UnexpectedToken.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::UnexpectedToken.UnexpectedToken$discriminant_1 (result i64)
    (local $src::parser::parser::discriminant_9 i32)
    (block $B1 (result i64)
      (local.set $src::parser::parser::discriminant_9 (i32.const 143))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::parser::discriminant_9)) (i32.const 32))
    )
  )
  (func $src::parser::parser::UnexpectedToken.apply_1 (param $token i64) (param $value i64) (result i64)
    (local $src::parser::parser::$ref_3 i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::$ref_3 (call $src::parser::parser::UnexpectedToken.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::parser::UnexpectedToken.property$0_2 (local.get $src::parser::parser::$ref_3) (local.get $token))
      (call $src::parser::parser::UnexpectedToken.property$1_2 (local.get $src::parser::parser::$ref_3) (local.get $value))
      (local.get $src::parser::parser::$ref_3)
    )
  )
  (func $src::parser::parser::UnexpectedToken.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::parser::UnexpectedToken.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::parser::UnexpectedToken.UnexpectedToken$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::parser::UnexpectedToken.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::UnexpectedToken.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::UnexpectedToken.token_1 (param $self i64) (result i64)
    (call $src::parser::parser::UnexpectedToken.property$0_1 (local.get $self))
  )
  (func $src::parser::parser::UnexpectedToken.token_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::UnexpectedToken.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::UnexpectedToken.property$0_1 (param $self i64) (result i64)
    (call $src::lexer::tokens::Token.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::parser::UnexpectedToken.property$0_2 (param $self i64) (param $value i64)
    (call $src::lexer::tokens::Token.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::parser::UnexpectedToken.value_1 (param $self i64) (result i64)
    (call $src::parser::parser::UnexpectedToken.property$1_1 (local.get $self))
  )
  (func $src::parser::parser::UnexpectedToken.value_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::UnexpectedToken.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::UnexpectedToken.property$1_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::parser::parser::UnexpectedToken.property$1_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::parser::UnexpectedToken.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::parser::UnexpectedToken.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::parser::AstCons.is_1 (param $a i64) (result i32)
    (local $src::parser::parser::discriminant_10 i32)
    (block $B1 (result i32)
      (local.set $src::parser::parser::discriminant_10 (i32.const 144))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::parser::discriminant_10))
    )
  )
  (func $src::parser::parser::AstCons.as_3 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::AstCons.AstCons$discriminant_1 (result i64)
    (local $src::parser::parser::discriminant_11 i32)
    (block $B1 (result i64)
      (local.set $src::parser::parser::discriminant_11 (i32.const 144))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::parser::discriminant_11)) (i32.const 32))
    )
  )
  (func $src::parser::parser::AstCons.apply_1 (param $head i64) (param $tail i64) (result i64)
    (local $src::parser::parser::$ref_4 i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::$ref_4 (call $src::parser::parser::AstCons.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::parser::AstCons.property$0_2 (local.get $src::parser::parser::$ref_4) (local.get $head))
      (call $src::parser::parser::AstCons.property$1_2 (local.get $src::parser::parser::$ref_4) (local.get $tail))
      (local.get $src::parser::parser::$ref_4)
    )
  )
  (func $src::parser::parser::AstCons.as_5 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::parser::AstCons.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::parser::AstCons.AstCons$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::parser::AstCons.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::AstCons.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::AstCons.head_1 (param $self i64) (result i64)
    (call $src::parser::parser::AstCons.property$0_1 (local.get $self))
  )
  (func $src::parser::parser::AstCons.head_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::AstCons.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::AstCons.property$0_1 (param $self i64) (result i64)
    (call $src::parser::parser::AstNode.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::parser::AstCons.property$0_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::AstNode.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::parser::AstCons.tail_1 (param $self i64) (result i64)
    (call $src::parser::parser::AstCons.property$1_1 (local.get $self))
  )
  (func $src::parser::parser::AstCons.tail_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::AstCons.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::AstCons.property$1_1 (param $self i64) (result i64)
    (call $src::parser::parser::AstNode.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::parser::AstCons.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::AstNode.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::parser::AstCons.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::parser::AstCons.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::parser::first_1 (param $astNode i64) (result i64)
    (local $src::parser::parser::head_1 i64)
    (local $src::parser::parser::tail_1 i64)
    (local $var$3 i64)
    (block $B2 (result i64)
      (local.set $var$3 (local.get $astNode))
      (block $B2_0
          (block $B2_1
              (br_if $B2_0 (call $src::parser::parser::AstCons.is_1 (local.get $var$3)))
            )
          (local.get $astNode)
          (br $B2)
        )
      (block $B1 (result i64)
          (local.set $src::parser::parser::head_1 (call $src::parser::parser::AstCons.head_1 (local.get $var$3)))
          (local.set $src::parser::parser::tail_1 (call $src::parser::parser::AstCons.tail_1 (local.get $var$3)))
          (local.get $src::parser::parser::head_1)
        )
      (br $B2)
    )
  )
  (func $src::parser::parser::second_1 (param $astNode i64) (result i64)
    (call $src::parser::parser::first_1 (call $src::parser::parser::rest_1 (local.get $astNode)))
  )
  (func $src::parser::parser::third_1 (param $astNode i64) (result i64)
    (call $src::parser::parser::second_1 (call $src::parser::parser::rest_1 (local.get $astNode)))
  )
  (func $src::parser::parser::rest_1 (param $astNode i64) (result i64)
    (local $src::parser::parser::head_2 i64)
    (local $src::parser::parser::tail_2 i64)
    (local $var$3 i64)
    (block $B2 (result i64)
      (local.set $var$3 (local.get $astNode))
      (block $B2_0
          (block $B2_1
              (br_if $B2_0 (call $src::parser::parser::AstCons.is_1 (local.get $var$3)))
            )
          (call $src::parser::parser::Rule0.apply_1)
          (br $B2)
        )
      (block $B1 (result i64)
          (local.set $src::parser::parser::head_2 (call $src::parser::parser::AstCons.head_1 (local.get $var$3)))
          (local.set $src::parser::parser::tail_2 (call $src::parser::parser::AstCons.tail_1 (local.get $var$3)))
          (local.get $src::parser::parser::tail_2)
        )
      (br $B2)
    )
  )
  (func $src::parser::parser::getChild_1 (param $astNode i64) (result i64)
    (local $src::parser::parser::child_1 i64)
    (local $var$2 i64)
    (block $B2 (result i64)
      (local.set $var$2 (local.get $astNode))
      (block $B2_0
          (block $B2_1
              (br_if $B2_0 (call $src::parser::parser::Node.is_1 (local.get $var$2)))
            )
          (local.get $astNode)
          (br $B2)
        )
      (block $B1 (result i64)
          (local.set $src::parser::parser::child_1 (call $src::parser::parser::Node.child_1 (local.get $var$2)))
          (local.get $src::parser::parser::child_1)
        )
      (br $B2)
    )
  )
  (func $src::parser::parser::getAstNodeName_1 (param $astNode i64) (result i64)
    (local $src::parser::parser::name_1 i64)
    (local $var$2 i64)
    (block $B2 (result i64)
      (local.set $var$2 (local.get $astNode))
      (block $B2_0
          (block $B2_1
              (br_if $B2_0 (call $src::parser::parser::Node.is_1 (local.get $var$2)))
            )
          (i64.const 0x0000000400004ae0)
          (br $B2)
        )
      (block $B1 (result i64)
          (local.set $src::parser::parser::name_1 (call $src::parser::parser::Node.name_1 (local.get $var$2)))
          (local.get $src::parser::parser::name_1)
        )
      (br $B2)
    )
  )
  (func $src::parser::parser::textOf_1 (param $astNode i64) (result i64)
    (local $src::parser::parser::token_3 i64)
    (local $src::parser::parser::value_26 i64)
    (local $src::parser::parser::head_3 i64)
    (local $src::parser::parser::tail_3 i64)
    (local $src::parser::parser::name_2 i64)
    (local $src::parser::parser::child_2 i64)
    (local $var$7 i64)
    (block $B4 (result i64)
      (local.set $var$7 (local.get $astNode))
      (block $B4_0
          (block $B4_1
              (block $B4_2
                  (block $B4_3
                      (block $B4_4
                          (br_if $B4_0 (call $src::parser::parser::Rule0.is_1 (local.get $var$7)))
                          (br_if $B4_1 (call $src::parser::parser::Leaf.is_1 (local.get $var$7)))
                          (br_if $B4_2 (call $src::parser::parser::AstCons.is_1 (local.get $var$7)))
                          (br_if $B4_3 (call $src::parser::parser::Node.is_1 (local.get $var$7)))
                        )
                      (i64.const 0x0000000400004aec)
                      (br $B4)
                    )
                  (block $B3 (result i64)
                      (local.set $src::parser::parser::name_2 (call $src::parser::parser::Node.name_1 (local.get $var$7)))
                      (local.set $src::parser::parser::child_2 (call $src::parser::parser::Node.child_1 (local.get $var$7)))
                      (call $src::parser::parser::textOf_1 (local.get $src::parser::parser::child_2))
                    )
                  (br $B4)
                )
              (block $B2 (result i64)
                  (local.set $src::parser::parser::head_3 (call $src::parser::parser::AstCons.head_1 (local.get $var$7)))
                  (local.set $src::parser::parser::tail_3 (call $src::parser::parser::AstCons.tail_1 (local.get $var$7)))
                  (call $system::core::string::string.++_1 (call $src::parser::parser::textOf_1 (local.get $src::parser::parser::head_3)) (call $src::parser::parser::textOf_1 (local.get $src::parser::parser::tail_3)))
                )
              (br $B4)
            )
          (block $B1 (result i64)
              (local.set $src::parser::parser::token_3 (call $src::parser::parser::Leaf.token_1 (local.get $var$7)))
              (local.set $src::parser::parser::value_26 (call $src::parser::parser::Leaf.value_1 (local.get $var$7)))
              (local.get $src::parser::parser::value_26)
            )
          (br $B4)
        )
      (i64.const 0x0000000400004ae7)
      (br $B4)
    )
  )
  (func $src::parser::parser::printAst_1 (param $ast i64) (result i64)
    (local $src::parser::parser::sb i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::sb (call $src::stringbuilder::StringBuilder.apply_3))
      (call $src::parser::parser::printAst_2 (local.get $ast) (i32.const 0) (local.get $src::parser::parser::sb))
      (call $src::stringbuilder::StringBuilder.toString_1 (local.get $src::parser::parser::sb))
    )
  )
  (func $src::parser::parser::printAst_2 (param $ast i64) (param $level i32) (param $sb i64)
    (local $src::parser::parser::token_4 i64)
    (local $src::parser::parser::message_1 i64)
    (local $src::parser::parser::name_3 i64)
    (local $src::parser::parser::child_3 i64)
    (local $src::parser::parser::start_1 i32)
    (local $src::parser::parser::end_1 i32)
    (local $src::parser::parser::token_5 i64)
    (local $src::parser::parser::value_27 i64)
    (local $src::parser::parser::token_6 i64)
    (local $src::parser::parser::value_28 i64)
    (local $src::parser::parser::head_4 i64)
    (local $src::parser::parser::tail_4 i64)
    (local $var$15 i64)
    (block $B8
      (local.set $var$15 (local.get $ast))
      (block $B8_0
          (block $B8_1
              (block $B8_2
                  (block $B8_3
                      (block $B8_4
                          (block $B8_5
                              (block $B8_6
                                  (br_if $B8_0 (call $src::helpers::Nil.is_1 (local.get $var$15)))
                                  (br_if $B8_1 (call $src::parser::parser::Rule0.is_1 (local.get $var$15)))
                                  (br_if $B8_2 (call $src::parser::parser::SyntaxError.is_1 (local.get $var$15)))
                                  (br_if $B8_3 (call $src::parser::parser::Node.is_1 (local.get $var$15)))
                                  (br_if $B8_4 (call $src::parser::parser::Leaf.is_1 (local.get $var$15)))
                                  (br_if $B8_5 (call $src::parser::parser::UnexpectedToken.is_1 (local.get $var$15)))
                                  (br_if $B8_6 (call $src::parser::parser::AstCons.is_1 (local.get $var$15)))
                                )
                              (block $B7
                                  (local.set $src::parser::parser::head_4 (call $src::parser::parser::AstCons.head_1 (local.get $var$15)))
                                  (local.set $src::parser::parser::tail_4 (call $src::parser::parser::AstCons.tail_1 (local.get $var$15)))
                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::helpers::repeat_1 (i64.const 0x0000000400004bd1) (local.get $level))) (i64.const 0x0000000400004bda)))
                                  (call $src::parser::parser::printAst_2 (local.get $src::parser::parser::head_4) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1)) (local.get $sb))
                                  (drop (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (i64.const 0x0000000400004bf7)))
                                  (call $src::parser::parser::printAst_2 (local.get $src::parser::parser::tail_4) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1)) (local.get $sb))
                                )
                              (br $B8)
                            )
                          (block $B6
                              (local.set $src::parser::parser::token_6 (call $src::parser::parser::UnexpectedToken.token_1 (local.get $var$15)))
                              (local.set $src::parser::parser::value_28 (call $src::parser::parser::UnexpectedToken.value_1 (local.get $var$15)))
                              (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::helpers::repeat_1 (i64.const 0x0000000400004b99) (local.get $level))) (i64.const 0x0000000400004ba2)) (local.get $src::parser::parser::value_28)))
                            )
                          (br $B8)
                        )
                      (block $B5
                          (local.set $src::parser::parser::token_5 (call $src::parser::parser::Leaf.token_1 (local.get $var$15)))
                          (local.set $src::parser::parser::value_27 (call $src::parser::parser::Leaf.value_1 (local.get $var$15)))
                          (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::helpers::repeat_1 (i64.const 0x0000000400004b80) (local.get $level))) (i64.const 0x0000000400004b89)) (call $src::lexer::tokens::TokenType.toString_1 (call $src::lexer::tokens::Token.tokenType_1 (local.get $src::parser::parser::token_5)))) (i64.const 0x0000000400004b92)) (local.get $src::parser::parser::value_27)))
                        )
                      (br $B8)
                    )
                  (block $B4
                      (local.set $src::parser::parser::name_3 (call $src::parser::parser::Node.name_1 (local.get $var$15)))
                      (local.set $src::parser::parser::child_3 (call $src::parser::parser::Node.child_1 (local.get $var$15)))
                      (local.set $src::parser::parser::start_1 (call $src::parser::parser::Node.start_1 (local.get $var$15)))
                      (local.set $src::parser::parser::end_1 (call $src::parser::parser::Node.end_1 (local.get $var$15)))
                      (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::helpers::repeat_1 (i64.const 0x0000000400004b57) (local.get $level))) (i64.const 0x0000000400004b60)) (local.get $src::parser::parser::name_3)) (i64.const 0x0000000400004b69)) (call $system::core::string::string.stringify_6 (local.get $src::parser::parser::start_1))) (i64.const 0x0000000400004b70)) (call $system::core::string::string.stringify_6 (local.get $src::parser::parser::end_1))) (i64.const 0x0000000400004b77)))
                      (call $src::parser::parser::printAst_2 (local.get $src::parser::parser::child_3) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1)) (local.get $sb))
                    )
                  (br $B8)
                )
              (block $B3
                  (local.set $src::parser::parser::token_4 (call $src::parser::parser::SyntaxError.token_1 (local.get $var$15)))
                  (local.set $src::parser::parser::message_1 (call $src::parser::parser::SyntaxError.message_1 (local.get $var$15)))
                  (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::helpers::repeat_1 (i64.const 0x0000000400004b29) (local.get $level))) (i64.const 0x0000000400004b32)) (local.get $src::parser::parser::message_1)))
                )
              (br $B8)
            )
          (block $B2
              (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::helpers::repeat_1 (i64.const 0x0000000400004b0d) (local.get $level))) (i64.const 0x0000000400004b16)))
            )
          (br $B8)
        )
      (block $B1
          (drop (call $src::stringbuilder::StringBuilder.append_1 (call $src::stringbuilder::StringBuilder.append_1 (local.get $sb) (call $src::helpers::repeat_1 (i64.const 0x0000000400004af1) (local.get $level))) (i64.const 0x0000000400004afa)))
        )
      (br $B8)
    )
  )
  (func $src::parser::parser::list_1 (param $lhs i64) (param $rhs i64) (result i64)
    (local $var$2 i64)
    (local $var$3 i64)
    (block $B2 (result i64)
      (local.set $var$2 (local.get $lhs))
      (block $B2_0
          (block $B2_1
              (br_if $B2_0 (call $src::parser::parser::Rule0.is_1 (local.get $var$2)))
            )
          (block $B1 (result i64)
              (local.set $var$3 (local.get $rhs))
              (block $B1_0
                  (block $B1_1
                      (br_if $B1_0 (call $src::parser::parser::Rule0.is_1 (local.get $var$3)))
                    )
                  (call $src::parser::parser::AstCons.apply_1 (local.get $lhs) (local.get $rhs))
                  (br $B1)
                )
              (local.get $lhs)
              (br $B1)
            )
          (br $B2)
        )
      (local.get $rhs)
      (br $B2)
    )
  )
  (func $src::parser::parser::Parser.is_1 (param $a i64) (result i32)
    (local $src::parser::parser::discriminant_12 i32)
    (block $B1 (result i32)
      (local.set $src::parser::parser::discriminant_12 (i32.const 145))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::parser::parser::discriminant_12))
    )
  )
  (func $src::parser::parser::Parser.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::parser::parser::Parser.Parser$discriminant_1 (result i64)
    (local $src::parser::parser::discriminant_13 i32)
    (block $B1 (result i64)
      (local.set $src::parser::parser::discriminant_13 (i32.const 145))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::parser::parser::discriminant_13)) (i32.const 32))
    )
  )
  (func $src::parser::parser::Parser.apply_1 (param $lexer i64) (param $grammar i64) (result i64)
    (local $src::parser::parser::$ref_5 i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::$ref_5 (call $src::parser::parser::Parser.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 16))))
      (call $src::parser::parser::Parser.property$0_2 (local.get $src::parser::parser::$ref_5) (local.get $lexer))
      (call $src::parser::parser::Parser.property$1_2 (local.get $src::parser::parser::$ref_5) (local.get $grammar))
      (local.get $src::parser::parser::$ref_5)
    )
  )
  (func $src::parser::parser::Parser.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::parser::parser::Parser.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::parser::parser::Parser.Parser$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::parser::parser::Parser.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::Parser.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::parser::parser::Parser.lexer_1 (param $self i64) (result i64)
    (call $src::parser::parser::Parser.property$0_1 (local.get $self))
  )
  (func $src::parser::parser::Parser.lexer_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::Parser.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::Parser.property$0_1 (param $self i64) (result i64)
    (call $src::lexer::lexer::Lexer.load_1 (local.get $self) (i32.const 0))
  )
  (func $src::parser::parser::Parser.property$0_2 (param $self i64) (param $value i64)
    (call $src::lexer::lexer::Lexer.store_1 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::parser::parser::Parser.grammar_1 (param $self i64) (result i64)
    (call $src::parser::parser::Parser.property$1_1 (local.get $self))
  )
  (func $src::parser::parser::Parser.grammar_2 (param $self i64) (param $value i64)
    (call $src::parser::parser::Parser.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::parser::parser::Parser.property$1_1 (param $self i64) (result i64)
    (call $src::parser::grammar::Grammar.load_1 (local.get $self) (i32.const 8))
  )
  (func $src::parser::parser::Parser.property$1_2 (param $self i64) (param $value i64)
    (call $src::parser::grammar::Grammar.store_1 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::parser::parser::Parser.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::parser::parser::Parser.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::parser::parser::parse_1 (param $source i64) (param $rule i64) (param $grammar i64) (result i64)
    (block $B1 (result i64)
      (call $src::parser::parser::parse_2 (local.get $rule) (call $src::parser::parser::Parser.apply_1 (call $src::lexer::lexer::Lexer.apply_3 (local.get $source)) (local.get $grammar)) (i32.const 0))
    )
  )
  (func $src::parser::parser::parse_2 (param $ruleName i64) (param $parser i64) (param $level i32) (result i64)
    (local $var$3 i64)
    (block $B1 (result i64)
      (block $B3 (result i64)
          (local.set $var$3 (call $src::parser::grammar::Grammar.findRule_1 (call $src::parser::parser::Parser.grammar_1 (local.get $parser)) (local.get $ruleName)))
          (block $B3_0
              (block $B3_1
                  (br_if $B3_0 (call $src::parser::grammar::ParserRule.is_1 (local.get $var$3)))
                )
              (block $B2 (result i64)
                  (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (i64.const 0x0000000400004bfe) (local.get $ruleName)) (i64.const 0x0000000400004c1d)))
                  (call $src::parser::parser::Rule0.apply_1)
                )
              (br $B3)
            )
          (call $src::parser::parser::parse_3 (local.get $var$3) (local.get $parser) (local.get $level))
          (br $B3)
        )
    )
  )
  (func $src::parser::parser::parse_3 (param $rule i64) (param $parser i64) (param $level i32) (result i64)
    (local $src::parser::parser::backtrack i32)
    (local $src::parser::parser::result i64)
    (local $src::parser::parser::tokenType i64)
    (local $src::parser::parser::lexer_1 i64)
    (local $src::parser::parser::token_7 i64)
    (local $src::parser::parser::tokenType_1 i64)
    (local $src::parser::parser::value_33 i64)
    (local $src::parser::parser::lexer_2 i64)
    (local $src::parser::parser::token_8 i64)
    (local $src::parser::parser::tokenValue i64)
    (local $src::parser::parser::lhs_32 i64)
    (local $src::parser::parser::rhs_11 i64)
    (local $src::parser::parser::head_5 i64)
    (local $src::parser::parser::tail_5 i64)
    (local $src::parser::parser::head_6 i64)
    (local $src::parser::parser::tail_6 i64)
    (local $src::parser::parser::lexer_3 i64)
    (local $src::parser::parser::ret i64)
    (local $src::parser::parser::rule_3 i64)
    (local $src::parser::parser::rule_4 i64)
    (local $src::parser::parser::name_4 i64)
    (local $src::parser::parser::rule_5 i64)
    (local $src::parser::parser::ret_1 i64)
    (local $src::parser::parser::rule_6 i64)
    (local $src::parser::parser::ret_2 i64)
    (local $src::parser::parser::rule_7 i64)
    (local $src::parser::parser::ret_3 i64)
    (local $src::parser::parser::rule_8 i64)
    (local $src::parser::parser::ret_4 i64)
    (local $src::parser::parser::message_2 i64)
    (local $src::parser::parser::name_5 i64)
    (local $src::parser::parser::rule_9 i64)
    (local $src::parser::parser::start_2 i32)
    (local $src::parser::parser::ret_5 i64)
    (local $src::parser::parser::name_6 i64)
    (local $src::parser::parser::rule_10 i64)
    (local $src::parser::parser::start_3 i32)
    (local $src::parser::parser::ret_6 i64)
    (local $var$41 i64)
    (local $var$42 i64)
    (local $var$43 i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::backtrack (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))))
      (local.set $src::parser::parser::result (block $B60 (result i64)
                (local.set $var$41 (local.get $rule))
                (block $B60_0
                    (block $B60_1
                        (block $B60_2
                            (block $B60_3
                                (block $B60_4
                                    (block $B60_5
                                        (block $B60_6
                                            (block $B60_7
                                                (block $B60_8
                                                    (block $B60_9
                                                        (block $B60_10
                                                            (block $B60_11
                                                                (block $B60_12
                                                                    (block $B60_13
                                                                        (block $B60_14
                                                                            (br_if $B60_0 (call $src::parser::grammar::Terminal.is_1 (local.get $var$41)))
                                                                            (br_if $B60_1 (call $src::parser::grammar::StrictTerminal.is_1 (local.get $var$41)))
                                                                            (br_if $B60_2 (call $src::parser::grammar::Or.is_1 (local.get $var$41)))
                                                                            (br_if $B60_3 (call $src::parser::grammar::Cons.is_1 (local.get $var$41)))
                                                                            (br_if $B60_4 (call $src::parser::grammar::Cut.is_1 (local.get $var$41)))
                                                                            (br_if $B60_5 (call $src::parser::grammar::Discard.is_1 (local.get $var$41)))
                                                                            (br_if $B60_6 (call $src::parser::grammar::Optional.is_1 (local.get $var$41)))
                                                                            (br_if $B60_7 (call $src::parser::grammar::NonTerminal.is_1 (local.get $var$41)))
                                                                            (br_if $B60_8 (call $src::parser::grammar::OneOrMore.is_1 (local.get $var$41)))
                                                                            (br_if $B60_9 (call $src::parser::grammar::ZeroOrMore.is_1 (local.get $var$41)))
                                                                            (br_if $B60_10 (call $src::parser::grammar::LookAhead.is_1 (local.get $var$41)))
                                                                            (br_if $B60_11 (call $src::parser::grammar::NegativeLookAhead.is_1 (local.get $var$41)))
                                                                            (br_if $B60_12 (call $src::parser::grammar::Fail.is_1 (local.get $var$41)))
                                                                            (br_if $B60_13 (call $src::parser::grammar::Push.is_1 (local.get $var$41)))
                                                                            (br_if $B60_14 (call $src::parser::grammar::PushIfManyChildren.is_1 (local.get $var$41)))
                                                                          )
                                                                        (block $B58 (result i64)
                                                                            (local.set $src::parser::parser::name_6 (call $src::parser::grammar::PushIfManyChildren.name_1 (local.get $var$41)))
                                                                            (local.set $src::parser::parser::rule_10 (call $src::parser::grammar::PushIfManyChildren.rule_1 (local.get $var$41)))
                                                                            (local.set $src::parser::parser::start_3 (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))))
                                                                            (local.set $src::parser::parser::ret_6 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rule_10) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                                                            (block $B59 (result i64)
                                                                                (local.set $var$42 (local.get $src::parser::parser::ret_6))
                                                                                (block $B59_0
                                                                                    (block $B59_1
                                                                                        (block $B59_2
                                                                                            (br_if $B59_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                                                            (br_if $B59_1 (call $src::parser::parser::AstCons.is_1 (local.get $var$42)))
                                                                                            (br_if $B59_2 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                                                                          )
                                                                                        (local.get $var$42)
                                                                                        (br $B59)
                                                                                      )
                                                                                    (call $src::parser::parser::Node.apply_1 (local.get $src::parser::parser::name_6) (local.get $var$42) (local.get $src::parser::parser::start_3) (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))))
                                                                                    (br $B59)
                                                                                  )
                                                                                (call $src::helpers::Nil.apply_1)
                                                                                (br $B59)
                                                                              )
                                                                          )
                                                                        (br $B60)
                                                                      )
                                                                    (block $B56 (result i64)
                                                                        (local.set $src::parser::parser::name_5 (call $src::parser::grammar::Push.name_1 (local.get $var$41)))
                                                                        (local.set $src::parser::parser::rule_9 (call $src::parser::grammar::Push.rule_1 (local.get $var$41)))
                                                                        (local.set $src::parser::parser::start_2 (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))))
                                                                        (local.set $src::parser::parser::ret_5 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rule_9) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                                                        (block $B57 (result i64)
                                                                            (local.set $var$42 (local.get $src::parser::parser::ret_5))
                                                                            (block $B57_0
                                                                                (block $B57_1
                                                                                    (br_if $B57_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                                                    (br_if $B57_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                                                                  )
                                                                                (call $src::parser::parser::Node.apply_1 (local.get $src::parser::parser::name_5) (local.get $var$42) (local.get $src::parser::parser::start_2) (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))))
                                                                                (br $B57)
                                                                              )
                                                                            (call $src::helpers::Nil.apply_1)
                                                                            (br $B57)
                                                                          )
                                                                      )
                                                                    (br $B60)
                                                                  )
                                                                (block $B55 (result i64)
                                                                    (local.set $src::parser::parser::message_2 (call $src::parser::grammar::Fail.message_1 (local.get $var$41)))
                                                                    (call $src::parser::parser::SyntaxError.apply_1 (call $src::lexer::lexer::Lexer.peek_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))) (local.get $src::parser::parser::message_2))
                                                                  )
                                                                (br $B60)
                                                              )
                                                            (block $B52 (result i64)
                                                                (local.set $src::parser::parser::rule_8 (call $src::parser::grammar::NegativeLookAhead.rule_1 (local.get $var$41)))
                                                                (if $IF53 (global.get $src::parser::parser::TEST)
                                                                    (then
                                                                      (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004def) (local.get $level)) (i64.const 0x0000000400004df8)))
                                                                    )
                                                                    (else)
                                                                  )
                                                                (local.set $src::parser::parser::ret_4 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rule_8) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                                                (call $src::lexer::lexer::Lexer.seek_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)) (local.get $src::parser::parser::backtrack))
                                                                (block $B54 (result i64)
                                                                    (local.set $var$42 (local.get $src::parser::parser::ret_4))
                                                                    (block $B54_0
                                                                        (block $B54_1
                                                                            (br_if $B54_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                                          )
                                                                        (call $src::helpers::Nil.apply_1)
                                                                        (br $B54)
                                                                      )
                                                                    (call $src::parser::parser::Rule0.apply_1)
                                                                    (br $B54)
                                                                  )
                                                              )
                                                            (br $B60)
                                                          )
                                                        (block $B49 (result i64)
                                                            (local.set $src::parser::parser::rule_7 (call $src::parser::grammar::LookAhead.rule_1 (local.get $var$41)))
                                                            (if $IF50 (global.get $src::parser::parser::TEST)
                                                                (then
                                                                  (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004dcb) (local.get $level)) (i64.const 0x0000000400004dd4)))
                                                                )
                                                                (else)
                                                              )
                                                            (local.set $src::parser::parser::ret_3 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rule_7) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                                            (call $src::lexer::lexer::Lexer.seek_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)) (local.get $src::parser::parser::backtrack))
                                                            (block $B51 (result i64)
                                                                (local.set $var$42 (local.get $src::parser::parser::ret_3))
                                                                (block $B51_0
                                                                    (block $B51_1
                                                                        (br_if $B51_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                                      )
                                                                    (call $src::parser::parser::Rule0.apply_1)
                                                                    (br $B51)
                                                                  )
                                                                (call $src::helpers::Nil.apply_1)
                                                                (br $B51)
                                                              )
                                                          )
                                                        (br $B60)
                                                      )
                                                    (block $B43 (result i64)
                                                        (local.set $src::parser::parser::rule_6 (call $src::parser::grammar::ZeroOrMore.rule_1 (local.get $var$41)))
                                                        (if $IF44 (global.get $src::parser::parser::TEST)
                                                            (then
                                                              (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004da5) (local.get $level)) (i64.const 0x0000000400004dae)))
                                                            )
                                                            (else)
                                                          )
                                                        (local.set $src::parser::parser::ret_2 (call $src::parser::parser::Rule0.apply_1))
                                                        (block $Break45
                                                            (loop $Loop45
                                                                (block $B46
                                                                    (block $B48
                                                                        (local.set $var$42 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rule_6) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                                                        (block $B48_0
                                                                            (block $B48_1
                                                                                (br_if $B48_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                                                (br_if $B48_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                                                              )
                                                                            (block $B47
                                                                                (local.set $src::parser::parser::ret_2 (call $src::parser::parser::list_1 (local.get $src::parser::parser::ret_2) (local.get $var$42)))
                                                                                (br $Loop45)
                                                                              )
                                                                            (br $B48)
                                                                          )
                                                                        (br $Break45)
                                                                        (br $B48)
                                                                      )
                                                                  )
                                                              )
                                                          )
                                                        (local.get $src::parser::parser::ret_2)
                                                      )
                                                    (br $B60)
                                                  )
                                                (block $B36 (result i64)
                                                    (local.set $src::parser::parser::rule_5 (call $src::parser::grammar::OneOrMore.rule_1 (local.get $var$41)))
                                                    (if $IF37 (global.get $src::parser::parser::TEST)
                                                        (then
                                                          (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004d81) (local.get $level)) (i64.const 0x0000000400004d8a)))
                                                        )
                                                        (else)
                                                      )
                                                    (local.set $src::parser::parser::ret_1 (call $src::helpers::Nil.apply_1))
                                                    (block $Break38
                                                        (loop $Loop38
                                                            (block $B39
                                                                (block $B42
                                                                    (local.set $var$42 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rule_5) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                                                    (block $B42_0
                                                                        (block $B42_1
                                                                            (br_if $B42_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                                            (br_if $B42_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                                                          )
                                                                        (block $B40
                                                                            (block $B41
                                                                                (local.set $var$43 (local.get $src::parser::parser::ret_1))
                                                                                (block $B41_0
                                                                                    (block $B41_1
                                                                                        (br_if $B41_0 (call $src::helpers::Nil.is_1 (local.get $var$43)))
                                                                                        (br_if $B41_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$43)))
                                                                                      )
                                                                                    (local.set $src::parser::parser::ret_1 (call $src::parser::parser::list_1 (local.get $var$43) (local.get $var$42)))
                                                                                    (br $B41)
                                                                                  )
                                                                                (local.set $src::parser::parser::ret_1 (local.get $var$42))
                                                                                (br $B41)
                                                                              )
                                                                            (br $Loop38)
                                                                          )
                                                                        (br $B42)
                                                                      )
                                                                    (br $Break38)
                                                                    (br $B42)
                                                                  )
                                                              )
                                                          )
                                                      )
                                                    (local.get $src::parser::parser::ret_1)
                                                  )
                                                (br $B60)
                                              )
                                            (block $B34 (result i64)
                                                (local.set $src::parser::parser::name_4 (call $src::parser::grammar::NonTerminal.name_1 (local.get $var$41)))
                                                (if $IF35 (global.get $src::parser::parser::TEST)
                                                    (then
                                                      (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004d50) (local.get $level)) (i64.const 0x0000000400004d59)) (local.get $src::parser::parser::name_4)) (i64.const 0x0000000400004d7a)))
                                                    )
                                                    (else)
                                                  )
                                                (call $src::parser::parser::parse_2 (local.get $src::parser::parser::name_4) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1)))
                                              )
                                            (br $B60)
                                          )
                                        (block $B31 (result i64)
                                            (local.set $src::parser::parser::rule_4 (call $src::parser::grammar::Optional.rule_1 (local.get $var$41)))
                                            (if $IF32 (global.get $src::parser::parser::TEST)
                                                (then
                                                  (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004d2e) (local.get $level)) (i64.const 0x0000000400004d37)))
                                                )
                                                (else)
                                              )
                                            (block $B33 (result i64)
                                                (local.set $var$42 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rule_4) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                                (block $B33_0
                                                    (block $B33_1
                                                        (br_if $B33_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                        (br_if $B33_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                                      )
                                                    (local.get $var$42)
                                                    (br $B33)
                                                  )
                                                (call $src::parser::parser::Rule0.apply_1)
                                                (br $B33)
                                              )
                                          )
                                        (br $B60)
                                      )
                                    (block $B28 (result i64)
                                        (local.set $src::parser::parser::rule_3 (call $src::parser::grammar::Discard.rule_1 (local.get $var$41)))
                                        (if $IF29 (global.get $src::parser::parser::TEST)
                                            (then
                                              (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004d0e) (local.get $level)) (i64.const 0x0000000400004d17)))
                                            )
                                            (else)
                                          )
                                        (block $B30 (result i64)
                                            (local.set $var$42 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rule_3) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                            (block $B30_0
                                                (block $B30_1
                                                    (br_if $B30_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                    (br_if $B30_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                                  )
                                                (call $src::parser::parser::Rule0.apply_1)
                                                (br $B30)
                                              )
                                            (call $src::helpers::Nil.apply_1)
                                            (br $B30)
                                          )
                                      )
                                    (br $B60)
                                  )
                                (block $B19 (result i64)
                                    (local.set $src::parser::parser::head_6 (call $src::parser::grammar::Cut.head_1 (local.get $var$41)))
                                    (local.set $src::parser::parser::tail_6 (call $src::parser::grammar::Cut.tail_1 (local.get $var$41)))
                                    (if $IF20 (global.get $src::parser::parser::TEST)
                                        (then
                                          (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004cf6) (local.get $level)) (i64.const 0x0000000400004cff)))
                                        )
                                        (else)
                                      )
                                    (block $B27 (result i64)
                                        (local.set $var$42 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::head_6) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                        (block $B27_0
                                            (block $B27_1
                                                (br_if $B27_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                                (br_if $B27_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                              )
                                            (block $B21 (result i64)
                                                (local.set $src::parser::parser::lexer_3 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)))
                                                (local.set $src::parser::parser::ret (local.get $var$42))
                                                (block $Break22
                                                    (loop $Loop22
                                                        (block $B23
                                                            (block $B26
                                                                (local.set $var$43 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::tail_6) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                                                (block $B26_0
                                                                    (block $B26_1
                                                                        (br_if $B26_0 (call $src::helpers::Nil.is_1 (local.get $var$43)))
                                                                        (br_if $B26_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$43)))
                                                                      )
                                                                    (local.set $src::parser::parser::ret (call $src::parser::parser::list_1 (local.get $src::parser::parser::ret) (local.get $var$43)))
                                                                    (br $B26)
                                                                  )
                                                                (block $B24
                                                                    (local.set $src::parser::parser::ret (call $src::parser::parser::list_1 (local.get $src::parser::parser::ret) (call $src::parser::parser::eatUnexpectedToken_1 (local.get $src::parser::parser::lexer_3))))
                                                                    (if $IF25 (call $src::lexer::lexer::Lexer.hasNext_1 (local.get $src::parser::parser::lexer_3))
                                                                        (then
                                                                          (br $Loop22)
                                                                        )
                                                                        (else)
                                                                      )
                                                                  )
                                                                (br $B26)
                                                              )
                                                          )
                                                      )
                                                  )
                                                (local.get $src::parser::parser::ret)
                                              )
                                            (br $B27)
                                          )
                                        (call $src::helpers::Nil.apply_1)
                                        (br $B27)
                                      )
                                  )
                                (br $B60)
                              )
                            (block $B15 (result i64)
                                (local.set $src::parser::parser::head_5 (call $src::parser::grammar::Cons.head_1 (local.get $var$41)))
                                (local.set $src::parser::parser::tail_5 (call $src::parser::grammar::Cons.tail_1 (local.get $var$41)))
                                (if $IF16 (global.get $src::parser::parser::TEST)
                                    (then
                                      (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004cdc) (local.get $level)) (i64.const 0x0000000400004ce5)))
                                    )
                                    (else)
                                  )
                                (block $B18 (result i64)
                                    (local.set $var$42 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::head_5) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                    (block $B18_0
                                        (block $B18_1
                                            (br_if $B18_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                            (br_if $B18_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                          )
                                        (block $B17 (result i64)
                                            (local.set $var$43 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::tail_5) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                            (block $B17_0
                                                (block $B17_1
                                                    (br_if $B17_0 (call $src::helpers::Nil.is_1 (local.get $var$43)))
                                                    (br_if $B17_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$43)))
                                                  )
                                                (call $src::parser::parser::list_1 (local.get $var$42) (local.get $var$43))
                                                (br $B17)
                                              )
                                            (call $src::helpers::Nil.apply_1)
                                            (br $B17)
                                          )
                                        (br $B18)
                                      )
                                    (call $src::helpers::Nil.apply_1)
                                    (br $B18)
                                  )
                              )
                            (br $B60)
                          )
                        (block $B12 (result i64)
                            (local.set $src::parser::parser::lhs_32 (call $src::parser::grammar::Or.lhs_1 (local.get $var$41)))
                            (local.set $src::parser::parser::rhs_11 (call $src::parser::grammar::Or.rhs_1 (local.get $var$41)))
                            (if $IF13 (global.get $src::parser::parser::TEST)
                                (then
                                  (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004cc6) (local.get $level)) (i64.const 0x0000000400004ccf)))
                                )
                                (else)
                              )
                            (block $B14 (result i64)
                                (local.set $var$42 (call $src::parser::parser::parse_3 (local.get $src::parser::parser::lhs_32) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1))))
                                (block $B14_0
                                    (block $B14_1
                                        (br_if $B14_0 (call $src::helpers::Nil.is_1 (local.get $var$42)))
                                        (br_if $B14_1 (call $src::parser::parser::AstNode.is_1 (local.get $var$42)))
                                      )
                                    (local.get $var$42)
                                    (br $B14)
                                  )
                                (call $src::parser::parser::parse_3 (local.get $src::parser::parser::rhs_11) (local.get $parser) (call $system::core::i32::i32.+_1 (local.get $level) (i32.const 1)))
                                (br $B14)
                              )
                          )
                        (br $B60)
                      )
                    (block $B7 (result i64)
                        (local.set $src::parser::parser::tokenType_1 (call $src::parser::grammar::StrictTerminal.tokenType_1 (local.get $var$41)))
                        (local.set $src::parser::parser::value_33 (call $src::parser::grammar::StrictTerminal.value_1 (local.get $var$41)))
                        (if $IF8 (global.get $src::parser::parser::TEST)
                            (then
                              (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004c6f) (local.get $level)) (i64.const 0x0000000400004c78)) (call $src::lexer::tokens::TokenType.toString_1 (local.get $src::parser::parser::tokenType_1))) (i64.const 0x0000000400004c9f)))
                            )
                            (else)
                          )
                        (if $IF9 (global.get $src::parser::parser::TEST)
                            (then
                              (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004ca6) (local.get $level)) (i64.const 0x0000000400004caf)) (call $system::core::string::string.substring_2 (call $src::lexer::lexer::Lexer.source_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))) (call $system::core::u32::u32.as_5 (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)))))))
                            )
                            (else)
                          )
                        (local.set $src::parser::parser::lexer_2 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)))
                        (local.set $src::parser::parser::token_8 (call $src::lexer::lexer::Lexer.peek_1 (local.get $src::parser::parser::lexer_2)))
                        (local.set $src::parser::parser::tokenValue (call $src::lexer::tokens::Token.textIn_1 (local.get $src::parser::parser::token_8) (call $src::lexer::lexer::Lexer.source_1 (local.get $src::parser::parser::lexer_2))))
                        (if $IF10 (result i64) (call $system::core::boolean::boolean.&&_1 (call $src::lexer::tokens::TokenType.==_1 (call $src::lexer::tokens::Token.tokenType_1 (local.get $src::parser::parser::token_8)) (local.get $src::parser::parser::tokenType_1)) (call $system::core::string::string.==_1 (local.get $src::parser::parser::value_33) (local.get $src::parser::parser::tokenValue)))
                            (then
                              (block $B11 (result i64)
                                  (drop (call $src::lexer::lexer::Lexer.eat_1 (local.get $src::parser::parser::lexer_2)))
                                  (call $src::parser::parser::Leaf.apply_1 (local.get $src::parser::parser::token_8) (local.get $src::parser::parser::tokenValue))
                                )
                            )
                            (else
                              (call $src::helpers::Nil.apply_1)
                            )
                          )
                      )
                    (br $B60)
                  )
                (block $B2 (result i64)
                    (local.set $src::parser::parser::tokenType (call $src::parser::grammar::Terminal.tokenType_1 (local.get $var$41)))
                    (if $IF3 (global.get $src::parser::parser::TEST)
                        (then
                          (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004c24) (local.get $level)) (i64.const 0x0000000400004c2d)) (call $src::lexer::tokens::TokenType.toString_1 (local.get $src::parser::parser::tokenType))) (i64.const 0x0000000400004c48)))
                        )
                        (else)
                      )
                    (if $IF4 (global.get $src::parser::parser::TEST)
                        (then
                          (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004c4f) (local.get $level)) (i64.const 0x0000000400004c58)) (call $system::core::string::string.substring_2 (call $src::lexer::lexer::Lexer.source_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))) (call $system::core::u32::u32.as_5 (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)))))))
                        )
                        (else)
                      )
                    (local.set $src::parser::parser::lexer_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)))
                    (local.set $src::parser::parser::token_7 (call $src::lexer::lexer::Lexer.peek_1 (local.get $src::parser::parser::lexer_1)))
                    (if $IF5 (result i64) (call $src::lexer::tokens::TokenType.==_1 (call $src::lexer::tokens::Token.tokenType_1 (local.get $src::parser::parser::token_7)) (local.get $src::parser::parser::tokenType))
                        (then
                          (block $B6 (result i64)
                              (drop (call $src::lexer::lexer::Lexer.eat_1 (local.get $src::parser::parser::lexer_1)))
                              (call $src::parser::parser::Leaf.apply_1 (local.get $src::parser::parser::token_7) (call $src::lexer::tokens::Token.textIn_1 (local.get $src::parser::parser::token_7) (call $src::lexer::lexer::Lexer.source_1 (local.get $src::parser::parser::lexer_1))))
                            )
                        )
                        (else
                          (call $src::helpers::Nil.apply_1)
                        )
                      )
                  )
                (br $B60)
              ))
      (if $IF61 (call $src::helpers::Nil.is_1 (local.get $src::parser::parser::result))
          (then
            (block $B62
                (if $IF63 (call $system::core::u32::u32.!=_1 (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))) (local.get $src::parser::parser::backtrack))
                    (then
                      (block $B64
                          (if $IF65 (global.get $src::parser::parser::TEST)
                              (then
                                (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004e23) (local.get $level)) (i64.const 0x0000000400004e2c)) (call $system::core::string::string.substring_2 (call $src::lexer::lexer::Lexer.source_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))) (call $system::core::u32::u32.as_5 (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)))))))
                              )
                              (else)
                            )
                          (call $src::lexer::lexer::Lexer.seek_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)) (local.get $src::parser::parser::backtrack))
                          (if $IF66 (global.get $src::parser::parser::TEST)
                              (then
                                (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004e5d) (local.get $level)) (i64.const 0x0000000400004e66)) (call $system::core::string::string.substring_2 (call $src::lexer::lexer::Lexer.source_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))) (call $system::core::u32::u32.as_5 (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)))))))
                              )
                              (else)
                            )
                        )
                    )
                    (else)
                  )
              )
          )
          (else
            (block $B67
                (if $IF68 (global.get $src::parser::parser::TEST)
                    (then
                      (call $support::env::printf_15 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::helpers::repeat_1 (i64.const 0x0000000400004e93) (local.get $level)) (i64.const 0x0000000400004e9c)) (call $system::core::string::string.substring_2 (call $src::lexer::lexer::Lexer.source_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser))) (call $system::core::u32::u32.as_5 (call $src::lexer::lexer::Lexer.pos_1 (call $src::parser::parser::Parser.lexer_1 (local.get $parser)))))))
                    )
                    (else)
                  )
              )
          )
        )
      (local.get $src::parser::parser::result)
    )
  )
  (func $src::parser::parser::eatUnexpectedToken_1 (param $lexer i64) (result i64)
    (local $src::parser::parser::token_9 i64)
    (local $src::parser::parser::tokenValue_1 i64)
    (block $B1 (result i64)
      (local.set $src::parser::parser::token_9 (call $src::lexer::lexer::Lexer.eat_1 (local.get $lexer)))
      (local.set $src::parser::parser::tokenValue_1 (call $src::lexer::tokens::Token.textIn_1 (local.get $src::parser::parser::token_9) (call $src::lexer::lexer::Lexer.source_1 (local.get $lexer))))
      (call $src::parser::parser::UnexpectedToken.apply_1 (local.get $src::parser::parser::token_9) (local.get $src::parser::parser::tokenValue_1))
    )
  )
  (data 0 (i32.const 863) "\04\00\00\00W\00S\00\00")
  (data 0 (i32.const 872) "\04\00\00\00W\00S\00\00")
  (data 0 (i32.const 881) "\04\00\00\00W\00S\00\00")
  (data 0 (i32.const 890) "\04\00\00\00W\00S\00\00")
  (data 0 (i32.const 899) "\04\00\00\00W\00S\00\00")
  (data 0 (i32.const 908) "\04\00\00\00W\00S\00\00")
  (data 0 (i32.const 917) "\10\00\00\00D\00o\00c\00u\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 938) "\10\00\00\00D\00o\00c\00u\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 959) "\12\00\00\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 982) "\04\00\00\00W\00S\00\00")
  (data 0 (i32.const 991) "\12\00\00\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1014) "\22\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1053) "\18\00\00\00V\00a\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1082) "\18\00\00\00V\00a\00r\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1111) "\1e\00\00\00S\00t\00r\00u\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1146) "\1a\00\00\00T\00y\00p\00e\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1177) "\1a\00\00\00E\00n\00u\00m\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1208) "\1c\00\00\00T\00r\00a\00i\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1241) "\1e\00\00\00I\00m\00p\00o\00r\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1276) "\1e\00\00\00E\00f\00f\00e\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1311) "\1a\00\00\00I\00m\00p\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1342) "$\00\00\00I\00m\00p\00l\00I\00n\00n\00e\00r\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1383) "\22\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1422) "\18\00\00\00V\00a\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1451) "\18\00\00\00V\00a\00r\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1480) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 1515) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 1550) "\1e\00\00\00P\00R\00I\00V\00A\00T\00E\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 1585) "\14\00\00\00N\00o\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 1610) "\1c\00\00\00P\00U\00B\00L\00I\00C\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 1643) "\1e\00\00\00I\00m\00p\00o\00r\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1678) "\1e\00\00\00I\00m\00p\00o\00r\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1713) "\1c\00\00\00I\00M\00P\00O\00R\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 1746) "\0a\00\00\00Q\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 1761) "\12\00\00\00A\00s\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 1784) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 1817) "<\00\00\00A\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00 \00a\00f\00t\00e\00r\00 \00'\00a\00s\00'\00\00")
  (data 0 (i32.const 1882) ",\00\00\00I\00m\00p\00o\00r\00t\00 \00b\00o\00d\00y\00 \00i\00s\00 \00m\00i\00s\00s\00i\00n\00g\00\00")
  (data 0 (i32.const 1931) "\22\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 1970) "\22\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2009) "\14\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00s\00\00")
  (data 0 (i32.const 2034) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 2069) "\1c\00\00\00F\00u\00n\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 2102) "\18\00\00\00V\00a\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2131) "\18\00\00\00V\00a\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2160) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 2195) "\1c\00\00\00V\00a\00l\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 2228) "\18\00\00\00V\00a\00r\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2257) "\18\00\00\00V\00a\00r\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2286) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 2321) "\1c\00\00\00V\00a\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 2354) "\1a\00\00\00T\00y\00p\00e\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2385) "\1a\00\00\00T\00y\00p\00e\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2416) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 2451) "\18\00\00\00T\00Y\00P\00E\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 2480) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 2513) "0\00\00\00A\00 \00t\00y\00p\00e\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 2566) "\12\00\00\00V\00a\00l\00u\00e\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 2589) "\1a\00\00\00E\00n\00u\00m\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2620) "\1a\00\00\00E\00n\00u\00m\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2651) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 2686) "\18\00\00\00E\00N\00U\00M\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 2715) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 2748) "2\00\00\00A\00n\00 \00e\00n\00u\00m\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 2803) " \00\00\00T\00y\00p\00e\00D\00e\00c\00l\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 2840) "\1c\00\00\00T\00r\00a\00i\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2873) "\1c\00\00\00T\00r\00a\00i\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 2906) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 2941) "\1a\00\00\00T\00R\00A\00I\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 2972) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 3005) "2\00\00\00A\00 \00t\00r\00a\00i\00t\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 3060) "\22\00\00\00T\00r\00a\00i\00t\00D\00e\00c\00l\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 3099) "\1e\00\00\00E\00f\00f\00e\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 3134) "\1e\00\00\00E\00f\00f\00e\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 3169) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 3204) "\1c\00\00\00E\00F\00F\00E\00C\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 3237) "\22\00\00\00E\00f\00f\00e\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 3276) "6\00\00\00A\00n\00 \00e\00f\00f\00e\00c\00t\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 3335) "\1e\00\00\00S\00t\00r\00u\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 3370) "\1e\00\00\00S\00t\00r\00u\00c\00t\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 3405) "\1e\00\00\00P\00r\00i\00v\00a\00t\00e\00M\00o\00d\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 3440) "\1c\00\00\00S\00T\00R\00U\00C\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 3473) "\22\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 3512) "D\00\00\00A\00n\00 \00s\00t\00r\00u\00c\00t\00 \00d\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 3585) "\1a\00\00\00I\00m\00p\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 3616) "\1a\00\00\00I\00m\00p\00l\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 3647) "\18\00\00\00I\00M\00P\00L\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 3676) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 3699) "F\00\00\00A\00n\00 \00i\00m\00p\00l\00e\00m\00e\00n\00t\00a\00t\00i\00o\00n\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 3774) "\16\00\00\00F\00O\00R\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 3801) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 3824) ">\00\00\00A\00 \00t\00a\00r\00g\00e\00t\00 \00t\00y\00p\00e\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 3891) "(\00\00\00N\00a\00m\00e\00s\00p\00a\00c\00e\00E\00l\00e\00m\00e\00n\00t\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 3936) "\14\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00s\00\00")
  (data 0 (i32.const 3961) "\14\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00s\00\00")
  (data 0 (i32.const 3986) "\12\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 4009) "\12\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 4032) "\12\00\00\00D\00e\00c\00o\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 4055) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 4088) "\0e\00\00\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 4107) "\1c\00\00\00L\00o\00o\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 4140) "\1c\00\00\00L\00o\00o\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 4173) "\08\00\00\00l\00o\00o\00p\00\00")
  (data 0 (i32.const 4186) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 4211) "4\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 4268) "\22\00\00\00C\00o\00n\00t\00i\00n\00u\00e\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 4307) "\22\00\00\00C\00o\00n\00t\00i\00n\00u\00e\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 4346) "\10\00\00\00c\00o\00n\00t\00i\00n\00u\00e\00\00")
  (data 0 (i32.const 4367) "\1c\00\00\00B\00r\00e\00a\00k\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 4400) "\1c\00\00\00B\00r\00e\00a\00k\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 4433) "\0a\00\00\00b\00r\00e\00a\00k\00\00")
  (data 0 (i32.const 4448) "\1c\00\00\00V\00a\00l\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 4481) "\1c\00\00\00V\00a\00l\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 4514) "\16\00\00\00V\00A\00L\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 4541) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 4574) "&\00\00\00A\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 4617) "\0c\00\00\00O\00f\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 4634) "\0c\00\00\00A\00s\00s\00i\00g\00n\00\00")
  (data 0 (i32.const 4651) "\1c\00\00\00V\00a\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 4684) "\1c\00\00\00V\00a\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 4717) "\16\00\00\00V\00A\00R\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 4744) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 4777) "&\00\00\00A\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 4820) "\0c\00\00\00O\00f\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 4837) "\0c\00\00\00A\00s\00s\00i\00g\00n\00\00")
  (data 0 (i32.const 4854) "\1c\00\00\00F\00u\00n\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 4887) "\1c\00\00\00F\00u\00n\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 4920) "\16\00\00\00F\00U\00N\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 4947) "\18\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 4976) "8\00\00\00A\00 \00f\00u\00n\00c\00t\00i\00o\00n\00 \00n\00a\00m\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 5037) "\1c\00\00\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 5070) "\1c\00\00\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 5103) "$\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00P\00a\00r\00a\00m\00s\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 5144) "\14\00\00\00R\00e\00t\00u\00r\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 5169) "\0c\00\00\00O\00f\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 5186) "\18\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00B\00o\00d\00y\00\00")
  (data 0 (i32.const 5215) "&\00\00\00F\00u\00n\00A\00s\00s\00i\00g\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 5258) "\1e\00\00\00M\00a\00t\00c\00h\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 5293) "\1e\00\00\00M\00a\00t\00c\00h\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 5328) "\1a\00\00\00M\00A\00T\00C\00H\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 5359) " \00\00\00A\00s\00s\00i\00g\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 5396) "F\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00t\00o\00 \00m\00a\00t\00c\00h\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 5471) "\12\00\00\00M\00a\00t\00c\00h\00B\00o\00d\00y\00\00")
  (data 0 (i32.const 5494) "2\00\00\00A\00 \00m\00a\00t\00c\00h\00 \00b\00o\00d\00y\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 5549) "\1a\00\00\00C\00a\00s\00e\00C\00o\00n\00d\00i\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 5580) "\1a\00\00\00C\00a\00s\00e\00C\00o\00n\00d\00i\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 5611) "\08\00\00\00c\00a\00s\00e\00\00")
  (data 0 (i32.const 5624) "\18\00\00\00D\00e\00c\00l\00a\00r\00e\00d\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 5653) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 5686) "\04\00\00\00i\00f\00\00")
  (data 0 (i32.const 5695) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 5720) "0\00\00\00A\00 \00c\00o\00n\00d\00i\00t\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 5773) "\04\00\00\00-\00>\00\00")
  (data 0 (i32.const 5782) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 5807) "4\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 5864) "\16\00\00\00C\00a\00s\00e\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 5891) "\16\00\00\00C\00a\00s\00e\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 5918) "\08\00\00\00c\00a\00s\00e\00\00")
  (data 0 (i32.const 5931) "\0e\00\00\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 5950) "\0e\00\00\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 5969) ",\00\00\00A\00 \00l\00i\00t\00e\00r\00a\00l\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 6018) "\04\00\00\00-\00>\00\00")
  (data 0 (i32.const 6027) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6052) "4\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 6109) "\0c\00\00\00C\00a\00s\00e\00I\00s\00\00")
  (data 0 (i32.const 6126) "\0c\00\00\00C\00a\00s\00e\00I\00s\00\00")
  (data 0 (i32.const 6143) "\08\00\00\00c\00a\00s\00e\00\00")
  (data 0 (i32.const 6156) "\18\00\00\00D\00e\00c\00l\00a\00r\00e\00d\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 6185) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 6218) "\1c\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00d\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 6251) "\04\00\00\00i\00s\00\00")
  (data 0 (i32.const 6260) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 6283) ":\00\00\00A\00 \00t\00y\00p\00e\00 \00r\00e\00f\00e\00r\00e\00n\00c\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 6346) "\16\00\00\00D\00e\00s\00t\00r\00u\00c\00t\00u\00r\00e\00\00")
  (data 0 (i32.const 6373) "\22\00\00\00D\00e\00s\00t\00r\00u\00c\00t\00u\00r\00e\00S\00t\00r\00u\00c\00t\00\00")
  (data 0 (i32.const 6412) "\04\00\00\00-\00>\00\00")
  (data 0 (i32.const 6421) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6446) "4\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 6503) "\10\00\00\00C\00a\00s\00e\00E\00l\00s\00e\00\00")
  (data 0 (i32.const 6524) "\10\00\00\00C\00a\00s\00e\00E\00l\00s\00e\00\00")
  (data 0 (i32.const 6545) "\08\00\00\00e\00l\00s\00e\00\00")
  (data 0 (i32.const 6558) "\18\00\00\00D\00e\00c\00l\00a\00r\00e\00d\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 6587) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 6620) "\04\00\00\00-\00>\00\00")
  (data 0 (i32.const 6629) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6654) "4\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 6711) "\18\00\00\00I\00f\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6740) "\18\00\00\00I\00f\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6769) "\04\00\00\00i\00f\00\00")
  (data 0 (i32.const 6778) "\12\00\00\00C\00o\00n\00d\00i\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 6801) "0\00\00\00A\00 \00c\00o\00n\00d\00i\00t\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 6854) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6879) "\1c\00\00\00E\00l\00s\00e\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6912) "\1c\00\00\00E\00l\00s\00e\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6945) "\08\00\00\00e\00l\00s\00e\00\00")
  (data 0 (i32.const 6958) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 6983) "4\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 7040) "\1c\00\00\00W\00a\00s\00m\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 7073) "\1c\00\00\00W\00a\00s\00m\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 7106) "\02\00\00\00%\00\00")
  (data 0 (i32.const 7113) "\08\00\00\00w\00a\00s\00m\00\00")
  (data 0 (i32.const 7126) "\0a\00\00\00S\00A\00t\00o\00m\00\00")
  (data 0 (i32.const 7141) "X\00\00\00A\00 \00b\00l\00o\00c\00k\00 \00o\00f\00 \00s\00y\00m\00b\00o\00l\00i\00c\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00s\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 7234) "\1a\00\00\00S\00t\00r\00u\00c\00t\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 7265) "\1a\00\00\00S\00t\00r\00u\00c\00t\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 7296) "\02\00\00\00%\00\00")
  (data 0 (i32.const 7303) "\0c\00\00\00s\00t\00r\00u\00c\00t\00\00")
  (data 0 (i32.const 7320) " \00\00\00S\00t\00r\00u\00c\00t\00P\00a\00r\00a\00m\00s\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 7357) "F\00\00\00A\00 \00%\00s\00t\00r\00u\00c\00t\00 \00l\00i\00t\00e\00r\00a\00l\00 \00b\00o\00d\00y\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 7432) "\1e\00\00\00I\00n\00j\00e\00c\00t\00e\00d\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 7467) "\1e\00\00\00I\00n\00j\00e\00c\00t\00e\00d\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 7502) "\02\00\00\00%\00\00")
  (data 0 (i32.const 7509) "\10\00\00\00i\00n\00j\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 7530) "\18\00\00\00S\00t\00a\00c\00k\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 7559) "\18\00\00\00S\00t\00a\00c\00k\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 7588) "\02\00\00\00%\00\00")
  (data 0 (i32.const 7595) "\0a\00\00\00s\00t\00a\00c\00k\00\00")
  (data 0 (i32.const 7610) "\1e\00\00\00N\00a\00m\00e\00L\00i\00t\00e\00r\00a\00l\00P\00a\00i\00r\00\00")
  (data 0 (i32.const 7645) "B\00\00\00A\00 \00s\00t\00a\00c\00k\00 \00l\00i\00t\00e\00r\00a\00l\00 \00b\00o\00d\00y\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 7716) "\12\00\00\00C\00o\00n\00d\00i\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 7739) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 7764) "\1a\00\00\00M\00a\00t\00c\00h\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 7795) "\1a\00\00\00C\00a\00s\00e\00C\00o\00n\00d\00i\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 7826) "\0c\00\00\00C\00a\00s\00e\00I\00s\00\00")
  (data 0 (i32.const 7843) "\16\00\00\00C\00a\00s\00e\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 7870) "\10\00\00\00C\00a\00s\00e\00E\00l\00s\00e\00\00")
  (data 0 (i32.const 7891) "\22\00\00\00U\00n\00k\00n\00o\00w\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 7930) "\22\00\00\00U\00n\00k\00n\00o\00w\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 7969) "\06\00\00\00?\00?\00?\00\00")
  (data 0 (i32.const 7980) "\12\00\00\00V\00a\00l\00u\00e\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 8003) "\02\00\00\00=\00\00")
  (data 0 (i32.const 8010) "\02\00\00\00%\00\00")
  (data 0 (i32.const 8017) "\1e\00\00\00I\00n\00j\00e\00c\00t\00e\00d\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 8052) "\1a\00\00\00S\00t\00r\00u\00c\00t\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 8083) "\18\00\00\00S\00t\00a\00c\00k\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 8112) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 8125) "2\00\00\00A\00 \00t\00y\00p\00e\00 \00v\00a\00l\00u\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 8180) " \00\00\00T\00y\00p\00e\00V\00a\00r\00i\00a\00b\00l\00e\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 8217) " \00\00\00T\00y\00p\00e\00V\00a\00r\00i\00a\00b\00l\00e\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 8254) "\18\00\00\00T\00y\00p\00e\00V\00a\00r\00i\00a\00b\00l\00e\00\00")
  (data 0 (i32.const 8283) "\18\00\00\00T\00y\00p\00e\00V\00a\00r\00i\00a\00b\00l\00e\00\00")
  (data 0 (i32.const 8312) "\18\00\00\00T\00y\00p\00e\00V\00a\00r\00i\00a\00b\00l\00e\00\00")
  (data 0 (i32.const 8341) "\18\00\00\00T\00y\00p\00e\00V\00a\00r\00i\00a\00b\00l\00e\00\00")
  (data 0 (i32.const 8370) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 8403) "\1c\00\00\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 8436) "\02\00\00\00<\00\00")
  (data 0 (i32.const 8443) " \00\00\00T\00y\00p\00e\00V\00a\00r\00i\00a\00b\00l\00e\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 8480) "\02\00\00\00>\00\00")
  (data 0 (i32.const 8487) "\0c\00\00\00A\00s\00s\00i\00g\00n\00\00")
  (data 0 (i32.const 8504) "\02\00\00\00=\00\00")
  (data 0 (i32.const 8511) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 8536) "\22\00\00\00U\00n\00k\00n\00o\00w\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 8575) "*\00\00\00A\00 \00v\00a\00l\00u\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00.\00\00")
  (data 0 (i32.const 8622) "&\00\00\00F\00u\00n\00A\00s\00s\00i\00g\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 8665) "\02\00\00\00=\00\00")
  (data 0 (i32.const 8672) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 8697) "\1c\00\00\00W\00a\00s\00m\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 8730) "\22\00\00\00U\00n\00k\00n\00o\00w\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 8769) "4\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 8826) "\0c\00\00\00O\00f\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 8843) "\02\00\00\00:\00\00")
  (data 0 (i32.const 8850) "\1c\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00E\00f\00f\00e\00c\00t\00\00")
  (data 0 (i32.const 8883) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 8896) ":\00\00\00A\00 \00t\00y\00p\00e\00 \00o\00r\00 \00e\00f\00f\00e\00c\00t\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 8959) " \00\00\00S\00t\00r\00u\00c\00t\00P\00a\00r\00a\00m\00s\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 8996) "\1a\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 9027) "$\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00P\00a\00r\00a\00m\00s\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 9068) "$\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00P\00a\00r\00a\00m\00s\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 9109) "\1a\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 9140) "\1a\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 9171) "\0c\00\00\00(\00L\00i\00s\00t\00)\00\00")
  (data 0 (i32.const 9188) "\12\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00\00")
  (data 0 (i32.const 9211) "\12\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00\00")
  (data 0 (i32.const 9234) "\12\00\00\00P\00a\00r\00a\00m\00e\00t\00e\00r\00\00")
  (data 0 (i32.const 9257) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 9290) "\0c\00\00\00O\00f\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 9307) "\22\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 9346) "\22\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 9385) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 9418) "$\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00P\00a\00r\00a\00m\00s\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 9459) ".\00\00\00E\00f\00f\00e\00c\00t\00M\00e\00m\00b\00e\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 9510) ".\00\00\00E\00f\00f\00e\00c\00t\00M\00e\00m\00b\00e\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 9561) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 9594) "$\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00P\00a\00r\00a\00m\00s\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 9635) "\0c\00\00\00O\00f\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 9652) "\22\00\00\00T\00r\00a\00i\00t\00D\00e\00c\00l\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 9691) "\22\00\00\00T\00r\00a\00i\00t\00D\00e\00c\00l\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 9730) "\22\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 9769) " \00\00\00T\00y\00p\00e\00D\00e\00c\00l\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 9806) "\22\00\00\00S\00t\00r\00u\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 9845) "\1c\00\00\00E\00f\00f\00e\00c\00t\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 9878) "\1c\00\00\00E\00f\00f\00e\00c\00t\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 9911) ".\00\00\00E\00f\00f\00e\00c\00t\00M\00e\00m\00b\00e\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 9962) "\18\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 9991) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 10024) "\16\00\00\00F\00u\00n\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 10051) "\16\00\00\00F\00u\00n\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 10078) "\16\00\00\00F\00u\00n\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 10105) "\02\00\00\00:\00\00")
  (data 0 (i32.const 10112) "\04\00\00\00i\00s\00\00")
  (data 0 (i32.const 10121) "\04\00\00\00a\00s\00\00")
  (data 0 (i32.const 10130) "(\00\00\00N\00a\00m\00e\00s\00p\00a\00c\00e\00E\00l\00e\00m\00e\00n\00t\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 10175) "\0c\00\00\00(\00L\00i\00s\00t\00)\00\00")
  (data 0 (i32.const 10192) "$\00\00\00I\00m\00p\00l\00I\00n\00n\00e\00r\00D\00i\00r\00e\00c\00t\00i\00v\00e\00\00")
  (data 0 (i32.const 10233) "\22\00\00\00E\00f\00f\00e\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 10272) "\22\00\00\00E\00f\00f\00e\00c\00t\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 10311) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 10344) "\1c\00\00\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 10377) "\1c\00\00\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 10410) "\22\00\00\00E\00f\00f\00e\00c\00t\00E\00l\00e\00m\00e\00n\00t\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 10449) "\22\00\00\00E\00f\00f\00e\00c\00t\00E\00l\00e\00m\00e\00n\00t\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 10488) "\22\00\00\00E\00f\00f\00e\00c\00t\00E\00l\00e\00m\00e\00n\00t\00L\00i\00s\00t\00\00")
  (data 0 (i32.const 10527) "\1c\00\00\00E\00f\00f\00e\00c\00t\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 10560) "\1c\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00E\00f\00f\00e\00c\00t\00\00")
  (data 0 (i32.const 10593) "\1c\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00E\00f\00f\00e\00c\00t\00\00")
  (data 0 (i32.const 10626) "\02\00\00\00<\00\00")
  (data 0 (i32.const 10633) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10646) "\02\00\00\00>\00\00")
  (data 0 (i32.const 10653) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10666) "\12\00\00\00U\00n\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10689) "\12\00\00\00U\00n\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10712) "\12\00\00\00U\00n\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10735) " \00\00\00I\00n\00t\00e\00r\00s\00e\00c\00t\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10772) "\02\00\00\00|\00\00")
  (data 0 (i32.const 10779) " \00\00\00I\00n\00t\00e\00r\00s\00e\00c\00t\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10816) "&\00\00\00A\00 \00t\00y\00p\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 10859) " \00\00\00I\00n\00t\00e\00r\00s\00e\00c\00t\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10896) " \00\00\00I\00n\00t\00e\00r\00s\00e\00c\00t\00i\00o\00n\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10933) "\10\00\00\00A\00t\00o\00m\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10954) "\02\00\00\00&\00\00")
  (data 0 (i32.const 10961) "\10\00\00\00A\00t\00o\00m\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 10982) "&\00\00\00A\00 \00t\00y\00p\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 11025) "\10\00\00\00A\00t\00o\00m\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 11046) "\12\00\00\00T\00y\00p\00e\00P\00a\00r\00e\00n\00\00")
  (data 0 (i32.const 11069) "&\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 11112) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 11135) "\12\00\00\00T\00y\00p\00e\00P\00a\00r\00e\00n\00\00")
  (data 0 (i32.const 11158) "\12\00\00\00T\00y\00p\00e\00P\00a\00r\00e\00n\00\00")
  (data 0 (i32.const 11181) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 11194) "0\00\00\00A\00 \00t\00y\00p\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00 \00h\00e\00r\00e\00\00")
  (data 0 (i32.const 11247) "&\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 11290) "&\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 11333) "\06\00\00\00f\00u\00n\00\00")
  (data 0 (i32.const 11344) "\1c\00\00\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 11377) "\1c\00\00\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 11410) ",\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 11459) "\04\00\00\00-\00>\00\00")
  (data 0 (i32.const 11468) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 11481) "0\00\00\00A\00 \00t\00y\00p\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00 \00h\00e\00r\00e\00\00")
  (data 0 (i32.const 11534) ",\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 11583) ",\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00s\00\00")
  (data 0 (i32.const 11632) "*\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00\00")
  (data 0 (i32.const 11679) "*\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00\00")
  (data 0 (i32.const 11726) "*\00\00\00F\00u\00n\00c\00t\00i\00o\00n\00T\00y\00p\00e\00P\00a\00r\00a\00m\00e\00t\00e\00r\00\00")
  (data 0 (i32.const 11773) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 11806) "\02\00\00\00:\00\00")
  (data 0 (i32.const 11813) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 11826) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 11851) "\18\00\00\00I\00f\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 11880) "\1e\00\00\00M\00a\00t\00c\00h\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 11915) "\1c\00\00\00L\00o\00o\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 11948) "\1c\00\00\00B\00r\00e\00a\00k\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 11981) "\22\00\00\00C\00o\00n\00t\00i\00n\00u\00e\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 12020) " \00\00\00A\00s\00s\00i\00g\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12057) "\12\00\00\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 12080) "\1c\00\00\00V\00a\00l\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 12113) "\1c\00\00\00V\00a\00r\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 12146) "\1c\00\00\00F\00u\00n\00D\00e\00c\00l\00a\00r\00a\00t\00i\00o\00n\00\00")
  (data 0 (i32.const 12179) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12204) " \00\00\00A\00s\00s\00i\00g\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12241) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12282) "\18\00\00\00O\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12311) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 12320) "\22\00\00\00A\00s\00s\00i\00g\00n\00m\00e\00n\00t\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 12359) "\18\00\00\00O\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12388) "\18\00\00\00O\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12417) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12458) "\1a\00\00\00A\00n\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12489) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 12498) "\12\00\00\00O\00r\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 12521) "\1a\00\00\00A\00n\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12552) "\1a\00\00\00A\00n\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12583) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12624) "\1e\00\00\00B\00i\00t\00O\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12659) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 12668) "\14\00\00\00A\00n\00d\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 12693) "\1e\00\00\00B\00i\00t\00O\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12728) "\1e\00\00\00B\00i\00t\00O\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12763) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12804) " \00\00\00B\00i\00t\00X\00o\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12841) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 12850) "\1a\00\00\00B\00i\00t\00O\00r\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 12881) " \00\00\00B\00i\00t\00X\00o\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12918) " \00\00\00B\00i\00t\00X\00o\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12955) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 12996) " \00\00\00B\00i\00t\00A\00n\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13033) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 13042) "\1c\00\00\00B\00i\00t\00X\00o\00r\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 13075) " \00\00\00B\00i\00t\00A\00n\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13112) " \00\00\00B\00i\00t\00A\00n\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13149) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13190) "\18\00\00\00E\00q\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13219) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 13228) "\1c\00\00\00B\00i\00t\00A\00n\00d\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 13261) "\18\00\00\00E\00q\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13290) "\18\00\00\00E\00q\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13319) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13360) "\1a\00\00\00R\00e\00l\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13391) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 13400) "\14\00\00\00E\00q\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 13425) "\1a\00\00\00R\00e\00l\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13456) "\1a\00\00\00R\00e\00l\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13487) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13528) "\1e\00\00\00S\00h\00i\00f\00t\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13563) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 13572) "\16\00\00\00R\00e\00l\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 13599) "\1e\00\00\00S\00h\00i\00f\00t\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13634) "\1e\00\00\00S\00h\00i\00f\00t\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13669) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13710) "\1a\00\00\00A\00d\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13741) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 13750) "\1a\00\00\00S\00h\00i\00f\00t\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 13781) "\1a\00\00\00A\00d\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13812) "\1a\00\00\00A\00d\00d\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13843) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13884) "\1a\00\00\00M\00u\00l\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13915) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 13924) "\16\00\00\00A\00d\00d\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 13951) "\1a\00\00\00M\00u\00l\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 13982) "\1a\00\00\00M\00u\00l\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14013) "$\00\00\00B\00i\00n\00a\00r\00y\00O\00p\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14054) "\18\00\00\00I\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14083) "\04\00\00\00O\00p\00\00")
  (data 0 (i32.const 14092) "\16\00\00\00M\00u\00l\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 14119) "\18\00\00\00I\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14148) "\18\00\00\00I\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14177) "\18\00\00\00I\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14206) "\18\00\00\00A\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14235) "\04\00\00\00I\00s\00\00")
  (data 0 (i32.const 14244) "\12\00\00\00I\00s\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 14267) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 14280) "&\00\00\00A\00 \00t\00y\00p\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 14323) "\18\00\00\00A\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14352) "\18\00\00\00A\00s\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14381) "\1e\00\00\00U\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14416) "\04\00\00\00A\00s\00\00")
  (data 0 (i32.const 14425) "\12\00\00\00A\00s\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 14448) "\08\00\00\00T\00y\00p\00e\00\00")
  (data 0 (i32.const 14461) "&\00\00\00A\00 \00t\00y\00p\00e\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 14504) "\1e\00\00\00U\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14539) "\1e\00\00\00U\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14574) "\1a\00\00\00N\00e\00g\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14605) " \00\00\00B\00i\00n\00N\00e\00g\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14642) "\14\00\00\00U\00n\00a\00r\00y\00M\00i\00n\00u\00s\00\00")
  (data 0 (i32.const 14667) " \00\00\00A\00t\00o\00m\00i\00c\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14704) " \00\00\00A\00t\00o\00m\00i\00c\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14741) " \00\00\00A\00t\00o\00m\00i\00c\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14778) "\0a\00\00\00V\00a\00l\00u\00e\00\00")
  (data 0 (i32.const 14793) " \00\00\00M\00e\00m\00b\00e\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14830) "\1a\00\00\00C\00a\00l\00l\00A\00r\00g\00u\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 14861) "\1e\00\00\00I\00n\00d\00e\00x\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14896) "\22\00\00\00B\00i\00n\00M\00e\00m\00b\00e\00r\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 14935) "\04\00\00\00.\00^\00\00")
  (data 0 (i32.const 14944) "\02\00\00\00.\00\00")
  (data 0 (i32.const 14951) " \00\00\00M\00e\00m\00b\00e\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 14988) " \00\00\00M\00e\00m\00b\00e\00r\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15025) "\22\00\00\00B\00i\00n\00M\00e\00m\00b\00e\00r\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 15064) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 15097) "F\00\00\00A\00 \00n\00a\00m\00e\00 \00i\00d\00e\00n\00t\00i\00f\00i\00e\00r\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00 \00h\00e\00r\00e\00\00")
  (data 0 (i32.const 15172) "\1e\00\00\00I\00n\00d\00e\00x\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15207) "\1e\00\00\00I\00n\00d\00e\00x\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15242) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15267) "0\00\00\00M\00i\00s\00s\00i\00n\00g\00 \00i\00n\00d\00e\00x\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15320) "\1a\00\00\00N\00e\00g\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15351) "\1e\00\00\00U\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15386) "\02\00\00\00!\00\00")
  (data 0 (i32.const 15393) " \00\00\00A\00t\00o\00m\00i\00c\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15430) "$\00\00\00M\00i\00s\00s\00i\00n\00g\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15471) " \00\00\00B\00i\00n\00N\00e\00g\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15508) "\1e\00\00\00U\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15543) "\02\00\00\00~\00\00")
  (data 0 (i32.const 15550) " \00\00\00A\00t\00o\00m\00i\00c\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15587) "$\00\00\00M\00i\00s\00s\00i\00n\00g\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15628) "\14\00\00\00U\00n\00a\00r\00y\00M\00i\00n\00u\00s\00\00")
  (data 0 (i32.const 15653) "\1e\00\00\00U\00n\00a\00r\00y\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15688) "\02\00\00\00-\00\00")
  (data 0 (i32.const 15695) " \00\00\00A\00t\00o\00m\00i\00c\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15732) "$\00\00\00M\00i\00s\00s\00i\00n\00g\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15773) "\0a\00\00\00V\00a\00l\00u\00e\00\00")
  (data 0 (i32.const 15788) "\0e\00\00\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 15807) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 15830) "\1e\00\00\00P\00a\00r\00e\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15865) "\12\00\00\00C\00o\00d\00e\00B\00l\00o\00c\00k\00\00")
  (data 0 (i32.const 15888) "\1e\00\00\00P\00a\00r\00e\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15923) "\1e\00\00\00P\00a\00r\00e\00n\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15958) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 15983) "4\00\00\00A\00n\00 \00e\00x\00p\00r\00e\00s\00s\00i\00o\00n\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 16040) "\12\00\00\00C\00o\00d\00e\00B\00l\00o\00c\00k\00\00")
  (data 0 (i32.const 16063) "\12\00\00\00C\00o\00d\00e\00B\00l\00o\00c\00k\00\00")
  (data 0 (i32.const 16086) "\12\00\00\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 16109) "\12\00\00\00S\00t\00a\00t\00e\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 16132) "\12\00\00\00M\00a\00t\00c\00h\00B\00o\00d\00y\00\00")
  (data 0 (i32.const 16155) "\12\00\00\00M\00a\00t\00c\00h\00B\00o\00d\00y\00\00")
  (data 0 (i32.const 16178) "\1a\00\00\00M\00a\00t\00c\00h\00E\00l\00e\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 16209) "\22\00\00\00D\00e\00s\00t\00r\00u\00c\00t\00u\00r\00e\00S\00t\00r\00u\00c\00t\00\00")
  (data 0 (i32.const 16248) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 16281) "\1a\00\00\00C\00a\00l\00l\00A\00r\00g\00u\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 16312) "\1a\00\00\00C\00a\00l\00l\00A\00r\00g\00u\00m\00e\00n\00t\00s\00\00")
  (data 0 (i32.const 16343) "\14\00\00\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 16368) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 16391) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 16414) "\0a\00\00\00Q\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 16429) "\1c\00\00\00B\00o\00o\00l\00e\00a\00n\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 16462) "\1c\00\00\00B\00o\00o\00l\00e\00a\00n\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 16495) "\08\00\00\00t\00r\00u\00e\00\00")
  (data 0 (i32.const 16508) "\0a\00\00\00f\00a\00l\00s\00e\00\00")
  (data 0 (i32.const 16523) "\1a\00\00\00P\00o\00s\00t\00f\00i\00x\00N\00u\00m\00b\00e\00r\00\00")
  (data 0 (i32.const 16554) "\1a\00\00\00P\00o\00s\00t\00f\00i\00x\00N\00u\00m\00b\00e\00r\00\00")
  (data 0 (i32.const 16585) "\12\00\00\00R\00e\00f\00e\00r\00e\00n\00c\00e\00\00")
  (data 0 (i32.const 16608) " \00\00\00N\00e\00g\00N\00u\00m\00b\00e\00r\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 16645) " \00\00\00N\00e\00g\00N\00u\00m\00b\00e\00r\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 16682) "\02\00\00\00-\00\00")
  (data 0 (i32.const 16689) "\0e\00\00\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 16708) "\1a\00\00\00P\00o\00s\00t\00f\00i\00x\00N\00u\00m\00b\00e\00r\00\00")
  (data 0 (i32.const 16739) "\1c\00\00\00B\00o\00o\00l\00e\00a\00n\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 16772) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 16805) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 16838) "\0e\00\00\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 16857) "\0a\00\00\00Q\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 16872) "\0a\00\00\00Q\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 16887) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 16920) "\04\00\00\00:\00:\00\00")
  (data 0 (i32.const 16929) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 16962) "F\00\00\00A\00n\00 \00i\00d\00e\00n\00t\00i\00f\00i\00e\00r\00 \00w\00a\00s\00 \00e\00x\00p\00e\00c\00t\00e\00d\00 \00a\00f\00t\00e\00r\00 \00:\00:\00\00")
  (data 0 (i32.const 17037) "\1e\00\00\00N\00a\00m\00e\00L\00i\00t\00e\00r\00a\00l\00P\00a\00i\00r\00\00")
  (data 0 (i32.const 17072) "\1e\00\00\00N\00a\00m\00e\00L\00i\00t\00e\00r\00a\00l\00P\00a\00i\00r\00\00")
  (data 0 (i32.const 17107) "\1c\00\00\00N\00a\00m\00e\00I\00d\00e\00n\00t\00i\00f\00i\00e\00r\00\00")
  (data 0 (i32.const 17140) "\02\00\00\00=\00\00")
  (data 0 (i32.const 17147) "\0e\00\00\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 17166) "\16\00\00\00S\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 17193) "\16\00\00\00S\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 17220) "\0e\00\00\00S\00S\00y\00m\00b\00o\00l\00\00")
  (data 0 (i32.const 17239) "\0a\00\00\00S\00A\00t\00o\00m\00\00")
  (data 0 (i32.const 17254) "\0a\00\00\00S\00A\00t\00o\00m\00\00")
  (data 0 (i32.const 17269) "\0a\00\00\00Q\00N\00a\00m\00e\00\00")
  (data 0 (i32.const 17284) "\16\00\00\00S\00E\00x\00p\00r\00e\00s\00s\00i\00o\00n\00\00")
  (data 0 (i32.const 17311) " \00\00\00N\00e\00g\00N\00u\00m\00b\00e\00r\00L\00i\00t\00e\00r\00a\00l\00\00")
  (data 0 (i32.const 17348) "\0e\00\00\00S\00S\00y\00m\00b\00o\00l\00\00")
  (data 0 (i32.const 17367) "\0e\00\00\00S\00S\00y\00m\00b\00o\00l\00\00")
  (data 0 (i32.const 17386) "\02\00\00\00/\00\00")
  (data 0 (i32.const 17393) "\02\00\00\00.\00\00")
  (data 0 (i32.const 17400) "\0e\00\00\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17419) "\1e\00\00\00D\00I\00R\00E\00C\00T\00I\00V\00E\00_\00S\00T\00A\00R\00T\00\00")
  (data 0 (i32.const 17454) "\16\00\00\00V\00A\00L\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17481) "\16\00\00\00V\00A\00R\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17508) "\1c\00\00\00E\00F\00F\00E\00C\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17541) "\18\00\00\00I\00M\00P\00L\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17570) "\16\00\00\00F\00O\00R\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17597) "\1c\00\00\00I\00M\00P\00O\00R\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17630) "\1c\00\00\00S\00T\00R\00U\00C\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17663) "\1e\00\00\00P\00R\00I\00V\00A\00T\00E\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17698) "\1c\00\00\00P\00U\00B\00L\00I\00C\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17731) "\18\00\00\00T\00Y\00P\00E\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17760) "\18\00\00\00E\00N\00U\00M\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17789) "\1a\00\00\00T\00R\00A\00I\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17820) "\16\00\00\00F\00U\00N\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17847) "\06\00\00\00f\00u\00n\00\00")
  (data 0 (i32.const 17858) "\16\00\00\00V\00A\00L\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17885) "\06\00\00\00v\00a\00l\00\00")
  (data 0 (i32.const 17896) "\16\00\00\00V\00A\00R\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17923) "\06\00\00\00v\00a\00r\00\00")
  (data 0 (i32.const 17934) "\1c\00\00\00E\00F\00F\00E\00C\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 17967) "\0c\00\00\00e\00f\00f\00e\00c\00t\00\00")
  (data 0 (i32.const 17984) "\18\00\00\00I\00M\00P\00L\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18013) "\08\00\00\00i\00m\00p\00l\00\00")
  (data 0 (i32.const 18026) "\16\00\00\00F\00O\00R\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18053) "\06\00\00\00f\00o\00r\00\00")
  (data 0 (i32.const 18064) "\1c\00\00\00I\00M\00P\00O\00R\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18097) "\0c\00\00\00i\00m\00p\00o\00r\00t\00\00")
  (data 0 (i32.const 18114) "\1c\00\00\00S\00T\00R\00U\00C\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18147) "\0c\00\00\00s\00t\00r\00u\00c\00t\00\00")
  (data 0 (i32.const 18164) "\1e\00\00\00P\00R\00I\00V\00A\00T\00E\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18199) "\0e\00\00\00p\00r\00i\00v\00a\00t\00e\00\00")
  (data 0 (i32.const 18218) "\1c\00\00\00P\00U\00B\00L\00I\00C\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18251) "\0c\00\00\00p\00u\00b\00l\00i\00c\00\00")
  (data 0 (i32.const 18268) "\18\00\00\00T\00Y\00P\00E\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18297) "\08\00\00\00t\00y\00p\00e\00\00")
  (data 0 (i32.const 18310) "\18\00\00\00E\00N\00U\00M\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18339) "\08\00\00\00e\00n\00u\00m\00\00")
  (data 0 (i32.const 18352) "\1a\00\00\00T\00R\00A\00I\00T\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18383) "\0a\00\00\00t\00r\00a\00i\00t\00\00")
  (data 0 (i32.const 18398) "\1a\00\00\00M\00A\00T\00C\00H\00_\00K\00E\00Y\00W\00O\00R\00D\00\00")
  (data 0 (i32.const 18429) "\0a\00\00\00m\00a\00t\00c\00h\00\00")
  (data 0 (i32.const 18444) "\22\00\00\00A\00s\00s\00i\00g\00n\00m\00e\00n\00t\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 18483) "\02\00\00\00=\00\00")
  (data 0 (i32.const 18490) "\1c\00\00\00N\00o\00t\00P\00r\00e\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 18523) "\02\00\00\00!\00\00")
  (data 0 (i32.const 18530) "\22\00\00\00B\00i\00t\00N\00o\00t\00P\00r\00e\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 18569) "\02\00\00\00~\00\00")
  (data 0 (i32.const 18576) " \00\00\00M\00i\00n\00u\00s\00P\00r\00e\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 18613) "\02\00\00\00-\00\00")
  (data 0 (i32.const 18620) "\12\00\00\00A\00s\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 18643) "\04\00\00\00a\00s\00\00")
  (data 0 (i32.const 18652) "\12\00\00\00I\00s\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 18675) "\04\00\00\00i\00s\00\00")
  (data 0 (i32.const 18684) "\16\00\00\00M\00u\00l\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 18711) "\04\00\00\00*\00*\00\00")
  (data 0 (i32.const 18720) "\02\00\00\00*\00\00")
  (data 0 (i32.const 18727) "\02\00\00\00/\00\00")
  (data 0 (i32.const 18734) "\02\00\00\00%\00\00")
  (data 0 (i32.const 18741) "\16\00\00\00A\00d\00d\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 18768) "\04\00\00\00+\00+\00\00")
  (data 0 (i32.const 18777) "\02\00\00\00+\00\00")
  (data 0 (i32.const 18784) "\02\00\00\00-\00\00")
  (data 0 (i32.const 18791) "\1a\00\00\00S\00h\00i\00f\00t\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 18822) "\06\00\00\00>\00>\00>\00\00")
  (data 0 (i32.const 18833) "\04\00\00\00>\00>\00\00")
  (data 0 (i32.const 18842) "\04\00\00\00<\00<\00\00")
  (data 0 (i32.const 18851) "\16\00\00\00R\00e\00l\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 18878) "\04\00\00\00>\00=\00\00")
  (data 0 (i32.const 18887) "\04\00\00\00<\00=\00\00")
  (data 0 (i32.const 18896) "\02\00\00\00>\00\00")
  (data 0 (i32.const 18903) "\02\00\00\00<\00\00")
  (data 0 (i32.const 18910) "\14\00\00\00E\00q\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 18935) "\06\00\00\00=\00=\00=\00\00")
  (data 0 (i32.const 18946) "\06\00\00\00!\00=\00=\00\00")
  (data 0 (i32.const 18957) "\04\00\00\00~\00=\00\00")
  (data 0 (i32.const 18966) "\04\00\00\00=\00=\00\00")
  (data 0 (i32.const 18975) "\04\00\00\00!\00=\00\00")
  (data 0 (i32.const 18984) "\1c\00\00\00B\00i\00t\00A\00n\00d\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 19017) "\02\00\00\00&\00\00")
  (data 0 (i32.const 19024) "\1c\00\00\00B\00i\00t\00X\00o\00r\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 19057) "\02\00\00\00^\00\00")
  (data 0 (i32.const 19064) "\1a\00\00\00B\00i\00t\00O\00r\00O\00p\00e\00r\00a\00t\00o\00r\00\00")
  (data 0 (i32.const 19095) "\02\00\00\00|\00\00")
  (data 0 (i32.const 19102) "\14\00\00\00A\00n\00d\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 19127) "\04\00\00\00&\00&\00\00")
  (data 0 (i32.const 19136) "\12\00\00\00O\00r\00K\00e\00y\00w\00o\00r\00d\00\00")
  (data 0 (i32.const 19159) "\04\00\00\00|\00|\00\00")
  (global $src::parser::lysgrammar::grammar (mut i64) (i64.const 0))
  (func $src::parser::lysgrammar::n_1 (param $name i64) (result i64)
    (call $src::parser::grammar::NonTerminal.apply_1 (local.get $name))
  )
  (func $src::parser::lysgrammar::t_1 (param $name i64) (result i64)
    (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::StrictTerminal.apply_1 (call $src::lexer::tokens::Identifier.apply_1) (local.get $name)))
  )
  (func $src::parser::lysgrammar::K_1 (param $name i64) (result i64)
    (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::StrictTerminal.apply_1 (call $src::lexer::tokens::Keyword.apply_1) (local.get $name)))
  )
  (func $src::parser::lysgrammar::KK_1 (param $name i64) (result i64)
    (call $src::parser::grammar::StrictTerminal.apply_1 (call $src::lexer::tokens::Keyword.apply_1) (local.get $name))
  )
  (func $src::parser::lysgrammar::op_1 (param $name i64) (result i64)
    (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::StrictTerminal.apply_1 (call $src::lexer::tokens::Operator.apply_1) (local.get $name)))
  )
  (func $src::parser::lysgrammar::opk_1 (param $name i64) (result i64)
    (call $src::parser::grammar::StrictTerminal.apply_1 (call $src::lexer::tokens::Operator.apply_1) (local.get $name))
  )
  (func $src::parser::lysgrammar::Wrap_1 (param $start i64) (param $middle i64) (param $end i64) (result i64)
    (call $src::parser::lysgrammar::WrapWith_1 (call $src::parser::grammar::Terminal.apply_1 (local.get $start)) (local.get $middle) (call $src::parser::grammar::Terminal.apply_1 (local.get $end)))
  )
  (func $src::parser::lysgrammar::WrapWith_1 (param $start i64) (param $middle i64) (param $end i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::Discard.apply_1 (local.get $start)) (local.get $middle)) (call $src::parser::grammar::Discard.apply_1 (local.get $end)))
  )
  (func $src::parser::lysgrammar::Rune_1 (param $start i64) (param $middle i64) (param $message i64) (result i64)
    (call $src::parser::grammar::Cut.apply_1 (local.get $start) (call $src::parser::grammar::Or.apply_1 (local.get $middle) (call $src::parser::grammar::Fail.apply_1 (local.get $message))))
  )
  (func $src::parser::lysgrammar::OneOrMoreComma_1 (param $rule i64) (result i64)
    (call $src::parser::grammar::Cons.apply_8 (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000035f))) (call $src::parser::grammar::Cut.apply_1 (local.get $rule) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000368)))) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cut.apply_9 (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Comma.apply_1))) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000371))) (local.get $rule))) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000037a))))
  )
  (func $src::parser::lysgrammar::getGrammar_1 (result i64)
    (local $src::parser::lysgrammar::WS i64)
    (local $src::parser::lysgrammar::NEW_LINE i64)
    (local $src::parser::lysgrammar::WSS i64)
    (local $src::parser::lysgrammar::g_1 i64)
    (local $var$4 i64)
    (block $B1 (result i64)
      (block $B3 (result i64)
          (local.set $var$4 (global.get $src::parser::lysgrammar::grammar))
          (block $B3_0
              (block $B3_1
                  (br_if $B3_0 (call $src::parser::grammar::Grammar.is_1 (local.get $var$4)))
                )
              (block $B2 (result i64)
                  (local.set $src::parser::lysgrammar::WS (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000383)))))
                  (local.set $src::parser::lysgrammar::NEW_LINE (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Or.apply_1 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Whitespace.apply_1)) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::MultiLineComment.apply_1)))) (call $src::parser::grammar::Or.apply_1 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::NewLine.apply_1)) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::LineComment.apply_1))))))
                  (local.set $src::parser::lysgrammar::WSS (call $src::parser::grammar::Discard.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000038c))))
                  (local.set $src::parser::lysgrammar::g_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Grammar.++_1 (call $src::parser::grammar::Nominal.++_1 (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000395) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000003aa) (call $src::parser::grammar::Cut.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::OneOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000003bf)) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::EndOfFile.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000003d6) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::OneOrMore.apply_1 (call $src::parser::grammar::Or.apply_8 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Whitespace.apply_1)) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::LineComment.apply_1)) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::MultiLineComment.apply_1)) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::NewLine.apply_1))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000003df) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000003f6)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000041d)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000043a)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000457)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000047a)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000499)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000004b8)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000004d9)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000004fc)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000051f))))))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000053e) (call $src::parser::grammar::Or.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000567)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000058e)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000005ab))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000005c8) (call $src::parser::grammar::Or.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000005eb) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000060e)))) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000631) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Discard.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000064a)))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000066b) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000068e) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000006b1)) (call $src::parser::grammar::Cons.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000006d2)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000006e1)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000006f8)) (i64.const 0x0000000400000719)))) (i64.const 0x000000040000075a))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000078b) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000007b2) (call $src::parser::grammar::Cons.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000007d9)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000007f2)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000815)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000836) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000853) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000870)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000893)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000008b4) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000008d1) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000008ee)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000911)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000932) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000951) (call $src::parser::grammar::Cons.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000970)) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000993)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000009b0)) (i64.const 0x00000004000009d1)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000a06))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000a1d) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000a3c) (call $src::parser::grammar::Cons.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000a5b)) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000a7e)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000a9b)) (i64.const 0x0000000400000abc)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000af3))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::CurlyBracesClose.apply_1)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000b18) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000b39) (call $src::parser::grammar::Cons.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000b5a)) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000b7d)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000b9c)) (i64.const 0x0000000400000bbd)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000bf4))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::CurlyBracesClose.apply_1)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000c1b) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000c3e) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000c61)) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000c84)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000ca5)) (i64.const 0x0000000400000ccc)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000d07) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000d2a) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000d4d)) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000d70)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000d91)) (i64.const 0x0000000400000db8)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000e01) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000e20) (call $src::parser::grammar::Cons.apply_8 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000e3f)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000e5c)) (i64.const 0x0000000400000e73)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000ebe)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000ed9)) (i64.const 0x0000000400000ef0)) (local.get $src::parser::lysgrammar::WS))) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000f33)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000f60) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000f79) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000f92)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400000fa9) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400000fc0) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::MacroDecoration.apply_1) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000fd7)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WSS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400000ff8)))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::VectorClose.apply_1)) (local.get $src::parser::lysgrammar::WS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000100b) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000102c) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x000000040000104d)) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000105a))) (i64.const 0x0000000400001073))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000010ac) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000010d3) (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000010fa))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000110f) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001130) (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400001151))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001160) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001181) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000011a2)) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000011bd)) (local.get $src::parser::lysgrammar::WS)) (i64.const 0x00000004000011de)) (call $src::parser::grammar::Cons.apply_9 (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001209))) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000121a))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000122b) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000124c) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000126d)) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001288)) (local.get $src::parser::lysgrammar::WS)) (i64.const 0x00000004000012a9)) (call $src::parser::grammar::Cons.apply_9 (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000012d4))) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000012e5))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000012f6) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001317) (call $src::parser::grammar::Cons.apply_4 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001338)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001353)) (i64.const 0x0000000400001370)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000013ad) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000013ce)))) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000013ef)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001418) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001431)))) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001442) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000145f)))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000148a) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000014ad) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000014d0)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000014ef)) (i64.const 0x0000000400001514)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000155f)) (i64.const 0x0000000400001576))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000015ad) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000015cc) (call $src::parser::grammar::Cons.apply_6 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000015eb)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000015f8) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001615)) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400001636)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000163f)) (i64.const 0x0000000400001658)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x000000040000168d)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001696)) (i64.const 0x00000004000016af)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000016e8) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001703) (call $src::parser::grammar::Cons.apply_7 (call $src::parser::lysgrammar::K_1 (i64.const 0x000000040000171e)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000172b) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000173e)) (call $src::parser::grammar::Fail.apply_1 (i64.const 0x0000000400001751)))) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400001782)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000178b)) (i64.const 0x00000004000017a4)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000017dd) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000017ee) (call $src::parser::grammar::Cons.apply_5 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000017ff)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000180c) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001829)) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000184a) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x000000040000186b)) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WSS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001874))) (i64.const 0x000000040000188b))) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000018ca) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000018e5)))) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x000000040000190c)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001915)) (i64.const 0x000000040000192e)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001967) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000197c) (call $src::parser::grammar::Cons.apply_9 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400001991)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000199e) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cut.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000019bb)) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x00000004000019dc)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000019e5)) (i64.const 0x00000004000019fe)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001a37) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001a54) (call $src::parser::grammar::Cons.apply_8 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cut.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400001a71)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001a7a)) (i64.const 0x0000000400001a91)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001ac6)) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001adf)))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001b00) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400001b21)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001b2e)) (i64.const 0x0000000400001b47)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001b80) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001ba1) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400001bc2)) (call $src::parser::lysgrammar::t_1 (i64.const 0x0000000400001bc9))) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001bd6))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::CurlyBracesClose.apply_1)) (local.get $src::parser::lysgrammar::WS)) (i64.const 0x0000000400001be5))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001c42) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001c61) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_9 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400001c80)) (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400001c87)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001c98)) (i64.const 0x0000000400001cbd))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001d08) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001d2b) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400001d4e)) (call $src::parser::lysgrammar::t_1 (i64.const 0x0000000400001d55)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001d6a) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001d87) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400001da4)) (call $src::parser::lysgrammar::t_1 (i64.const 0x0000000400001dab))) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001dba)) (local.get $src::parser::lysgrammar::WS)))) (call $src::lexer::tokens::CurlyBracesClose.apply_1)) (local.get $src::parser::lysgrammar::WS)) (i64.const 0x0000000400001ddd))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001e24) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::ParenthesesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001e3b)) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::ParenthesesClose.apply_1)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001e54) (call $src::parser::grammar::Cut.apply_1 (call $src::parser::grammar::Or.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001e73)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001e92)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001ea3)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001ebe))) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001ed3) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400001efa) (call $src::parser::lysgrammar::t_1 (i64.const 0x0000000400001f21))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001f2c) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400001f43)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::LookAhead.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400001f4a))) (call $src::parser::grammar::Or.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001f51)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001f74)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001f93)))) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400001fb0))) (i64.const 0x0000000400001fbd)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400001ff4) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002019) (call $src::parser::grammar::Cons.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000203e)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cut.apply_8 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Comma.apply_1)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000205b)) (local.get $src::parser::lysgrammar::WS))) (local.get $src::parser::lysgrammar::WS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002078) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002095) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000020b2))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000020d3) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::WrapWith_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x00000004000020f4)) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000020fb)))) (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002120))) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002127) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002138)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000213f)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002158))) (i64.const 0x000000040000217f)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000021ae) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x00000004000021d9)) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Or.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000021e0)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000021f9)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000221a)))) (i64.const 0x0000000400002241)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000227a) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x000000040000228b)) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002292)) (local.get $src::parser::lysgrammar::WS))) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000022b3)) (local.get $src::parser::lysgrammar::WS)) (i64.const 0x00000004000022c0)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000022ff) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002324)) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::CurlyBracesClose.apply_1)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002343) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000236c) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::ParenthesesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002395)) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::ParenthesesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000023b4) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000023d3) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::OneOrMoreComma_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000023e4))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000023fb) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002412) (call $src::parser::grammar::Cons.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002429)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000244a))) (local.get $src::parser::lysgrammar::WS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000245b) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002482) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000024a9)) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000024ca))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000024f3) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002526) (call $src::parser::grammar::Cons.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002559)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000257a)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000025a3)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000025b4) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000025db) (call $src::parser::grammar::OneOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002602))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002629) (call $src::parser::grammar::OneOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000264e)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002675) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002696) (call $src::parser::grammar::OneOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000026b7))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000026ea) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002707)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002728))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002743) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000275e) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::NegativeLookAhead.apply_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002779))) (call $src::parser::grammar::Or.apply_8 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Operator.apply_1)) (call $src::parser::lysgrammar::KK_1 (i64.const 0x0000000400002780)) (call $src::parser::lysgrammar::KK_1 (i64.const 0x0000000400002789)) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::VectorOpen.apply_1)) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::VectorClose.apply_1)))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002792) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000027bf) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000027d0)) (local.get $src::parser::lysgrammar::WS)))) (call $src::lexer::tokens::CurlyBracesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000027f9) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002820) (call $src::parser::grammar::Cons.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002847)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002868) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002889)))) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000028aa)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000028d1) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000028f8) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000291f))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::CurlyBracesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002940) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002961) (call $src::parser::lysgrammar::WrapWith_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002982)) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002989)) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002996)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000299d) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000029aa)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000029c1) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x00000004000029d8) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000029ef)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002a14)) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002a1b))) (i64.const 0x0000000400002a40)))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002a6b) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400002a90) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002ab5)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002aca)) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002ad1))) (i64.const 0x0000000400002ae6)))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002b11) (call $src::parser::grammar::Or.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002b26)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002b3d)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002b68))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002b7f) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002b96) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::ParenthesesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002bad)) (call $src::parser::grammar::Fail.apply_1 (i64.const 0x0000000400002bba))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::ParenthesesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002bef) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002c1a) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400002c45)) (local.get $src::parser::lysgrammar::WS)) (call $src::parser::grammar::Cons.apply_6 (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002c50) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002c71)))) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002c92)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002cc3)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002ccc)) (call $src::parser::grammar::Fail.apply_1 (i64.const 0x0000000400002cd9)))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002d0e) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002d3f) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::ParenthesesOpen.apply_1) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::OneOrMoreComma_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002d70)))) (call $src::lexer::tokens::ParenthesesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002d9f) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400002dce) (call $src::parser::grammar::Cons.apply_9 (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cons.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002dfd)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400002e1e)))) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002e25)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002e32) (call $src::parser::grammar::Or.apply_6 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002e4b)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002e68)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002e8b)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002eac)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002ecd)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002ef4))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002f19) (call $src::parser::grammar::Or.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002f30)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002f51)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002f72)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002f93))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400002fac) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400002fd1) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400002ffa)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003017) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003020)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003047))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003064) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400003081) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000030aa)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000030c9) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000030d2)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000030e9))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003108) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400003127) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003150)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003173) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000317c)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003195))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000031b8) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x00000004000031db) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003204)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003229) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003232)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003251))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003276) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x000000040000329b) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000032c4)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000032e9) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000032f2)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003313))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003338) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x000000040000335d) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003386)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000033a3) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000033ac)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000033cd))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000033ea) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400003407) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003430)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000344f) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003458)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003471))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003490) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x00000004000034af) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000034d8)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000034fb) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003504)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000351f))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003542) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400003565) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000358e)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000035ad) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000035b6)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000035d5))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000035f4) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400003613) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000363c)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000365b) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003664)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000367f))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000369e) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x00000004000036bd) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000036e6)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003703) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000370c)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003727))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003744) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400003761) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000377e)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000379b) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000037a4)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000037bb)) (call $src::parser::grammar::Fail.apply_1 (i64.const 0x00000004000037c8)))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000037f3) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400003810) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000382d)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003850) (call $src::parser::grammar::Cons.apply_8 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003859)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003870)) (call $src::parser::grammar::Fail.apply_1 (i64.const 0x000000040000387d)))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000038a8) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x00000004000038cb) (call $src::parser::grammar::Or.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000038ee)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000390d)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003932)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000394b)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003970) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x0000000400003995) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000039ba)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Or.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000039c9)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000039ee)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003a0d))))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003a30) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400003a57)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400003a60))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003a67) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003a8c) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003ab1)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003ad8)) (i64.const 0x0000000400003af9))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003b44) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003b67) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::VectorOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003b8a)) (call $src::parser::grammar::Fail.apply_1 (i64.const 0x0000000400003ba3))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::VectorClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003bd8) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003bf7) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400003c1a)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003c21)) (i64.const 0x0000000400003c46))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003c6f) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003c94) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400003cb7)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003cbe)) (i64.const 0x0000000400003ce3))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003d0c) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003d25) (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400003d48)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003d4f)) (i64.const 0x0000000400003d74))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003d9d) (call $src::parser::grammar::Or.apply_8 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003dac)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003dbf)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003dd6)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003df9))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003e10) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003e33) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::ParenthesesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003e56)) (call $src::parser::grammar::Fail.apply_1 (i64.const 0x0000000400003e6f))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::ParenthesesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003ea8) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003ebf) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::grammar::Cut.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003ed6)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Cons.apply_9 (local.get $src::parser::lysgrammar::NEW_LINE) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003eed)))))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::CurlyBracesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003f04) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003f1b) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::CurlyBracesOpen.apply_1) (call $src::parser::grammar::Cons.apply_1 (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003f32)))) (call $src::lexer::tokens::CurlyBracesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003f51) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::ParenthesesOpen.apply_1) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::OneOrMoreComma_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003f78)))) (call $src::lexer::tokens::ParenthesesClose.apply_1)) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003f99) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400003fb8) (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::ParenthesesOpen.apply_1) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::OneOrMoreComma_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400003fd7)))) (call $src::lexer::tokens::ParenthesesClose.apply_1))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400003ff0) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400004007) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000401e))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000402d) (call $src::parser::grammar::Push.apply_1 (i64.const 0x000000040000404e) (call $src::parser::grammar::Or.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x000000040000406f)) (call $src::parser::lysgrammar::K_1 (i64.const 0x000000040000407c)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000408b) (call $src::parser::grammar::PushIfManyChildren.apply_1 (i64.const 0x00000004000040aa) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::NumberLiteral.apply_1)) (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000040c9))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000040e0) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400004105) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::Optional.apply_1 (call $src::parser::lysgrammar::opk_1 (i64.const 0x000000040000412a))) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::NumberLiteral.apply_1)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004131) (call $src::parser::grammar::Or.apply_9 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::StringLiteral.apply_1)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004144)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004163))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004184) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000041a5) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::NegativeLookAhead.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000041c6))) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Identifier.apply_1)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000041d9) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000041e8) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000041f7)) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::lysgrammar::Rune_1 (call $src::parser::lysgrammar::op_1 (i64.const 0x0000000400004218)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004221)) (i64.const 0x0000000400004242))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000428d) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000042b0) (call $src::parser::grammar::Cons.apply_7 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000042d3)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::op_1 (i64.const 0x00000004000042f4)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000042fb)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000430e) (call $src::parser::grammar::Push.apply_1 (i64.const 0x0000000400004329) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::Wrap_1 (call $src::lexer::tokens::ParenthesesOpen.apply_1) (call $src::parser::grammar::Cons.apply_7 (local.get $src::parser::lysgrammar::WS) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004344)) (local.get $src::parser::lysgrammar::WS) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004357))) (local.get $src::parser::lysgrammar::WS)) (call $src::lexer::tokens::ParenthesesClose.apply_1)) (local.get $src::parser::lysgrammar::WS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004366) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::Or.apply_9 (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004375)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004384)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000439f))) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000043c4) (call $src::parser::grammar::Push.apply_1 (i64.const 0x00000004000043d7) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::grammar::Or.apply_1 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Identifier.apply_1)) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Keyword.apply_1))) (call $src::parser::grammar::ZeroOrMore.apply_1 (call $src::parser::grammar::Or.apply_8 (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Identifier.apply_1)) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Keyword.apply_1)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x00000004000043ea)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x00000004000043f1)))))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000043f8) (call $src::parser::grammar::Terminal.apply_1 (call $src::lexer::tokens::Keyword.apply_1)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000440b) (call $src::parser::grammar::Or.apply_1 (call $src::parser::grammar::Or.apply_7 (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000442e)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004449)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004464)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004485)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000044a2))) (call $src::parser::grammar::Or.apply_5 (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000044bd)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000044de)) (call $src::parser::lysgrammar::n_1 (i64.const 0x00000004000044ff)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004522)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004543)) (call $src::parser::lysgrammar::n_1 (i64.const 0x0000000400004560)) (call $src::parser::lysgrammar::n_1 (i64.const 0x000000040000457d)))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000459c) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000045b7)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000045c2) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000045dd)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000045e8) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400004603)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000460e) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x000000040000462f)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004640) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x000000040000465d)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000466a) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400004685)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004690) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000046b1)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000046c2) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000046e3)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000046f4) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400004717)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000472a) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x000000040000474b)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000475c) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x0000000400004779)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004786) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000047a3)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000047b0) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000047cf)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000047de) (call $src::parser::grammar::Discard.apply_1 (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000047fd)) (local.get $src::parser::lysgrammar::WSS))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000480c) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004833)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x000000040000483a) (call $src::parser::lysgrammar::opk_1 (i64.const 0x000000040000485b)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004862) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004889)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004890) (call $src::parser::lysgrammar::opk_1 (i64.const 0x00000004000048b5)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000048bc) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000048d3)) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000048dc) (call $src::parser::grammar::Cons.apply_1 (call $src::parser::lysgrammar::K_1 (i64.const 0x00000004000048f3)) (local.get $src::parser::lysgrammar::WS)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000048fc) (call $src::parser::grammar::Or.apply_8 (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004917)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004920)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004927)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x000000040000492e))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004935) (call $src::parser::grammar::Or.apply_9 (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004950)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004959)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004960))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004967) (call $src::parser::grammar::Or.apply_9 (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004986)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004991)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x000000040000499a))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000049a3) (call $src::parser::grammar::Or.apply_8 (call $src::parser::lysgrammar::opk_1 (i64.const 0x00000004000049be)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x00000004000049c7)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x00000004000049d0)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x00000004000049d7))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x00000004000049de) (call $src::parser::grammar::Or.apply_7 (call $src::parser::lysgrammar::opk_1 (i64.const 0x00000004000049f7)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004a02)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004a0d)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004a16)) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004a1f))))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004a28) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004a49)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004a50) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004a71)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004a78) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004a97)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004a9e) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004ab7)))) (call $src::parser::grammar::Nominal.apply_1 (i64.const 0x0000000400004ac0) (call $src::parser::lysgrammar::opk_1 (i64.const 0x0000000400004ad7)))))
                  (global.set $src::parser::lysgrammar::grammar (local.get $src::parser::lysgrammar::g_1))
                  (local.get $src::parser::lysgrammar::g_1)
                )
              (br $B3)
            )
          (local.get $var$4)
          (br $B3)
        )
    )
  )
  (data 0 (i32.const 132) "\12\00\00\00E\00n\00d\00O\00f\00F\00i\00l\00e\00\00")
  (data 0 (i32.const 155) "\02\00\00\00(\00\00")
  (data 0 (i32.const 162) "\02\00\00\00)\00\00")
  (data 0 (i32.const 169) "&\00\00\00L\00e\00x\00e\00r\00N\00o\00t\00I\00n\00i\00t\00i\00a\00l\00i\00z\00e\00d\00\00")
  (data 0 (i32.const 212) "\10\00\00\00a\00b\00s\00t\00r\00a\00c\00t\00\00")
  (data 0 (i32.const 233) "\0a\00\00\00a\00s\00y\00n\00c\00\00")
  (data 0 (i32.const 248) "\0a\00\00\00a\00w\00a\00i\00t\00\00")
  (data 0 (i32.const 263) "\04\00\00\00a\00s\00\00")
  (data 0 (i32.const 272) "\0a\00\00\00b\00r\00e\00a\00k\00\00")
  (data 0 (i32.const 287) "\08\00\00\00c\00a\00s\00e\00\00")
  (data 0 (i32.const 300) "\0a\00\00\00c\00l\00a\00s\00s\00\00")
  (data 0 (i32.const 315) "\0a\00\00\00c\00o\00n\00s\00t\00\00")
  (data 0 (i32.const 330) "\10\00\00\00c\00o\00n\00t\00i\00n\00u\00e\00\00")
  (data 0 (i32.const 351) "\0e\00\00\00d\00e\00c\00l\00a\00r\00e\00\00")
  (data 0 (i32.const 370) "\0c\00\00\00d\00e\00l\00e\00t\00e\00\00")
  (data 0 (i32.const 387) "\0a\00\00\00d\00e\00f\00e\00r\00\00")
  (data 0 (i32.const 402) "\04\00\00\00d\00o\00\00")
  (data 0 (i32.const 411) "\0c\00\00\00e\00f\00f\00e\00c\00t\00\00")
  (data 0 (i32.const 428) "\08\00\00\00e\00l\00s\00e\00\00")
  (data 0 (i32.const 441) "\08\00\00\00e\00n\00u\00m\00\00")
  (data 0 (i32.const 454) "\0e\00\00\00e\00x\00t\00e\00n\00d\00s\00\00")
  (data 0 (i32.const 473) "\0a\00\00\00f\00a\00l\00s\00e\00\00")
  (data 0 (i32.const 488) "\0e\00\00\00f\00i\00n\00a\00l\00l\00y\00\00")
  (data 0 (i32.const 507) "\06\00\00\00f\00o\00r\00\00")
  (data 0 (i32.const 518) "\06\00\00\00f\00u\00n\00\00")
  (data 0 (i32.const 529) "\04\00\00\00i\00f\00\00")
  (data 0 (i32.const 538) "\08\00\00\00i\00m\00p\00l\00\00")
  (data 0 (i32.const 551) "\0c\00\00\00i\00m\00p\00o\00r\00t\00\00")
  (data 0 (i32.const 568) "\04\00\00\00i\00n\00\00")
  (data 0 (i32.const 577) "\04\00\00\00i\00s\00\00")
  (data 0 (i32.const 586) "\06\00\00\00l\00e\00t\00\00")
  (data 0 (i32.const 597) "\08\00\00\00l\00o\00o\00p\00\00")
  (data 0 (i32.const 610) "\0a\00\00\00m\00a\00t\00c\00h\00\00")
  (data 0 (i32.const 625) "\06\00\00\00n\00e\00w\00\00")
  (data 0 (i32.const 636) "\0e\00\00\00p\00a\00c\00k\00a\00g\00e\00\00")
  (data 0 (i32.const 655) "\0e\00\00\00p\00r\00i\00v\00a\00t\00e\00\00")
  (data 0 (i32.const 674) "\0c\00\00\00p\00u\00b\00l\00i\00c\00\00")
  (data 0 (i32.const 691) "\12\00\00\00p\00r\00o\00t\00e\00c\00t\00e\00d\00\00")
  (data 0 (i32.const 714) "\0c\00\00\00s\00t\00r\00u\00c\00t\00\00")
  (data 0 (i32.const 731) "\0a\00\00\00t\00r\00a\00i\00t\00\00")
  (data 0 (i32.const 746) "\08\00\00\00t\00r\00u\00e\00\00")
  (data 0 (i32.const 759) "\06\00\00\00t\00r\00y\00\00")
  (data 0 (i32.const 770) "\08\00\00\00t\00y\00p\00e\00\00")
  (data 0 (i32.const 783) "\0a\00\00\00u\00s\00i\00n\00g\00\00")
  (data 0 (i32.const 798) "\06\00\00\00v\00a\00l\00\00")
  (data 0 (i32.const 809) "\06\00\00\00v\00a\00r\00\00")
  (data 0 (i32.const 820) "\0a\00\00\00w\00h\00i\00l\00e\00\00")
  (data 0 (i32.const 835) "\08\00\00\00w\00i\00t\00h\00\00")
  (data 0 (i32.const 848) "\0a\00\00\00y\00i\00e\00l\00d\00\00")
  (global $src::lexer::lexer::instance (mut i64) (i64.const 0))
  (func $src::lexer::lexer::Lexer.is_1 (param $a i64) (result i32)
    (local $src::lexer::lexer::discriminant i32)
    (block $B1 (result i32)
      (local.set $src::lexer::lexer::discriminant (i32.const 169))
      (call $system::core::u32::u32.==_1 (call $system::core::native::ref.getDiscriminant_1 (local.get $a)) (local.get $src::lexer::lexer::discriminant))
    )
  )
  (func $src::lexer::lexer::Lexer.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $src::lexer::lexer::Lexer.Lexer$discriminant_1 (result i64)
    (local $src::lexer::lexer::discriminant_1 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::discriminant_1 (i32.const 169))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $src::lexer::lexer::discriminant_1)) (i32.const 32))
    )
  )
  (func $src::lexer::lexer::Lexer.apply_1 (param $source i64) (param $pos i32) (param $currentToken i64) (result i64)
    (local $src::lexer::lexer::$ref i64)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::$ref (call $src::lexer::lexer::Lexer.fromPointer_1 (call $system::core::memory::calloc_1 (call $system::core::i32::i32.as_4 (i32.const 1)) (i32.const 20))))
      (call $src::lexer::lexer::Lexer.property$0_2 (local.get $src::lexer::lexer::$ref) (local.get $source))
      (call $src::lexer::lexer::Lexer.property$1_2 (local.get $src::lexer::lexer::$ref) (local.get $pos))
      (call $src::lexer::lexer::Lexer.property$2_2 (local.get $src::lexer::lexer::$ref) (local.get $currentToken))
      (local.get $src::lexer::lexer::$ref)
    )
  )
  (func $src::lexer::lexer::Lexer.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $src::lexer::lexer::Lexer.fromPointer_1 (param $ptr i32) (result i64)
    (i64.or (call $src::lexer::lexer::Lexer.Lexer$discriminant_1) (i64.extend_u/i32 (local.get $ptr)))
  )
  (func $src::lexer::lexer::Lexer.==_1 (param $a i64) (param $b i64) (result i32)
    (i64.eq (local.get $a) (local.get $b))
  )
  (func $src::lexer::lexer::Lexer.!=_1 (param $a i64) (param $b i64) (result i32)
    (i64.ne (local.get $a) (local.get $b))
  )
  (func $src::lexer::lexer::Lexer.source_1 (param $self i64) (result i64)
    (call $src::lexer::lexer::Lexer.property$0_1 (local.get $self))
  )
  (func $src::lexer::lexer::Lexer.source_2 (param $self i64) (param $value i64)
    (call $src::lexer::lexer::Lexer.property$0_2 (local.get $self) (local.get $value))
  )
  (func $src::lexer::lexer::Lexer.property$0_1 (param $self i64) (result i64)
    (call $system::core::string::string.load_2 (local.get $self) (i32.const 0))
  )
  (func $src::lexer::lexer::Lexer.property$0_2 (param $self i64) (param $value i64)
    (call $system::core::string::string.store_2 (local.get $self) (local.get $value) (i32.const 0))
  )
  (func $src::lexer::lexer::Lexer.pos_1 (param $self i64) (result i32)
    (call $src::lexer::lexer::Lexer.property$1_1 (local.get $self))
  )
  (func $src::lexer::lexer::Lexer.pos_2 (param $self i64) (param $value i32)
    (call $src::lexer::lexer::Lexer.property$1_2 (local.get $self) (local.get $value))
  )
  (func $src::lexer::lexer::Lexer.property$1_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_2 (local.get $self) (i32.const 8))
  )
  (func $src::lexer::lexer::Lexer.property$1_2 (param $self i64) (param $value i32)
    (call $system::core::u32::u32.store_2 (local.get $self) (local.get $value) (i32.const 8))
  )
  (func $src::lexer::lexer::Lexer.currentToken_1 (param $self i64) (result i64)
    (call $src::lexer::lexer::Lexer.property$2_1 (local.get $self))
  )
  (func $src::lexer::lexer::Lexer.currentToken_2 (param $self i64) (param $value i64)
    (call $src::lexer::lexer::Lexer.property$2_2 (local.get $self) (local.get $value))
  )
  (func $src::lexer::lexer::Lexer.property$2_1 (param $self i64) (result i64)
    (call $src::lexer::lexer::Lexer.loadPropertyWithOffset$2_1 (local.get $self) (i32.const 12))
  )
  (func $src::lexer::lexer::Lexer.property$2_2 (param $self i64) (param $value i64)
    (call $src::lexer::lexer::Lexer.storePropertyWithOffset$2_1 (local.get $self) (local.get $value) (i32.const 12))
  )
  (func $src::lexer::lexer::Lexer.loadPropertyWithOffset$2_1 (param $self i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))))
  )
  (func $src::lexer::lexer::Lexer.storePropertyWithOffset$2_1 (param $self i64) (param $value i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $self))) (local.get $value))
  )
  (func $src::lexer::lexer::Lexer.store_1 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))) (local.get $rhs))
  )
  (func $src::lexer::lexer::Lexer.load_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (local.get $offset) (call $system::core::native::addressFromRef_1 (local.get $lhs))))
  )
  (func $src::lexer::lexer::instantiate_1 (param $str i64)
    (block $B1
      (global.set $src::lexer::lexer::instance (call $src::lexer::lexer::Lexer.apply_3 (local.get $str)))
    )
  )
  (func $src::lexer::lexer::eat_1 (result i64)
    (local $src::lexer::lexer::tok i64)
    (local $var$1 i64)
    (local $var$2 i64)
    (block $B3 (result i64)
      (local.set $var$1 (global.get $src::lexer::lexer::instance))
      (block $B3_0
          (block $B3_1
              (br_if $B3_0 (call $src::lexer::lexer::Lexer.is_1 (local.get $var$1)))
            )
          (i64.const 0x00000004000000a9)
          (br $B3)
        )
      (block $B1 (result i64)
          (local.set $src::lexer::lexer::tok (call $src::lexer::lexer::Lexer.eat_1 (local.get $var$1)))
          (block $B2 (result i64)
              (local.set $var$2 (call $src::lexer::tokens::Token.tokenType_1 (local.get $src::lexer::lexer::tok)))
              (block $B2_0
                  (block $B2_1
                      (br_if $B2_0 (call $src::lexer::tokens::EndOfFile.is_1 (local.get $var$2)))
                    )
                  (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $system::core::string::string.++_1 (call $src::lexer::tokens::TokenType.toString_1 (call $src::lexer::tokens::Token.tokenType_1 (local.get $src::lexer::lexer::tok))) (i64.const 0x000000040000009b)) (call $src::lexer::tokens::Token.textIn_1 (local.get $src::lexer::lexer::tok) (call $src::lexer::lexer::Lexer.source_1 (local.get $var$1)))) (i64.const 0x00000004000000a2))
                  (br $B2)
                )
              (i64.const 0x0000000400000084)
              (br $B2)
            )
        )
      (br $B3)
    )
  )
  (func $src::lexer::lexer::Lexer.apply_3 (param $str i64) (result i64)
    (block $B1 (result i64)
      (call $src::lexer::lexer::Lexer.apply_1 (local.get $str) (call $system::core::i32::i32.as_4 (i32.const 0)) (call $src::helpers::Nil.apply_1))
    )
  )
  (func $src::lexer::lexer::Lexer.hasNext_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.<_1 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)) (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
  )
  (func $src::lexer::lexer::Lexer.peekChar_1 (param $self i64) (result i32)
    (call $system::core::u16::u16.as_2 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (call $system::core::u32::u32.+_1 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)) (call $system::core::i32::i32.as_4 (i32.const 1)))))
  )
  (func $src::lexer::lexer::Lexer.head_1 (param $self i64) (result i32)
    (call $system::core::u16::u16.as_2 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (call $src::lexer::lexer::Lexer.pos_1 (local.get $self))))
  )
  (func $src::lexer::lexer::Lexer.seek_1 (param $self i64) (param $position i32)
    (block $B1
      (if $IF2 (call $system::core::u32::u32.!=_1 (local.get $position) (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
          (then
            (block $B3
                (call $src::lexer::lexer::Lexer.currentToken_2 (local.get $self) (call $src::helpers::Nil.apply_1))
                (call $src::lexer::lexer::Lexer.pos_2 (local.get $self) (local.get $position))
              )
          )
          (else)
        )
    )
  )
  (func $src::lexer::lexer::Lexer.next_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $src::lexer::lexer::Lexer.pos_2 (local.get $self) (call $system::core::u32::u32.+_1 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)) (call $system::core::i32::i32.as_4 (i32.const 1))))
      (call $src::lexer::lexer::Lexer.currentToken_2 (local.get $self) (call $src::helpers::Nil.apply_1))
      (call $system::core::u16::u16.as_2 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (call $src::lexer::lexer::Lexer.pos_1 (local.get $self))))
    )
  )
  (func $src::lexer::lexer::Lexer.tokenStart_1 (param $self i64) (param $char i32) (result i64)
    (local $var$2 i32)
    (local $var$3 i32)
    (block $B6 (result i64)
      (local.set $var$2 (local.get $char))
      (block $B6_0
          (block $B6_1
              (block $B6_2
                  (block $B6_3
                      (block $B6_4
                          (block $B6_5
                              (block $B6_6
                                  (block $B6_7
                                      (block $B6_8
                                          (block $B6_9
                                              (block $B6_10
                                                  (block $B6_11
                                                      (block $B6_12
                                                          (block $B6_13
                                                              (block $B6_14
                                                                  (block $B6_15
                                                                      (block $B6_16
                                                                          (block $B6_17
                                                                              (block $B6_18
                                                                                  (block $B6_19
                                                                                      (block $B6_20
                                                                                          (block $B6_21
                                                                                              (block $B6_22
                                                                                                  (block $B6_23
                                                                                                      (block $B6_24
                                                                                                          (block $B6_25
                                                                                                              (block $B6_26
                                                                                                                  (block $B6_27
                                                                                                                      (block $B6_28
                                                                                                                          (block $B6_29
                                                                                                                              (block $B6_30
                                                                                                                                  (block $B6_31
                                                                                                                                      (block $B6_32
                                                                                                                                          (br_if $B6_0 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x09)))
                                                                                                                                          (br_if $B6_1 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x0A)))
                                                                                                                                          (br_if $B6_2 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x0D)))
                                                                                                                                          (br_if $B6_3 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x20)))
                                                                                                                                          (br_if $B6_4 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x21)))
                                                                                                                                          (br_if $B6_5 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x22)))
                                                                                                                                          (br_if $B6_6 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x23)))
                                                                                                                                          (br_if $B6_7 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x24)))
                                                                                                                                          (br_if $B6_8 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x25)))
                                                                                                                                          (br_if $B6_9 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x26)))
                                                                                                                                          (br_if $B6_10 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x28)))
                                                                                                                                          (br_if $B6_11 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x29)))
                                                                                                                                          (br_if $B6_12 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x2A)))
                                                                                                                                          (br_if $B6_13 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x2B)))
                                                                                                                                          (br_if $B6_14 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x2C)))
                                                                                                                                          (br_if $B6_15 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x2D)))
                                                                                                                                          (br_if $B6_16 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x2E)))
                                                                                                                                          (br_if $B6_17 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x2F)))
                                                                                                                                          (br_if $B6_18 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x3A)))
                                                                                                                                          (br_if $B6_19 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x3B)))
                                                                                                                                          (br_if $B6_20 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x3C)))
                                                                                                                                          (br_if $B6_21 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x3D)))
                                                                                                                                          (br_if $B6_22 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x3E)))
                                                                                                                                          (br_if $B6_23 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x3F)))
                                                                                                                                          (br_if $B6_24 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x5b)))
                                                                                                                                          (br_if $B6_25 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x5E)))
                                                                                                                                          (br_if $B6_26 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x5d)))
                                                                                                                                          (br_if $B6_27 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x5F)))
                                                                                                                                          (br_if $B6_28 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x7b)))
                                                                                                                                          (br_if $B6_29 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x7C)))
                                                                                                                                          (br_if $B6_30 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x7E)))
                                                                                                                                          (br_if $B6_31 (call $system::core::u32::u32.==_1 (local.get $var$2) (i32.const 0x7d)))
                                                                                                                                        )
                                                                                                                                      (block $B3 (result i64)
                                                                                                                                          (if $IF4 (result i64) (call $src::lexer::lexer::Lexer.isNumber_1 (local.get $char))
                                                                                                                                              (then
                                                                                                                                                (call $src::lexer::tokens::NumberLiteral.apply_1)
                                                                                                                                              )
                                                                                                                                              (else
                                                                                                                                                (if $IF5 (result i64) (call $src::lexer::unicode::isUnicodeLeter_1 (local.get $char))
                                                                                                                                                    (then
                                                                                                                                                      (call $src::lexer::tokens::Identifier.apply_1)
                                                                                                                                                    )
                                                                                                                                                    (else
                                                                                                                                                      (call $src::lexer::tokens::Unknown.apply_1)
                                                                                                                                                    )
                                                                                                                                                  )
                                                                                                                                              )
                                                                                                                                            )
                                                                                                                                        )
                                                                                                                                      (br $B6)
                                                                                                                                    )
                                                                                                                                  (call $src::lexer::tokens::CurlyBracesClose.apply_1)
                                                                                                                                  (br $B6)
                                                                                                                                )
                                                                                                                              (call $src::lexer::tokens::Operator.apply_1)
                                                                                                                              (br $B6)
                                                                                                                            )
                                                                                                                          (call $src::lexer::tokens::Operator.apply_1)
                                                                                                                          (br $B6)
                                                                                                                        )
                                                                                                                      (call $src::lexer::tokens::CurlyBracesOpen.apply_1)
                                                                                                                      (br $B6)
                                                                                                                    )
                                                                                                                  (call $src::lexer::tokens::Identifier.apply_1)
                                                                                                                  (br $B6)
                                                                                                                )
                                                                                                              (call $src::lexer::tokens::VectorClose.apply_1)
                                                                                                              (br $B6)
                                                                                                            )
                                                                                                          (call $src::lexer::tokens::Operator.apply_1)
                                                                                                          (br $B6)
                                                                                                        )
                                                                                                      (call $src::lexer::tokens::VectorOpen.apply_1)
                                                                                                      (br $B6)
                                                                                                    )
                                                                                                  (call $src::lexer::tokens::Identifier.apply_1)
                                                                                                  (br $B6)
                                                                                                )
                                                                                              (call $src::lexer::tokens::Operator.apply_1)
                                                                                              (br $B6)
                                                                                            )
                                                                                          (call $src::lexer::tokens::Operator.apply_1)
                                                                                          (br $B6)
                                                                                        )
                                                                                      (call $src::lexer::tokens::Operator.apply_1)
                                                                                      (br $B6)
                                                                                    )
                                                                                  (call $src::lexer::tokens::NewLine.apply_1)
                                                                                  (br $B6)
                                                                                )
                                                                              (call $src::lexer::tokens::Operator.apply_1)
                                                                              (br $B6)
                                                                            )
                                                                          (if $IF1 (result i64) (call $system::core::boolean::boolean.!_1 (call $src::lexer::lexer::Lexer.hasNext_1 (local.get $self)))
                                                                              (then
                                                                                (call $src::lexer::tokens::Operator.apply_1)
                                                                              )
                                                                              (else
                                                                                (block $B2 (result i64)
                                                                                    (local.set $var$3 (call $src::lexer::lexer::Lexer.peekChar_1 (local.get $self)))
                                                                                    (block $B2_0
                                                                                        (block $B2_1
                                                                                            (block $B2_2
                                                                                                (br_if $B2_0 (call $system::core::u32::u32.==_1 (local.get $var$3) (i32.const 0x2A)))
                                                                                                (br_if $B2_1 (call $system::core::u32::u32.==_1 (local.get $var$3) (i32.const 0x2F)))
                                                                                              )
                                                                                            (call $src::lexer::tokens::Operator.apply_1)
                                                                                            (br $B2)
                                                                                          )
                                                                                        (call $src::lexer::tokens::LineComment.apply_1)
                                                                                        (br $B2)
                                                                                      )
                                                                                    (call $src::lexer::tokens::MultiLineComment.apply_1)
                                                                                    (br $B2)
                                                                                  )
                                                                              )
                                                                            )
                                                                          (br $B6)
                                                                        )
                                                                      (call $src::lexer::tokens::Operator.apply_1)
                                                                      (br $B6)
                                                                    )
                                                                  (call $src::lexer::tokens::Operator.apply_1)
                                                                  (br $B6)
                                                                )
                                                              (call $src::lexer::tokens::Comma.apply_1)
                                                              (br $B6)
                                                            )
                                                          (call $src::lexer::tokens::Operator.apply_1)
                                                          (br $B6)
                                                        )
                                                      (call $src::lexer::tokens::Operator.apply_1)
                                                      (br $B6)
                                                    )
                                                  (call $src::lexer::tokens::ParenthesesClose.apply_1)
                                                  (br $B6)
                                                )
                                              (call $src::lexer::tokens::ParenthesesOpen.apply_1)
                                              (br $B6)
                                            )
                                          (call $src::lexer::tokens::Operator.apply_1)
                                          (br $B6)
                                        )
                                      (call $src::lexer::tokens::Operator.apply_1)
                                      (br $B6)
                                    )
                                  (call $src::lexer::tokens::Identifier.apply_1)
                                  (br $B6)
                                )
                              (call $src::lexer::tokens::MacroDecoration.apply_1)
                              (br $B6)
                            )
                          (call $src::lexer::tokens::StringLiteral.apply_1)
                          (br $B6)
                        )
                      (call $src::lexer::tokens::Operator.apply_1)
                      (br $B6)
                    )
                  (call $src::lexer::tokens::Whitespace.apply_1)
                  (br $B6)
                )
              (call $src::lexer::tokens::NewLine.apply_1)
              (br $B6)
            )
          (call $src::lexer::tokens::NewLine.apply_1)
          (br $B6)
        )
      (call $src::lexer::tokens::Whitespace.apply_1)
      (br $B6)
    )
  )
  (func $src::lexer::lexer::Lexer.peek_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::t i64)
    (local $var$2 i64)
    (local $var$3 i64)
    (block $B1 (result i64)
      (block $B6 (result i64)
          (local.set $var$2 (call $src::lexer::lexer::Lexer.currentToken_1 (local.get $self)))
          (block $B6_0
              (block $B6_1
                  (br_if $B6_0 (call $src::helpers::Nil.is_1 (local.get $var$2)))
                  (br_if $B6_1 (call $src::lexer::tokens::Token.is_1 (local.get $var$2)))
                )
              (local.get $var$2)
              (br $B6)
            )
          (block $B2 (result i64)
              (local.set $src::lexer::lexer::t (if $IF3 (result i64) (call $system::core::u32::u32.==_1 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)) (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
                        (then
                          (block $B4 (result i64)
                              (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::EndOfFile.apply_1) (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))) (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
                            )
                        )
                        (else
                          (block $B5 (result i64)
                              (local.set $var$3 (call $src::lexer::lexer::Lexer.tokenStart_1 (local.get $self) (call $src::lexer::lexer::Lexer.head_1 (local.get $self))))
                              (block $B5_0
                                  (block $B5_1
                                      (block $B5_2
                                          (block $B5_3
                                              (block $B5_4
                                                  (block $B5_5
                                                      (block $B5_6
                                                          (block $B5_7
                                                              (block $B5_8
                                                                  (block $B5_9
                                                                      (block $B5_10
                                                                          (block $B5_11
                                                                              (block $B5_12
                                                                                  (block $B5_13
                                                                                      (block $B5_14
                                                                                          (block $B5_15
                                                                                              (block $B5_16
                                                                                                  (br_if $B5_0 (call $src::lexer::tokens::Whitespace.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_1 (call $src::lexer::tokens::NewLine.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_2 (call $src::lexer::tokens::StringLiteral.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_3 (call $src::lexer::tokens::Identifier.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_4 (call $src::lexer::tokens::MacroDecoration.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_5 (call $src::lexer::tokens::ParenthesesOpen.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_6 (call $src::lexer::tokens::ParenthesesClose.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_7 (call $src::lexer::tokens::CurlyBracesOpen.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_8 (call $src::lexer::tokens::CurlyBracesClose.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_9 (call $src::lexer::tokens::Comma.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_10 (call $src::lexer::tokens::VectorOpen.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_11 (call $src::lexer::tokens::VectorClose.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_12 (call $src::lexer::tokens::LineComment.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_13 (call $src::lexer::tokens::MultiLineComment.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_14 (call $src::lexer::tokens::Operator.is_1 (local.get $var$3)))
                                                                                                  (br_if $B5_15 (call $src::lexer::tokens::NumberLiteral.is_1 (local.get $var$3)))
                                                                                                )
                                                                                              (call $src::lexer::lexer::Lexer.eatUnknown_1 (local.get $self))
                                                                                              (br $B5)
                                                                                            )
                                                                                          (call $src::lexer::lexer::Lexer.eatNumber_1 (local.get $self))
                                                                                          (br $B5)
                                                                                        )
                                                                                      (call $src::lexer::lexer::Lexer.eatOperator_1 (local.get $self))
                                                                                      (br $B5)
                                                                                    )
                                                                                  (call $src::lexer::lexer::Lexer.eatMultiLineComment_1 (local.get $self))
                                                                                  (br $B5)
                                                                                )
                                                                              (call $src::lexer::lexer::Lexer.eatLineComment_1 (local.get $self))
                                                                              (br $B5)
                                                                            )
                                                                          (call $src::lexer::lexer::Lexer.eatSingleChar_1 (local.get $self) (call $src::lexer::tokens::VectorClose.apply_1))
                                                                          (br $B5)
                                                                        )
                                                                      (call $src::lexer::lexer::Lexer.eatSingleChar_1 (local.get $self) (call $src::lexer::tokens::VectorOpen.apply_1))
                                                                      (br $B5)
                                                                    )
                                                                  (call $src::lexer::lexer::Lexer.eatSingleChar_1 (local.get $self) (call $src::lexer::tokens::Comma.apply_1))
                                                                  (br $B5)
                                                                )
                                                              (call $src::lexer::lexer::Lexer.eatSingleChar_1 (local.get $self) (call $src::lexer::tokens::CurlyBracesClose.apply_1))
                                                              (br $B5)
                                                            )
                                                          (call $src::lexer::lexer::Lexer.eatSingleChar_1 (local.get $self) (call $src::lexer::tokens::CurlyBracesOpen.apply_1))
                                                          (br $B5)
                                                        )
                                                      (call $src::lexer::lexer::Lexer.eatSingleChar_1 (local.get $self) (call $src::lexer::tokens::ParenthesesClose.apply_1))
                                                      (br $B5)
                                                    )
                                                  (call $src::lexer::lexer::Lexer.eatSingleChar_1 (local.get $self) (call $src::lexer::tokens::ParenthesesOpen.apply_1))
                                                  (br $B5)
                                                )
                                              (call $src::lexer::lexer::Lexer.eatMacroDecoration_1 (local.get $self))
                                              (br $B5)
                                            )
                                          (call $src::lexer::lexer::Lexer.eatIdentifier_1 (local.get $self))
                                          (br $B5)
                                        )
                                      (call $src::lexer::lexer::Lexer.eatString_1 (local.get $self))
                                      (br $B5)
                                    )
                                  (call $src::lexer::lexer::Lexer.eatNewLine_1 (local.get $self))
                                  (br $B5)
                                )
                              (call $src::lexer::lexer::Lexer.eatWhitespace_1 (local.get $self))
                              (br $B5)
                            )
                        )
                      ))
              (call $src::lexer::lexer::Lexer.currentToken_2 (local.get $self) (local.get $src::lexer::lexer::t))
              (local.get $src::lexer::lexer::t)
            )
          (br $B6)
        )
    )
  )
  (func $src::lexer::lexer::Lexer.eat_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::eaten i64)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::eaten (call $src::lexer::lexer::Lexer.peek_1 (local.get $self)))
      (call $src::lexer::lexer::Lexer.seek_1 (local.get $self) (call $src::lexer::tokens::Token.end_1 (local.get $src::lexer::lexer::eaten)))
      (local.get $src::lexer::lexer::eaten)
    )
  )
  (func $src::lexer::lexer::Lexer.eatMacroDecoration_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start i32)
    (local $src::lexer::lexer::end i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::start) (call $system::core::i32::i32.as_4 (i32.const 1))))
      (if $IF2 (result i64) (call $system::core::boolean::boolean.&&_1 (call $src::lexer::lexer::Lexer.hasNext_1 (local.get $self)) (call $system::core::u32::u32.==_1 (call $src::lexer::lexer::Lexer.peekChar_1 (local.get $self)) (i32.const 0x5b)))
          (then
            (block $B3 (result i64)
                (local.set $src::lexer::lexer::end (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end) (call $system::core::i32::i32.as_4 (i32.const 1))))
                (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::MacroDecoration.apply_1) (local.get $src::lexer::lexer::start) (local.get $src::lexer::lexer::end))
              )
          )
          (else
            (block $B4 (result i64)
                (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::Unknown.apply_1) (local.get $src::lexer::lexer::start) (local.get $src::lexer::lexer::end))
              )
          )
        )
    )
  )
  (func $src::lexer::lexer::Lexer.eatSingleChar_1 (param $self i64) (param $tokenType i64) (result i64)
    (local $src::lexer::lexer::start_1 i32)
    (local $src::lexer::lexer::end_1 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_1 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_1 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::start_1) (call $system::core::i32::i32.as_4 (i32.const 1))))
      (call $src::lexer::tokens::Token.apply_1 (local.get $tokenType) (local.get $src::lexer::lexer::start_1) (local.get $src::lexer::lexer::end_1))
    )
  )
  (func $src::lexer::lexer::Lexer.eatWhitespace_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_2 i32)
    (local $src::lexer::lexer::end_2 i32)
    (local $src::lexer::lexer::len i32)
    (local $src::lexer::lexer::char_1 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_2 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_2 (local.get $src::lexer::lexer::start_2))
      (local.set $src::lexer::lexer::len (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_2) (local.get $src::lexer::lexer::len))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::char_1 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_2)))
                  (if $IF5 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_1) (i32.const 0x20))
                      (then
                        (if $IF6 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_1) (i32.const 0x9))
                            (then
                              (br $Break2)
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::end_2 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_2) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (br $Loop2)
                )
            )
        )
      (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::Whitespace.apply_1) (local.get $src::lexer::lexer::start_2) (local.get $src::lexer::lexer::end_2))
    )
  )
  (func $src::lexer::lexer::Lexer.eatOperator_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_3 i32)
    (local $src::lexer::lexer::end_3 i32)
    (local $src::lexer::lexer::len_1 i32)
    (local $src::lexer::lexer::char_2 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_3 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_3 (local.get $src::lexer::lexer::start_3))
      (local.set $src::lexer::lexer::len_1 (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_3) (local.get $src::lexer::lexer::len_1))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::char_2 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_3)))
                  (if $IF5 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x2e))
                      (then
                        (if $IF6 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x21))
                            (then
                              (if $IF7 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x7e))
                                  (then
                                    (if $IF8 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x5e))
                                        (then
                                          (if $IF9 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x25))
                                              (then
                                                (if $IF10 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x26))
                                                    (then
                                                      (if $IF11 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x7c))
                                                          (then
                                                            (if $IF12 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x2f))
                                                                (then
                                                                  (if $IF13 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x2a))
                                                                      (then
                                                                        (if $IF14 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x3c))
                                                                            (then
                                                                              (if $IF15 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x3e))
                                                                                  (then
                                                                                    (if $IF16 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x3d))
                                                                                        (then
                                                                                          (if $IF17 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x2b))
                                                                                              (then
                                                                                                (if $IF18 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x2d))
                                                                                                    (then
                                                                                                      (if $IF19 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_2) (i32.const 0x3a))
                                                                                                          (then
                                                                                                            (br $Break2)
                                                                                                          )
                                                                                                          (else)
                                                                                                        )
                                                                                                    )
                                                                                                    (else)
                                                                                                  )
                                                                                              )
                                                                                              (else)
                                                                                            )
                                                                                        )
                                                                                        (else)
                                                                                      )
                                                                                  )
                                                                                  (else)
                                                                                )
                                                                            )
                                                                            (else)
                                                                          )
                                                                      )
                                                                      (else)
                                                                    )
                                                                )
                                                                (else)
                                                              )
                                                          )
                                                          (else)
                                                        )
                                                    )
                                                    (else)
                                                  )
                                              )
                                              (else)
                                            )
                                        )
                                        (else)
                                      )
                                  )
                                  (else)
                                )
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::end_3 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_3) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (br $Loop2)
                )
            )
        )
      (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::Operator.apply_1) (local.get $src::lexer::lexer::start_3) (local.get $src::lexer::lexer::end_3))
    )
  )
  (func $src::lexer::lexer::Lexer.eatLineComment_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_4 i32)
    (local $src::lexer::lexer::end_4 i32)
    (local $src::lexer::lexer::len_2 i32)
    (local $src::lexer::lexer::char_3 i32)
    (local $var$5 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_4 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_4 (local.get $src::lexer::lexer::start_4))
      (local.set $src::lexer::lexer::len_2 (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_4) (local.get $src::lexer::lexer::len_2))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::char_3 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_4)))
                  (local.set $src::lexer::lexer::end_4 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_4) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (block $B5
                      (local.set $var$5 (local.get $src::lexer::lexer::char_3))
                      (block $B5_0
                          (block $B5_1
                              (block $B5_2
                                  (block $B5_3
                                      (block $B5_4
                                          (br_if $B5_0 (call $system::core::u16::u16.==_1 (local.get $var$5) (i32.const 0xA)))
                                          (br_if $B5_1 (call $system::core::u16::u16.==_1 (local.get $var$5) (i32.const 0xD)))
                                          (br_if $B5_2 (call $system::core::u16::u16.==_1 (local.get $var$5) (i32.const 0x2028)))
                                          (br_if $B5_3 (call $system::core::u16::u16.==_1 (local.get $var$5) (i32.const 0x2029)))
                                        )
                                      (br $Loop2)
                                      (br $B5)
                                    )
                                  (br $Break2)
                                  (br $B5)
                                )
                              (br $Break2)
                              (br $B5)
                            )
                          (br $Break2)
                          (br $B5)
                        )
                      (br $Break2)
                      (br $B5)
                    )
                )
            )
        )
      (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::LineComment.apply_1) (local.get $src::lexer::lexer::start_4) (local.get $src::lexer::lexer::end_4))
    )
  )
  (func $src::lexer::lexer::Lexer.eatMultiLineComment_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_5 i32)
    (local $src::lexer::lexer::end_5 i32)
    (local $src::lexer::lexer::len_3 i32)
    (local $src::lexer::lexer::char_4 i32)
    (local $src::lexer::lexer::next i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_5 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_5 (local.get $src::lexer::lexer::start_5))
      (local.set $src::lexer::lexer::len_3 (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_5) (local.get $src::lexer::lexer::len_3))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::char_4 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_5)))
                  (local.set $src::lexer::lexer::end_5 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_5) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (if $IF5 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::char_4) (i32.const 0x2A))
                      (then
                        (block $B6
                            (if $IF7 (call $system::core::u32::u32.<_1 (local.get $src::lexer::lexer::end_5) (local.get $src::lexer::lexer::len_3))
                                (then
                                  (block $B8
                                      (local.set $src::lexer::lexer::next (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_5)))
                                      (if $IF9 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::next) (i32.const 0x2F))
                                          (then
                                            (block $B10
                                                (local.set $src::lexer::lexer::end_5 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_5) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                                (br $Break2)
                                              )
                                          )
                                          (else)
                                        )
                                    )
                                )
                                (else)
                              )
                          )
                      )
                      (else)
                    )
                  (br $Loop2)
                )
            )
        )
      (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::MultiLineComment.apply_1) (local.get $src::lexer::lexer::start_5) (local.get $src::lexer::lexer::end_5))
    )
  )
  (func $src::lexer::lexer::Lexer.eatUnknown_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_6 i32)
    (local $src::lexer::lexer::end_6 i32)
    (local $src::lexer::lexer::len_4 i32)
    (local $src::lexer::lexer::char_5 i32)
    (local $var$5 i64)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_6 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_6 (local.get $src::lexer::lexer::start_6))
      (local.set $src::lexer::lexer::len_4 (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_6) (local.get $src::lexer::lexer::len_4))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::char_5 (call $system::core::u16::u16.as_2 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_6))))
                  (block $B6
                      (local.set $var$5 (call $src::lexer::lexer::Lexer.tokenStart_1 (local.get $self) (local.get $src::lexer::lexer::char_5)))
                      (block $B6_0
                          (block $B6_1
                              (br_if $B6_0 (call $src::lexer::tokens::Unknown.is_1 (local.get $var$5)))
                            )
                          (br $Break2)
                          (br $B6)
                        )
                      (block $B5
                          (local.set $src::lexer::lexer::end_6 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_6) (call $system::core::i32::i32.as_4 (i32.const 1))))
                          (br $Loop2)
                        )
                      (br $B6)
                    )
                )
            )
        )
      (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::Unknown.apply_1) (local.get $src::lexer::lexer::start_6) (local.get $src::lexer::lexer::end_6))
    )
  )
  (func $src::lexer::lexer::Lexer.eatString_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_7 i32)
    (local $src::lexer::lexer::end_7 i32)
    (local $src::lexer::lexer::len_5 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_7 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_7 (local.get $src::lexer::lexer::start_7))
      (local.set $src::lexer::lexer::len_5 (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_7) (local.get $src::lexer::lexer::len_5))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (if $IF5 (call $system::core::boolean::boolean.&&_1 (call $system::core::u16::u16.==_1 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_7)) (i32.const 0x22)) (call $system::core::u32::u32.!=_1 (local.get $src::lexer::lexer::start_7) (local.get $src::lexer::lexer::end_7)))
                      (then
                        (block $B6
                            (local.set $src::lexer::lexer::end_7 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_7) (call $system::core::i32::i32.as_4 (i32.const 1))))
                            (br $Break2)
                          )
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::end_7 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_7) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (br $Loop2)
                )
            )
        )
      (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::StringLiteral.apply_1) (local.get $src::lexer::lexer::start_7) (local.get $src::lexer::lexer::end_7))
    )
  )
  (func $src::lexer::lexer::Lexer.eatNumber_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_8 i32)
    (local $src::lexer::lexer::end_8 i32)
    (local $src::lexer::lexer::len_6 i32)
    (local $src::lexer::lexer::char_6 i32)
    (local $src::lexer::lexer::next_1 i32)
    (local $src::lexer::lexer::char_7 i32)
    (local $src::lexer::lexer::char_8 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_8 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_8 (local.get $src::lexer::lexer::start_8))
      (local.set $src::lexer::lexer::len_6 (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (local.set $src::lexer::lexer::char_6 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_8)))
      (if $IF2 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::char_6) (i32.const 0x30))
          (then
            (block $B3
                (local.set $src::lexer::lexer::end_8 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_8) (call $system::core::i32::i32.as_4 (i32.const 1))))
                (local.set $src::lexer::lexer::next_1 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_8)))
                (if $IF4 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::next_1) (i32.const 0x78)) (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::next_1) (i32.const 0x58)))
                    (then
                      (block $B5
                          (local.set $src::lexer::lexer::end_8 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_8) (call $system::core::i32::i32.as_4 (i32.const 1))))
                          (block $Break6
                              (loop $Loop6
                                  (block $B7
                                      (if $IF8 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_8) (local.get $src::lexer::lexer::len_6))
                                          (then
                                            (br $Break6)
                                          )
                                          (else)
                                        )
                                      (if $IF9 (call $system::core::boolean::boolean.!_1 (call $src::lexer::lexer::Lexer.isHex_1 (call $system::core::u16::u16.as_2 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_8)))))
                                          (then
                                            (br $Break6)
                                          )
                                          (else)
                                        )
                                      (local.set $src::lexer::lexer::end_8 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_8) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                      (br $Loop6)
                                    )
                                )
                            )
                        )
                    )
                    (else
                      (if $IF10 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::next_1) (i32.const 0x62)) (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::next_1) (i32.const 0x42)))
                          (then
                            (block $B11
                                (local.set $src::lexer::lexer::end_8 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_8) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                (block $Break12
                                    (loop $Loop12
                                        (block $B13
                                            (if $IF14 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_8) (local.get $src::lexer::lexer::len_6))
                                                (then
                                                  (br $Break12)
                                                )
                                                (else)
                                              )
                                            (local.set $src::lexer::lexer::char_7 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_8)))
                                            (if $IF15 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_7) (i32.const 0x30))
                                                (then
                                                  (if $IF16 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_7) (i32.const 0x31))
                                                      (then
                                                        (br $Break12)
                                                      )
                                                      (else)
                                                    )
                                                )
                                                (else)
                                              )
                                            (local.set $src::lexer::lexer::end_8 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_8) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                            (br $Loop12)
                                          )
                                      )
                                  )
                              )
                          )
                          (else
                            (if $IF17 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::next_1) (i32.const 0x6f)) (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::next_1) (i32.const 0x4f)))
                                (then
                                  (block $B18
                                      (local.set $src::lexer::lexer::end_8 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_8) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                      (block $Break19
                                          (loop $Loop19
                                              (block $B20
                                                  (if $IF21 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_8) (local.get $src::lexer::lexer::len_6))
                                                      (then
                                                        (br $Break19)
                                                      )
                                                      (else)
                                                    )
                                                  (local.set $src::lexer::lexer::char_8 (call $system::core::u16::u16.as_2 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_8))))
                                                  (if $IF22 (call $system::core::boolean::boolean.||_1 (call $system::core::u32::u32.<_1 (local.get $src::lexer::lexer::char_8) (i32.const 0x30)) (call $system::core::u32::u32.>_1 (local.get $src::lexer::lexer::char_8) (i32.const 0x37)))
                                                      (then
                                                        (br $Break19)
                                                      )
                                                      (else)
                                                    )
                                                  (local.set $src::lexer::lexer::end_8 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_8) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                                  (br $Loop19)
                                                )
                                            )
                                        )
                                    )
                                )
                                (else
                                  (block $B23
                                      (local.set $src::lexer::lexer::end_8 (call $src::lexer::lexer::Lexer.readFloatNumberEndPoition_1 (local.get $self) (local.get $src::lexer::lexer::start_8) (local.get $src::lexer::lexer::len_6)))
                                    )
                                )
                              )
                          )
                        )
                    )
                  )
              )
          )
          (else
            (block $B24
                (local.set $src::lexer::lexer::end_8 (call $src::lexer::lexer::Lexer.readFloatNumberEndPoition_1 (local.get $self) (local.get $src::lexer::lexer::start_8) (local.get $src::lexer::lexer::len_6)))
              )
          )
        )
      (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::NumberLiteral.apply_1) (local.get $src::lexer::lexer::start_8) (local.get $src::lexer::lexer::end_8))
    )
  )
  (func $src::lexer::lexer::Lexer.readFloatNumberEndPoition_1 (param $self i64) (param $start i32) (param $len i32) (result i32)
    (local $src::lexer::lexer::end_9 i32)
    (local $src::lexer::lexer::hasExponent i32)
    (local $src::lexer::lexer::hasDecimalPoint i32)
    (local $src::lexer::lexer::char_9 i32)
    (local $src::lexer::lexer::char_10 i32)
    (block $B1 (result i32)
      (local.set $src::lexer::lexer::end_9 (local.get $start))
      (local.set $src::lexer::lexer::hasExponent (i32.const 0))
      (local.set $src::lexer::lexer::hasDecimalPoint (i32.const 0))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_9) (local.get $len))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::char_9 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_9)))
                  (if $IF5 (call $system::core::boolean::boolean.!_1 (call $src::lexer::lexer::Lexer.isNumber_1 (call $system::core::u16::u16.as_2 (local.get $src::lexer::lexer::char_9))))
                      (then
                        (if $IF6 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_9) (i32.const 0x2e)) (local.get $src::lexer::lexer::hasDecimalPoint))
                            (then
                              (if $IF7 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_9) (i32.const 0x65)) (local.get $src::lexer::lexer::hasExponent))
                                  (then
                                    (if $IF8 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_9) (i32.const 0x45)) (local.get $src::lexer::lexer::hasExponent))
                                        (then
                                          (br $Break2)
                                        )
                                        (else)
                                      )
                                  )
                                  (else)
                                )
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                  (if $IF9 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::char_9) (i32.const 0x2e))
                      (then
                        (block $B10
                            (local.set $src::lexer::lexer::hasDecimalPoint (i32.const 1))
                          )
                      )
                      (else)
                    )
                  (if $IF11 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::char_9) (i32.const 0x65)) (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::char_9) (i32.const 0x45)))
                      (then
                        (block $B12
                            (local.set $src::lexer::lexer::char_10 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_9) (call $system::core::i32::i32.as_4 (i32.const 1)))))
                            (if $IF13 (call $system::core::boolean::boolean.||_1 (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::char_10) (i32.const 0x2b)) (call $system::core::u16::u16.==_1 (local.get $src::lexer::lexer::char_10) (i32.const 0x2d)))
                                (then
                                  (block $B14
                                      (local.set $src::lexer::lexer::end_9 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_9) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                    )
                                )
                                (else)
                              )
                            (local.set $src::lexer::lexer::hasExponent (i32.const 1))
                            (local.set $src::lexer::lexer::hasDecimalPoint (i32.const 1))
                          )
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::end_9 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_9) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (br $Loop2)
                )
            )
        )
      (local.get $src::lexer::lexer::end_9)
    )
  )
  (func $src::lexer::lexer::Lexer.eatNewLine_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_10 i32)
    (local $src::lexer::lexer::end_10 i32)
    (local $src::lexer::lexer::len_8 i32)
    (local $src::lexer::lexer::char_11 i32)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_10 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_10 (local.get $src::lexer::lexer::start_10))
      (local.set $src::lexer::lexer::len_8 (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_10) (local.get $src::lexer::lexer::len_8))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::char_11 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_10)))
                  (if $IF5 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_11) (i32.const 0xA))
                      (then
                        (if $IF6 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_11) (i32.const 0xD))
                            (then
                              (if $IF7 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_11) (i32.const 0x2028))
                                  (then
                                    (if $IF8 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_11) (i32.const 0x2029))
                                        (then
                                          (if $IF9 (call $system::core::u16::u16.!=_1 (local.get $src::lexer::lexer::char_11) (i32.const 0x3B))
                                              (then
                                                (br $Break2)
                                              )
                                              (else)
                                            )
                                        )
                                        (else)
                                      )
                                  )
                                  (else)
                                )
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::end_10 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_10) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (br $Loop2)
                )
            )
        )
      (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::NewLine.apply_1) (local.get $src::lexer::lexer::start_10) (local.get $src::lexer::lexer::end_10))
    )
  )
  (func $src::lexer::lexer::Lexer.isKeyword_1 (param $str i64) (result i32)
    (local $var$1 i32)
    (local $var$2 i64)
    (block $B18 (result i32)
      (local.set $var$1 (call $system::core::string::string.___1 (local.get $str) (call $system::core::i32::i32.as_4 (i32.const 0))))
      (block $B18_0
          (block $B18_1
              (block $B18_2
                  (block $B18_3
                      (block $B18_4
                          (block $B18_5
                              (block $B18_6
                                  (block $B18_7
                                      (block $B18_8
                                          (block $B18_9
                                              (block $B18_10
                                                  (block $B18_11
                                                      (block $B18_12
                                                          (block $B18_13
                                                              (block $B18_14
                                                                  (block $B18_15
                                                                      (block $B18_16
                                                                          (block $B18_17
                                                                              (br_if $B18_0 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x61)))
                                                                              (br_if $B18_1 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x62)))
                                                                              (br_if $B18_2 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x63)))
                                                                              (br_if $B18_3 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x64)))
                                                                              (br_if $B18_4 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x65)))
                                                                              (br_if $B18_5 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x66)))
                                                                              (br_if $B18_6 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x69)))
                                                                              (br_if $B18_7 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x6c)))
                                                                              (br_if $B18_8 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x6d)))
                                                                              (br_if $B18_9 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x6e)))
                                                                              (br_if $B18_10 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x70)))
                                                                              (br_if $B18_11 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x73)))
                                                                              (br_if $B18_12 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x74)))
                                                                              (br_if $B18_13 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x75)))
                                                                              (br_if $B18_14 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x76)))
                                                                              (br_if $B18_15 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x77)))
                                                                              (br_if $B18_16 (call $system::core::u16::u16.==_1 (local.get $var$1) (i32.const 0x79)))
                                                                            )
                                                                          (i32.const 0)
                                                                          (br $B18)
                                                                        )
                                                                      (block $B17 (result i32)
                                                                          (local.set $var$2 (local.get $str))
                                                                          (block $B17_0
                                                                              (block $B17_1
                                                                                  (br_if $B17_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000350)))
                                                                                )
                                                                              (i32.const 0)
                                                                              (br $B17)
                                                                            )
                                                                          (i32.const 1)
                                                                          (br $B17)
                                                                        )
                                                                      (br $B18)
                                                                    )
                                                                  (block $B16 (result i32)
                                                                      (local.set $var$2 (local.get $str))
                                                                      (block $B16_0
                                                                          (block $B16_1
                                                                              (block $B16_2
                                                                                  (br_if $B16_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000334)))
                                                                                  (br_if $B16_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000343)))
                                                                                )
                                                                              (i32.const 0)
                                                                              (br $B16)
                                                                            )
                                                                          (i32.const 1)
                                                                          (br $B16)
                                                                        )
                                                                      (i32.const 1)
                                                                      (br $B16)
                                                                    )
                                                                  (br $B18)
                                                                )
                                                              (block $B15 (result i32)
                                                                  (local.set $var$2 (local.get $str))
                                                                  (block $B15_0
                                                                      (block $B15_1
                                                                          (block $B15_2
                                                                              (br_if $B15_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000031e)))
                                                                              (br_if $B15_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000329)))
                                                                            )
                                                                          (i32.const 0)
                                                                          (br $B15)
                                                                        )
                                                                      (i32.const 1)
                                                                      (br $B15)
                                                                    )
                                                                  (i32.const 1)
                                                                  (br $B15)
                                                                )
                                                              (br $B18)
                                                            )
                                                          (block $B14 (result i32)
                                                              (local.set $var$2 (local.get $str))
                                                              (block $B14_0
                                                                  (block $B14_1
                                                                      (br_if $B14_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000030f)))
                                                                    )
                                                                  (i32.const 0)
                                                                  (br $B14)
                                                                )
                                                              (i32.const 1)
                                                              (br $B14)
                                                            )
                                                          (br $B18)
                                                        )
                                                      (block $B13 (result i32)
                                                          (local.set $var$2 (local.get $str))
                                                          (block $B13_0
                                                              (block $B13_1
                                                                  (block $B13_2
                                                                      (block $B13_3
                                                                          (block $B13_4
                                                                              (br_if $B13_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000002db)))
                                                                              (br_if $B13_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000002ea)))
                                                                              (br_if $B13_2 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000002f7)))
                                                                              (br_if $B13_3 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000302)))
                                                                            )
                                                                          (i32.const 0)
                                                                          (br $B13)
                                                                        )
                                                                      (i32.const 1)
                                                                      (br $B13)
                                                                    )
                                                                  (i32.const 1)
                                                                  (br $B13)
                                                                )
                                                              (i32.const 1)
                                                              (br $B13)
                                                            )
                                                          (i32.const 1)
                                                          (br $B13)
                                                        )
                                                      (br $B18)
                                                    )
                                                  (block $B12 (result i32)
                                                      (local.set $var$2 (local.get $str))
                                                      (block $B12_0
                                                          (block $B12_1
                                                              (br_if $B12_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000002ca)))
                                                            )
                                                          (i32.const 0)
                                                          (br $B12)
                                                        )
                                                      (i32.const 1)
                                                      (br $B12)
                                                    )
                                                  (br $B18)
                                                )
                                              (block $B11 (result i32)
                                                  (local.set $var$2 (local.get $str))
                                                  (block $B11_0
                                                      (block $B11_1
                                                          (block $B11_2
                                                              (block $B11_3
                                                                  (block $B11_4
                                                                      (br_if $B11_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000027c)))
                                                                      (br_if $B11_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000028f)))
                                                                      (br_if $B11_2 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000002a2)))
                                                                      (br_if $B11_3 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000002b3)))
                                                                    )
                                                                  (i32.const 0)
                                                                  (br $B11)
                                                                )
                                                              (i32.const 1)
                                                              (br $B11)
                                                            )
                                                          (i32.const 1)
                                                          (br $B11)
                                                        )
                                                      (i32.const 1)
                                                      (br $B11)
                                                    )
                                                  (i32.const 1)
                                                  (br $B11)
                                                )
                                              (br $B18)
                                            )
                                          (block $B10 (result i32)
                                              (local.set $var$2 (local.get $str))
                                              (block $B10_0
                                                  (block $B10_1
                                                      (br_if $B10_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000271)))
                                                    )
                                                  (i32.const 0)
                                                  (br $B10)
                                                )
                                              (i32.const 1)
                                              (br $B10)
                                            )
                                          (br $B18)
                                        )
                                      (block $B9 (result i32)
                                          (local.set $var$2 (local.get $str))
                                          (block $B9_0
                                              (block $B9_1
                                                  (br_if $B9_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000262)))
                                                )
                                              (i32.const 0)
                                              (br $B9)
                                            )
                                          (i32.const 1)
                                          (br $B9)
                                        )
                                      (br $B18)
                                    )
                                  (block $B8 (result i32)
                                      (local.set $var$2 (local.get $str))
                                      (block $B8_0
                                          (block $B8_1
                                              (block $B8_2
                                                  (br_if $B8_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000024a)))
                                                  (br_if $B8_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000255)))
                                                )
                                              (i32.const 0)
                                              (br $B8)
                                            )
                                          (i32.const 1)
                                          (br $B8)
                                        )
                                      (i32.const 1)
                                      (br $B8)
                                    )
                                  (br $B18)
                                )
                              (block $B7 (result i32)
                                  (local.set $var$2 (local.get $str))
                                  (block $B7_0
                                      (block $B7_1
                                          (block $B7_2
                                              (block $B7_3
                                                  (block $B7_4
                                                      (block $B7_5
                                                          (br_if $B7_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000211)))
                                                          (br_if $B7_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000021a)))
                                                          (br_if $B7_2 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000227)))
                                                          (br_if $B7_3 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000238)))
                                                          (br_if $B7_4 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000241)))
                                                        )
                                                      (i32.const 0)
                                                      (br $B7)
                                                    )
                                                  (i32.const 1)
                                                  (br $B7)
                                                )
                                              (i32.const 1)
                                              (br $B7)
                                            )
                                          (i32.const 1)
                                          (br $B7)
                                        )
                                      (i32.const 1)
                                      (br $B7)
                                    )
                                  (i32.const 1)
                                  (br $B7)
                                )
                              (br $B18)
                            )
                          (block $B6 (result i32)
                              (local.set $var$2 (local.get $str))
                              (block $B6_0
                                  (block $B6_1
                                      (block $B6_2
                                          (block $B6_3
                                              (block $B6_4
                                                  (br_if $B6_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000001d9)))
                                                  (br_if $B6_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000001e8)))
                                                  (br_if $B6_2 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000001fb)))
                                                  (br_if $B6_3 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000206)))
                                                )
                                              (i32.const 0)
                                              (br $B6)
                                            )
                                          (i32.const 1)
                                          (br $B6)
                                        )
                                      (i32.const 1)
                                      (br $B6)
                                    )
                                  (i32.const 1)
                                  (br $B6)
                                )
                              (i32.const 1)
                              (br $B6)
                            )
                          (br $B18)
                        )
                      (block $B5 (result i32)
                          (local.set $var$2 (local.get $str))
                          (block $B5_0
                              (block $B5_1
                                  (block $B5_2
                                      (block $B5_3
                                          (block $B5_4
                                              (br_if $B5_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000019b)))
                                              (br_if $B5_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000001ac)))
                                              (br_if $B5_2 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000001b9)))
                                              (br_if $B5_3 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000001c6)))
                                            )
                                          (i32.const 0)
                                          (br $B5)
                                        )
                                      (i32.const 1)
                                      (br $B5)
                                    )
                                  (i32.const 1)
                                  (br $B5)
                                )
                              (i32.const 1)
                              (br $B5)
                            )
                          (i32.const 1)
                          (br $B5)
                        )
                      (br $B18)
                    )
                  (block $B4 (result i32)
                      (local.set $var$2 (local.get $str))
                      (block $B4_0
                          (block $B4_1
                              (block $B4_2
                                  (block $B4_3
                                      (block $B4_4
                                          (br_if $B4_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000015f)))
                                          (br_if $B4_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000172)))
                                          (br_if $B4_2 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000183)))
                                          (br_if $B4_3 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000192)))
                                        )
                                      (i32.const 0)
                                      (br $B4)
                                    )
                                  (i32.const 1)
                                  (br $B4)
                                )
                              (i32.const 1)
                              (br $B4)
                            )
                          (i32.const 1)
                          (br $B4)
                        )
                      (i32.const 1)
                      (br $B4)
                    )
                  (br $B18)
                )
              (block $B3 (result i32)
                  (local.set $var$2 (local.get $str))
                  (block $B3_0
                      (block $B3_1
                          (block $B3_2
                              (block $B3_3
                                  (block $B3_4
                                      (br_if $B3_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000011f)))
                                      (br_if $B3_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000012c)))
                                      (br_if $B3_2 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000013b)))
                                      (br_if $B3_3 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x000000040000014a)))
                                    )
                                  (i32.const 0)
                                  (br $B3)
                                )
                              (i32.const 1)
                              (br $B3)
                            )
                          (i32.const 1)
                          (br $B3)
                        )
                      (i32.const 1)
                      (br $B3)
                    )
                  (i32.const 1)
                  (br $B3)
                )
              (br $B18)
            )
          (block $B2 (result i32)
              (local.set $var$2 (local.get $str))
              (block $B2_0
                  (block $B2_1
                      (br_if $B2_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000110)))
                    )
                  (i32.const 0)
                  (br $B2)
                )
              (i32.const 1)
              (br $B2)
            )
          (br $B18)
        )
      (block $B1 (result i32)
          (local.set $var$2 (local.get $str))
          (block $B1_0
              (block $B1_1
                  (block $B1_2
                      (block $B1_3
                          (block $B1_4
                              (br_if $B1_0 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000000d4)))
                              (br_if $B1_1 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000000e9)))
                              (br_if $B1_2 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x00000004000000f8)))
                              (br_if $B1_3 (call $system::core::string::string.==_1 (local.get $var$2) (i64.const 0x0000000400000107)))
                            )
                          (i32.const 0)
                          (br $B1)
                        )
                      (i32.const 1)
                      (br $B1)
                    )
                  (i32.const 1)
                  (br $B1)
                )
              (i32.const 1)
              (br $B1)
            )
          (i32.const 1)
          (br $B1)
        )
      (br $B18)
    )
  )
  (func $src::lexer::lexer::Lexer.eatIdentifier_1 (param $self i64) (result i64)
    (local $src::lexer::lexer::start_11 i32)
    (local $src::lexer::lexer::end_11 i32)
    (local $src::lexer::lexer::len_9 i32)
    (local $src::lexer::lexer::char_12 i32)
    (local $src::lexer::lexer::text i64)
    (block $B1 (result i64)
      (local.set $src::lexer::lexer::start_11 (call $src::lexer::lexer::Lexer.pos_1 (local.get $self)))
      (local.set $src::lexer::lexer::end_11 (local.get $src::lexer::lexer::start_11))
      (local.set $src::lexer::lexer::len_9 (call $system::core::string::string.length_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self))))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (if $IF4 (call $system::core::u32::u32.>=_1 (local.get $src::lexer::lexer::end_11) (local.get $src::lexer::lexer::len_9))
                      (then
                        (br $Break2)
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::char_12 (call $system::core::u16::u16.as_2 (call $system::core::string::string.___1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (local.get $src::lexer::lexer::end_11))))
                  (if $IF5 (call $system::core::u32::u32.!=_1 (local.get $src::lexer::lexer::char_12) (i32.const 0x3f))
                      (then
                        (if $IF6 (call $system::core::u32::u32.!=_1 (local.get $src::lexer::lexer::char_12) (i32.const 0x24))
                            (then
                              (if $IF7 (call $system::core::u32::u32.!=_1 (local.get $src::lexer::lexer::char_12) (i32.const 0x5F))
                                  (then
                                    (if $IF8 (call $system::core::boolean::boolean.!_1 (call $src::lexer::lexer::Lexer.isNumber_1 (local.get $src::lexer::lexer::char_12)))
                                        (then
                                          (if $IF9 (call $system::core::boolean::boolean.!_1 (call $src::lexer::unicode::isUnicodeLeter_1 (local.get $src::lexer::lexer::char_12)))
                                              (then
                                                (if $IF10 (call $system::core::boolean::boolean.!_1 (call $src::lexer::unicode::isUnicodeCombiningMark_1 (local.get $src::lexer::lexer::char_12)))
                                                    (then
                                                      (if $IF11 (call $system::core::boolean::boolean.!_1 (call $src::lexer::unicode::isUnicodeDigit_1 (local.get $src::lexer::lexer::char_12)))
                                                          (then
                                                            (if $IF12 (call $system::core::boolean::boolean.!_1 (call $src::lexer::unicode::isUnicodeConnectorPunctuation_1 (local.get $src::lexer::lexer::char_12)))
                                                                (then
                                                                  (br $Break2)
                                                                )
                                                                (else)
                                                              )
                                                          )
                                                          (else)
                                                        )
                                                    )
                                                    (else)
                                                  )
                                              )
                                              (else)
                                            )
                                        )
                                        (else)
                                      )
                                  )
                                  (else)
                                )
                            )
                            (else)
                          )
                      )
                      (else)
                    )
                  (local.set $src::lexer::lexer::end_11 (call $system::core::u32::u32.+_1 (local.get $src::lexer::lexer::end_11) (call $system::core::i32::i32.as_4 (i32.const 1))))
                  (br $Loop2)
                )
            )
        )
      (local.set $src::lexer::lexer::text (call $system::core::string::string.substring_1 (call $src::lexer::lexer::Lexer.source_1 (local.get $self)) (call $system::core::u32::u32.as_5 (local.get $src::lexer::lexer::start_11)) (call $system::core::u32::u32.as_5 (local.get $src::lexer::lexer::end_11))))
      (if $IF13 (result i64) (call $src::lexer::lexer::Lexer.isKeyword_1 (local.get $src::lexer::lexer::text))
          (then
            (block $B14 (result i64)
                (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::Keyword.apply_1) (local.get $src::lexer::lexer::start_11) (local.get $src::lexer::lexer::end_11))
              )
          )
          (else
            (block $B15 (result i64)
                (call $src::lexer::tokens::Token.apply_1 (call $src::lexer::tokens::Identifier.apply_1) (local.get $src::lexer::lexer::start_11) (local.get $src::lexer::lexer::end_11))
              )
          )
        )
    )
  )
  (func $src::lexer::lexer::Lexer.isNumber_1 (param $char i32) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.&&_1 (call $system::core::u32::u32.>=_1 (local.get $char) (i32.const 0x0030)) (call $system::core::u32::u32.<=_1 (local.get $char) (i32.const 0x0039)))
    )
  )
  (func $src::lexer::lexer::Lexer.isHex_1 (param $char i32) (result i32)
    (block $B1 (result i32)
      (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.||_1 (call $system::core::boolean::boolean.&&_1 (call $system::core::u32::u32.>=_1 (local.get $char) (i32.const 0x0061)) (call $system::core::u32::u32.<=_1 (local.get $char) (i32.const 0x0066))) (call $system::core::boolean::boolean.&&_1 (call $system::core::u32::u32.>=_1 (local.get $char) (i32.const 0x0041)) (call $system::core::u32::u32.<=_1 (local.get $char) (i32.const 0x0046)))) (call $system::core::boolean::boolean.&&_1 (call $system::core::u32::u32.>=_1 (local.get $char) (i32.const 0x0030)) (call $system::core::u32::u32.<=_1 (local.get $char) (i32.const 0x0039))))
    )
  )
  (export "ffi_allocateString" (func $support::ffi::allocateString_1))
  (func $support::ffi::stringDiscriminant_1 (result i64)
    (local $support::ffi::discriminant i32)
    (block $B1 (result i64)
      (local.set $support::ffi::discriminant (i32.const 4))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $support::ffi::discriminant)) (i32.const 32))
    )
  )
  (func $support::ffi::allocateString_1 (param $sizeInChars i32) (result i32)
    (block $B1 (result i32)
      (call $system::core::string::string.as_2 (call $system::core::string::string.fromBytes_1 (call $system::core::bytes::bytes.apply_1 (call $system::core::u32::u32.<<_1 (local.get $sizeInChars) (i32.const 1)))))
    )
  )
  (func $support::ffi::UCS2.fromPtr_1 (param $bytesPointer i32) (result i64)
    (i64.or (call $support::ffi::stringDiscriminant_1) (i64.and (i64.const 0xFFFFFFFF) (i64.extend_u/i32 (i32.sub (get_local $bytesPointer) (i32.const 4)))))
  )
  (func $support::ffi::UCS2.toPtr_1 (param $str i64) (result i32)
    (call $system::core::string::string.as_2 (local.get $str))
  )
  (data 0 (i32.const 85) "\00\00\00\00\00")
  (data 0 (i32.const 90) "\08\00\00\00t\00r\00u\00e\00\00")
  (data 0 (i32.const 103) "\0a\00\00\00f\00a\00l\00s\00e\00\00")
  (data 0 (i32.const 118) "\02\00\00\000\00\00")
  (data 0 (i32.const 125) "\02\00\00\000\00\00")
  (func $system::core::string::string.length_1 (param $self i64) (result i32)
    (call $system::core::u32::u32./_1 (call $system::core::u32::u32.load_1 (call $system::core::string::string.as_1 (local.get $self))) (call $system::core::i32::i32.as_4 (i32.const 2)))
  )
  (func $system::core::string::string.ptr_1 (param $self i64) (result i32)
    (i32.add (i32.const 4) (call $system::core::native::addressFromRef_1 (get_local $self)))
  )
  (func $system::core::string::string.as_1 (param $self i64) (result i64)
    (get_local $self)
  )
  (func $system::core::string::string.as_2 (param $self i64) (result i32)
    (i32.add (i32.const 4) (call $system::core::native::addressFromRef_1 (get_local $self)))
  )
  (func $system::core::string::string.++_1 (param $lhs i64) (param $rhs i64) (result i64)
    (call $system::core::string::string.concat_1 (local.get $lhs) (local.get $rhs))
  )
  (func $system::core::string::string.___1 (param $self i64) (param $at i32) (result i32)
    (block $B1 (result i32)
      (if $IF2 (call $system::core::u32::u32.>_1 (local.get $at) (call $system::core::string::string.length_1 (local.get $self)))
          (then
            (block $B3
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (if $IF4 (call $system::core::u32::u32.<_1 (local.get $at) (call $system::core::i32::i32.as_4 (i32.const 0)))
          (then
            (block $B5
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (call $system::core::u16::u16.load_2 (call $system::core::u32::u32.as_8 (call $system::core::string::string.ptr_1 (local.get $self))) (call $system::core::u32::u32.<<_1 (local.get $at) (i32.const 1)))
    )
  )
  (func $system::core::string::string.getDiscriminant_1 (result i64)
    (local $system::core::string::discriminant i32)
    (block $B1 (result i64)
      (local.set $system::core::string::discriminant (i32.const 4))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $system::core::string::discriminant)) (i32.const 32))
    )
  )
  (func $system::core::string::string.fromBytes_1 (param $bytes i64) (result i64)
    (i64.or (call $system::core::string::string.getDiscriminant_1) (i64.and (i64.const 0xFFFFFFFF) (local.get $bytes)))
  )
  (func $system::core::string::string.substring_1 (param $self i64) (param $start i32) (param $end i32) (result i64)
    (local $system::core::string::len i32)
    (local $system::core::string::finalStart i32)
    (local $system::core::string::finalEnd i32)
    (local $system::core::string::fromPos i32)
    (local $system::core::string::toPos i32)
    (local $system::core::string::size i32)
    (local $system::core::string::out i64)
    (block $B1 (result i64)
      (local.set $system::core::string::len (call $system::core::u32::u32.as_5 (call $system::core::string::string.length_1 (local.get $self))))
      (local.set $system::core::string::finalStart (call $system::core::math::min_1 (call $system::core::math::max_1 (local.get $start) (i32.const 0)) (local.get $system::core::string::len)))
      (local.set $system::core::string::finalEnd (call $system::core::math::min_1 (call $system::core::math::max_1 (local.get $end) (i32.const 0)) (local.get $system::core::string::len)))
      (local.set $system::core::string::fromPos (call $system::core::i32::i32.<<_1 (call $system::core::math::min_1 (local.get $system::core::string::finalStart) (local.get $system::core::string::finalEnd)) (i32.const 1)))
      (local.set $system::core::string::toPos (call $system::core::i32::i32.<<_1 (call $system::core::math::max_1 (local.get $system::core::string::finalStart) (local.get $system::core::string::finalEnd)) (i32.const 1)))
      (local.set $system::core::string::size (call $system::core::i32::i32.-_1 (local.get $system::core::string::toPos) (local.get $system::core::string::fromPos)))
      (if $IF2 (result i64) (call $system::core::i32::i32.<=_1 (local.get $system::core::string::size) (i32.const 0))
          (then
            (block $B3 (result i64)
                (i64.const 0x0000000400000055)
              )
          )
          (else
            (if $IF4 (result i64) (call $system::core::boolean::boolean.&&_1 (call $system::core::i32::i32.==_1 (local.get $system::core::string::fromPos) (i32.const 0)) (call $system::core::i32::i32.>=_1 (local.get $system::core::string::toPos) (call $system::core::i32::i32.<<_1 (local.get $system::core::string::len) (i32.const 1))))
                (then
                  (block $B5 (result i64)
                      (local.get $self)
                    )
                )
                (else
                  (block $B6 (result i64)
                      (local.set $system::core::string::out (call $system::core::bytes::bytes.apply_1 (call $system::core::i32::i32.as_4 (local.get $system::core::string::size))))
                      (drop (call $system::core::memory::memcpy_1 (call $system::core::bytes::bytes.ptr_1 (local.get $system::core::string::out)) (call $system::core::u32::u32.+_1 (call $system::core::string::string.ptr_1 (local.get $self)) (call $system::core::i32::i32.as_4 (local.get $system::core::string::fromPos))) (call $system::core::i32::i32.as_4 (local.get $system::core::string::size))))
                      (call $system::core::string::string.fromBytes_1 (local.get $system::core::string::out))
                    )
                )
              )
          )
        )
    )
  )
  (func $system::core::string::string.substring_2 (param $self i64) (param $start i32) (result i64)
    (block $B1 (result i64)
      (call $system::core::string::string.substring_1 (local.get $self) (local.get $start) (call $system::core::u32::u32.as_5 (i32.const 0x7FFFFFFF)))
    )
  )
  (func $system::core::string::string.concat_1 (param $lhs i64) (param $rhs i64) (result i64)
    (local $system::core::string::lhsLen i32)
    (local $system::core::string::rhsLen i32)
    (local $system::core::string::$ret i64)
    (block $B1 (result i64)
      (local.set $system::core::string::lhsLen (call $system::core::u32::u32.*_1 (call $system::core::string::string.length_1 (local.get $lhs)) (call $system::core::i32::i32.as_4 (i32.const 2))))
      (local.set $system::core::string::rhsLen (call $system::core::u32::u32.*_1 (call $system::core::string::string.length_1 (local.get $rhs)) (call $system::core::i32::i32.as_4 (i32.const 2))))
      (local.set $system::core::string::$ret (call $system::core::bytes::bytes.apply_1 (call $system::core::u32::u32.+_1 (local.get $system::core::string::lhsLen) (local.get $system::core::string::rhsLen))))
      (drop (call $system::core::memory::memcpy_1 (call $system::core::memory::memcpy_1 (call $system::core::bytes::bytes.ptr_1 (local.get $system::core::string::$ret)) (call $system::core::string::string.ptr_1 (local.get $lhs)) (local.get $system::core::string::lhsLen)) (call $system::core::string::string.ptr_1 (local.get $rhs)) (local.get $system::core::string::rhsLen)))
      (call $system::core::string::string.fromBytes_1 (local.get $system::core::string::$ret))
    )
  )
  (func $system::core::string::string.store_1 (param $lhs i64) (param $rhs i64)
    (i64.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::string::string.store_2 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::string::string.load_1 (param $lhs i64) (result i64)
    (i64.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::string::string.load_2 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::string::string.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::boolean::boolean.!_1 (call $system::core::string::string.==_1 (local.get $lhs) (local.get $rhs)))
  )
  (func $system::core::string::string.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (local $system::core::string::len_1 i32)
    (local $system::core::string::equals i32)
    (block $B1 (result i32)
      (if $IF2 (result i32) (call $system::core::u32::u32.==_1 (call $system::core::string::string.length_1 (local.get $lhs)) (call $system::core::string::string.length_1 (local.get $rhs)))
          (then
            (block $B3 (result i32)
                (if $IF4 (result i32) (call $system::core::u32::u32.==_1 (call $system::core::string::string.ptr_1 (local.get $lhs)) (call $system::core::string::string.ptr_1 (local.get $rhs)))
                    (then
                      (block $B5 (result i32)
                          (i32.const 1)
                        )
                    )
                    (else
                      (block $B6 (result i32)
                          (local.set $system::core::string::len_1 (call $system::core::string::string.length_1 (local.get $lhs)))
                          (local.set $system::core::string::equals (i32.const 1))
                          (block $Break7
                              (loop $Loop7
                                  (block $B8
                                      (if $IF9 (call $system::core::u32::u32.<=_1 (local.get $system::core::string::len_1) (call $system::core::i32::i32.as_4 (i32.const 0)))
                                          (then
                                            (br $Break7)
                                          )
                                          (else)
                                        )
                                      (local.set $system::core::string::len_1 (call $system::core::u32::u32.-_1 (local.get $system::core::string::len_1) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                      (if $IF10 (call $system::core::u16::u16.!=_2 (call $system::core::string::string.___1 (local.get $lhs) (local.get $system::core::string::len_1)) (call $system::core::string::string.___1 (local.get $rhs) (local.get $system::core::string::len_1)))
                                          (then
                                            (block $B11
                                                (local.set $system::core::string::equals (i32.const 0))
                                                (br $Break7)
                                              )
                                          )
                                          (else)
                                        )
                                      (if $IF12 (call $system::core::u32::u32.>_1 (local.get $system::core::string::len_1) (call $system::core::i32::i32.as_4 (i32.const 0)))
                                          (then
                                            (br $Loop7)
                                          )
                                          (else)
                                        )
                                    )
                                )
                            )
                          (local.get $system::core::string::equals)
                        )
                    )
                  )
              )
          )
          (else
            (block $B13 (result i32)
                (i32.const 0)
              )
          )
        )
    )
  )
  (func $system::core::string::string.charLength_1 (param $value i64) (result i32)
    (local $system::core::string::len_2 i32)
    (local $system::core::string::i64_10 i64)
    (local $system::core::string::current i64)
    (block $B1 (result i32)
      (if $IF2 (result i32) (call $system::core::i64::i64.==_1 (local.get $value) (call $system::core::i32::i32.as_1 (i32.const 0)))
          (then
            (block $B3 (result i32)
                (call $system::core::i32::i32.as_4 (i32.const 1))
              )
          )
          (else
            (block $B4 (result i32)
                (local.set $system::core::string::len_2 (i32.const 0))
                (local.set $system::core::string::i64_10 (call $system::core::i32::i32.as_1 (i32.const 10)))
                (local.set $system::core::string::current (local.get $value))
                (if $IF5 (call $system::core::i64::i64.<_1 (local.get $value) (call $system::core::i32::i32.as_1 (i32.const 0)))
                    (then
                      (block $B6
                          (local.set $system::core::string::len_2 (call $system::core::i32::i32.+_1 (local.get $system::core::string::len_2) (i32.const 1)))
                          (local.set $system::core::string::current (call $system::core::i64::i64.-_1 (local.get $system::core::string::current)))
                        )
                    )
                    (else)
                  )
                (block $Break7
                    (loop $Loop7
                        (block $B8
                            (local.set $system::core::string::current (call $system::core::i64::i64./_1 (local.get $system::core::string::current) (local.get $system::core::string::i64_10)))
                            (local.set $system::core::string::len_2 (call $system::core::i32::i32.+_1 (local.get $system::core::string::len_2) (i32.const 1)))
                            (if $IF9 (call $system::core::i64::i64.>_1 (local.get $system::core::string::current) (call $system::core::i32::i32.as_1 (i32.const 0)))
                                (then
                                  (block $B10
                                      (br $Loop7)
                                    )
                                )
                                (else
                                  (block $B11
                                      (br $Break7)
                                    )
                                )
                              )
                          )
                      )
                  )
                (call $system::core::i32::i32.as_4 (local.get $system::core::string::len_2))
              )
          )
        )
    )
  )
  (func $system::core::string::string.charLength_2 (param $value i64) (result i32)
    (local $system::core::string::len_3 i32)
    (local $system::core::string::u64_10 i64)
    (local $system::core::string::current_1 i64)
    (block $B1 (result i32)
      (if $IF2 (result i32) (call $system::core::u64::u64.==_1 (local.get $value) (call $system::core::i32::i32.as_5 (i32.const 0)))
          (then
            (block $B3 (result i32)
                (call $system::core::i32::i32.as_4 (i32.const 1))
              )
          )
          (else
            (block $B4 (result i32)
                (local.set $system::core::string::len_3 (i32.const 0))
                (local.set $system::core::string::u64_10 (call $system::core::i32::i32.as_5 (i32.const 10)))
                (local.set $system::core::string::current_1 (local.get $value))
                (block $Break5
                    (loop $Loop5
                        (block $B6
                            (local.set $system::core::string::current_1 (call $system::core::u64::u64./_1 (local.get $system::core::string::current_1) (local.get $system::core::string::u64_10)))
                            (local.set $system::core::string::len_3 (call $system::core::i32::i32.+_1 (local.get $system::core::string::len_3) (i32.const 1)))
                            (if $IF7 (call $system::core::u64::u64.>_1 (local.get $system::core::string::current_1) (call $system::core::i32::i32.as_5 (i32.const 0)))
                                (then
                                  (block $B8
                                      (br $Loop5)
                                    )
                                )
                                (else
                                  (block $B9
                                      (br $Break5)
                                    )
                                )
                              )
                          )
                      )
                  )
                (call $system::core::i32::i32.as_4 (local.get $system::core::string::len_3))
              )
          )
        )
    )
  )
  (func $system::core::string::string.printToBytes_1 (param $dst i64) (param $value i64) (param $endChar i32)
    (local $system::core::string::ZERO_CHAR i32)
    (local $system::core::string::num i64)
    (local $system::core::string::offset_2 i32)
    (local $system::core::string::u64_10_1 i64)
    (local $system::core::string::t i64)
    (local $system::core::string::r i32)
    (block $B1
      (local.set $system::core::string::ZERO_CHAR (call $system::core::i32::i32.as_9 (i32.const 48)))
      (local.set $system::core::string::num (local.get $value))
      (local.set $system::core::string::offset_2 (call $system::core::u32::u32.as_5 (local.get $endChar)))
      (local.set $system::core::string::u64_10_1 (call $system::core::i32::i32.as_5 (i32.const 10)))
      (block $Break2
          (loop $Loop2
              (block $B3
                  (local.set $system::core::string::t (call $system::core::u64::u64./_1 (local.get $system::core::string::num) (local.get $system::core::string::u64_10_1)))
                  (local.set $system::core::string::r (call $system::core::u64::u64.as_4 (call $system::core::u64::u64.%_1 (local.get $system::core::string::num) (local.get $system::core::string::u64_10_1))))
                  (local.set $system::core::string::num (local.get $system::core::string::t))
                  (local.set $system::core::string::offset_2 (call $system::core::i32::i32.-_1 (local.get $system::core::string::offset_2) (i32.const 1)))
                  (call $system::core::bytes::bytes.set_1 (local.get $dst) (call $system::core::i32::i32.as_4 (call $system::core::i32::i32.<<_1 (local.get $system::core::string::offset_2) (i32.const 1))) (call $system::core::u16::u16.+_1 (local.get $system::core::string::ZERO_CHAR) (local.get $system::core::string::r)))
                  (if $IF4 (call $system::core::u64::u64.==_1 (local.get $system::core::string::num) (call $system::core::i32::i32.as_5 (i32.const 0)))
                      (then
                        (block $B5
                            (br $Break2)
                          )
                      )
                      (else
                        (block $B6
                            (br $Loop2)
                          )
                      )
                    )
                )
            )
        )
    )
  )
  (func $system::core::string::string.stringify_1 (param $value i32) (result i64)
    (block $B1 (result i64)
      (if $IF2 (result i64) (local.get $value)
          (then
            (block $B3 (result i64)
                (i64.const 0x000000040000005a)
              )
          )
          (else
            (block $B4 (result i64)
                (i64.const 0x0000000400000067)
              )
          )
        )
    )
  )
  (func $system::core::string::string.stringify_2 (param $value i32) (result i64)
    (block $B1 (result i64)
      (call $system::core::string::string.stringify_8 (call $system::core::u8::u8.as_6 (local.get $value)))
    )
  )
  (func $system::core::string::string.stringify_3 (param $value i32) (result i64)
    (block $B1 (result i64)
      (call $system::core::string::string.stringify_8 (call $system::core::u16::u16.as_4 (local.get $value)))
    )
  )
  (func $system::core::string::string.stringify_4 (param $value i32) (result i64)
    (block $B1 (result i64)
      (call $system::core::string::string.stringify_7 (call $system::core::i16::i16.as_2 (local.get $value)))
    )
  )
  (func $system::core::string::string.stringify_5 (param $value i32) (result i64)
    (block $B1 (result i64)
      (call $system::core::string::string.stringify_7 (call $system::core::i32::i32.as_1 (local.get $value)))
    )
  )
  (func $system::core::string::string.stringify_6 (param $value i32) (result i64)
    (block $B1 (result i64)
      (call $system::core::string::string.stringify_8 (call $system::core::u32::u32.as_2 (local.get $value)))
    )
  )
  (func $system::core::string::string.stringify_7 (param $value i64) (result i64)
    (local $system::core::string::len_4 i32)
    (local $system::core::string::ret i64)
    (block $B1 (result i64)
      (if $IF2 (result i64) (call $system::core::i64::i64.==_2 (local.get $value) (i32.const 0))
          (then
            (block $B3 (result i64)
                (i64.const 0x0000000400000076)
              )
          )
          (else
            (block $B4 (result i64)
                (local.set $system::core::string::len_4 (call $system::core::string::string.charLength_1 (local.get $value)))
                (local.set $system::core::string::ret (call $system::core::bytes::bytes.apply_1 (call $system::core::u32::u32.<<_1 (local.get $system::core::string::len_4) (i32.const 1))))
                (if $IF5 (call $system::core::i64::i64.>_1 (local.get $value) (call $system::core::i32::i32.as_1 (i32.const 0)))
                    (then
                      (call $system::core::string::string.printToBytes_1 (local.get $system::core::string::ret) (call $system::core::i64::i64.as_3 (local.get $value)) (local.get $system::core::string::len_4))
                    )
                    (else
                      (call $system::core::string::string.printToBytes_1 (local.get $system::core::string::ret) (call $system::core::i64::i64.as_3 (call $system::core::i64::i64.-_1 (local.get $value))) (local.get $system::core::string::len_4))
                    )
                  )
                (if $IF6 (call $system::core::i64::i64.<_1 (local.get $value) (call $system::core::i32::i32.as_1 (i32.const 0)))
                    (then
                      (block $B7
                          (call $system::core::u16::u16.store_2 (call $system::core::u32::u32.as_8 (call $system::core::bytes::bytes.ptr_1 (local.get $system::core::string::ret))) (call $system::core::i32::i32.as_9 (i32.const 45)) (call $system::core::i32::i32.as_4 (i32.const 0)))
                        )
                    )
                    (else)
                  )
                (call $system::core::string::string.fromBytes_1 (local.get $system::core::string::ret))
              )
          )
        )
    )
  )
  (func $system::core::string::string.stringify_8 (param $value i64) (result i64)
    (local $system::core::string::len_5 i32)
    (local $system::core::string::ret_1 i64)
    (block $B1 (result i64)
      (if $IF2 (result i64) (call $system::core::u64::u64.==_1 (local.get $value) (call $system::core::i32::i32.as_5 (i32.const 0)))
          (then
            (block $B3 (result i64)
                (i64.const 0x000000040000007d)
              )
          )
          (else
            (block $B4 (result i64)
                (local.set $system::core::string::len_5 (call $system::core::string::string.charLength_2 (local.get $value)))
                (local.set $system::core::string::ret_1 (call $system::core::bytes::bytes.apply_1 (call $system::core::u32::u32.<<_1 (local.get $system::core::string::len_5) (i32.const 1))))
                (call $system::core::string::string.printToBytes_1 (local.get $system::core::string::ret_1) (local.get $value) (local.get $system::core::string::len_5))
                (call $system::core::string::string.fromBytes_1 (local.get $system::core::string::ret_1))
              )
          )
        )
    )
  )
  (func $system::core::bytes::bytes.bytesDiscriminant_1 (result i64)
    (local $system::core::bytes::discriminant i32)
    (block $B1 (result i64)
      (local.set $system::core::bytes::discriminant (i32.const 10))
      (call $system::core::u64::u64.<<_1 (call $system::core::u32::u32.as_2 (local.get $system::core::bytes::discriminant)) (i32.const 32))
    )
  )
  (func $system::core::bytes::bytes.apply_1 (param $size i32) (result i64)
    (local $allocation i32)
    (local $allocationSize i32)
    (local.set $allocationSize (i32.add (get_local $size) (i32.const 4)))
    (local.set $allocation (call $system::core::memory::malloc_1 (local.get $allocationSize)))
    (call $system::core::memory::memset_1 (get_local $allocation) (i32.const 0) (local.get $allocationSize))
    (i32.store (get_local $allocation) (get_local $size))
    (i64.or (call $system::core::bytes::bytes.bytesDiscriminant_1) (i64.extend_u/i32 (get_local $allocation)))
  )
  (func $system::core::bytes::bytes.toAddr_1 (param $str i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $str))
  )
  (func $system::core::bytes::bytes.as_1 (param $lhs i64) (result i64)
    (get_local $lhs)
  )
  (func $system::core::bytes::bytes.as_2 (param $self i64) (result i32)
    (i32.add (i32.const 4) (call $system::core::native::addressFromRef_1 (get_local $self)))
  )
  (func $system::core::bytes::bytes.length_1 (param $self i64) (result i32)
    (call $system::core::u32::u32.load_1 (call $system::core::bytes::bytes.as_1 (local.get $self)))
  )
  (func $system::core::bytes::bytes.ptr_1 (param $self i64) (result i32)
    (block $B1 (result i32)
      (call $system::core::u32::u32.+_1 (call $system::core::bytes::bytes.toAddr_1 (local.get $self)) (call $system::core::i32::i32.as_4 (i32.const 4)))
    )
  )
  (func $system::core::bytes::bytes.___1 (param $data i64) (param $at i32) (result i32)
    (block $B1 (result i32)
      (if $IF2 (call $system::core::u32::u32.>_1 (local.get $at) (call $system::core::bytes::bytes.length_1 (local.get $data)))
          (then
            (block $B3
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (if $IF4 (call $system::core::u32::u32.<_1 (local.get $at) (call $system::core::i32::i32.as_4 (i32.const 0)))
          (then
            (block $B5
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (call $system::core::u8::u8.load_2 (call $system::core::u32::u32.as_8 (call $system::core::bytes::bytes.ptr_1 (local.get $data))) (local.get $at))
    )
  )
  (func $system::core::bytes::bytes.___2 (param $data i64) (param $at i32) (param $value i32)
    (block $B1
      (if $IF2 (call $system::core::u32::u32.>_1 (local.get $at) (call $system::core::bytes::bytes.length_1 (local.get $data)))
          (then
            (block $B3
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (if $IF4 (call $system::core::u32::u32.<_1 (local.get $at) (call $system::core::i32::i32.as_4 (i32.const 0)))
          (then
            (block $B5
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (call $system::core::u8::u8.store_2 (call $system::core::u32::u32.as_8 (call $system::core::bytes::bytes.ptr_1 (local.get $data))) (local.get $value) (local.get $at))
    )
  )
  (func $system::core::bytes::bytes.fromString_1 (param $str i64) (result i64)
    (get_local $str)
  )
  (func $system::core::bytes::bytes.get_1 (param $data i64) (param $at i32) (result i32)
    (block $B1 (result i32)
      (if $IF2 (call $system::core::u32::u32.>_1 (local.get $at) (call $system::core::bytes::bytes.length_1 (local.get $data)))
          (then
            (block $B3
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (call $system::core::u8::u8.load_2 (call $system::core::u32::u32.as_8 (call $system::core::bytes::bytes.ptr_1 (local.get $data))) (local.get $at))
    )
  )
  (func $system::core::bytes::bytes.set_1 (param $data i64) (param $at i32) (param $value i32)
    (block $B1
      (if $IF2 (call $system::core::u32::u32.>_1 (call $system::core::u32::u32.+_1 (local.get $at) (call $system::core::i32::i32.as_4 (i32.const 1))) (call $system::core::bytes::bytes.length_1 (local.get $data)))
          (then
            (block $B3
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (call $system::core::u16::u16.store_2 (call $system::core::u32::u32.as_8 (call $system::core::bytes::bytes.ptr_1 (local.get $data))) (local.get $value) (local.get $at))
    )
  )
  (func $system::core::bytes::bytes.set_2 (param $data i64) (param $at i32) (param $value i32)
    (block $B1
      (if $IF2 (call $system::core::u32::u32.>_1 (local.get $at) (call $system::core::bytes::bytes.length_1 (local.get $data)))
          (then
            (block $B3
                (call $system::core::native::panic_1)
              )
          )
          (else)
        )
      (call $system::core::u8::u8.store_2 (call $system::core::u32::u32.as_8 (call $system::core::bytes::bytes.ptr_1 (local.get $data))) (local.get $value) (local.get $at))
    )
  )
  (func $system::core::bytes::bytes.store_1 (param $lhs i64) (param $rhs i64)
    (i64.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::bytes::bytes.store_2 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::bytes::bytes.load_1 (param $lhs i64) (result i64)
    (i64.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::bytes::bytes.load_2 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::bytes::bytes.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (call $system::core::boolean::boolean.!_1 (call $system::core::bytes::bytes.==_1 (local.get $lhs) (local.get $rhs)))
  )
  (func $system::core::bytes::bytes.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (local $system::core::bytes::len i32)
    (local $system::core::bytes::equals i32)
    (block $B1 (result i32)
      (if $IF2 (result i32) (call $system::core::u32::u32.==_1 (call $system::core::bytes::bytes.length_1 (local.get $lhs)) (call $system::core::bytes::bytes.length_1 (local.get $rhs)))
          (then
            (block $B3 (result i32)
                (if $IF4 (result i32) (call $system::core::u32::u32.==_1 (call $system::core::bytes::bytes.ptr_1 (local.get $lhs)) (call $system::core::bytes::bytes.ptr_1 (local.get $rhs)))
                    (then
                      (block $B5 (result i32)
                          (i32.const 1)
                        )
                    )
                    (else
                      (block $B6 (result i32)
                          (local.set $system::core::bytes::len (call $system::core::bytes::bytes.length_1 (local.get $lhs)))
                          (local.set $system::core::bytes::equals (i32.const 1))
                          (block $Break7
                              (loop $Loop7
                                  (block $B8
                                      (local.set $system::core::bytes::len (call $system::core::u32::u32.-_1 (local.get $system::core::bytes::len) (call $system::core::i32::i32.as_4 (i32.const 1))))
                                      (if $IF9 (call $system::core::u8::u8.!=_3 (call $system::core::bytes::bytes.get_1 (local.get $lhs) (local.get $system::core::bytes::len)) (call $system::core::bytes::bytes.get_1 (local.get $rhs) (local.get $system::core::bytes::len)))
                                          (then
                                            (block $B10
                                                (local.set $system::core::bytes::equals (i32.const 0))
                                                (br $Break7)
                                              )
                                          )
                                          (else)
                                        )
                                      (if $IF11 (call $system::core::u32::u32.>_1 (local.get $system::core::bytes::len) (call $system::core::i32::i32.as_4 (i32.const 0)))
                                          (then
                                            (br $Loop7)
                                          )
                                          (else)
                                        )
                                    )
                                )
                            )
                          (local.get $system::core::bytes::equals)
                        )
                    )
                  )
              )
          )
          (else
            (block $B12 (result i32)
                (i32.const 0)
              )
          )
        )
    )
  )
  (func $system::core::f64::f64.as_1 (param $lhs f64) (result f32)
    (f32.demote/f64 (get_local $lhs))
  )
  (func $system::core::f64::f64.as_2 (param $lhs f64) (result i64)
    (i64.trunc_s/f64 (get_local $lhs))
  )
  (func $system::core::f64::f64.as_3 (param $lhs f64) (result i64)
    (i64.trunc_u/f64 (get_local $lhs))
  )
  (func $system::core::f64::f64.as_4 (param $lhs f64) (result i32)
    (i32.trunc_s/f64 (get_local $lhs))
  )
  (func $system::core::f64::f64.as_5 (param $lhs f64) (result i32)
    (i32.trunc_u/f64 (get_local $lhs))
  )
  (func $system::core::f64::f64.+_1 (param $lhs f64) (param $rhs f64) (result f64)
    (f64.add (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.-_1 (param $lhs f64) (param $rhs f64) (result f64)
    (f64.sub (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.-_2 (param $rhs f64) (result f64)
    (f64.neg (get_local $rhs))
  )
  (func $system::core::f64::f64.*_1 (param $lhs f64) (param $rhs f64) (result f64)
    (f64.mul (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64./_1 (param $lhs f64) (param $rhs f64) (result f64)
    (f64.div (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.==_1 (param $lhs f64) (param $rhs f64) (result i32)
    (f64.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.>=_1 (param $lhs f64) (param $rhs f64) (result i32)
    (f64.ge (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.<=_1 (param $lhs f64) (param $rhs f64) (result i32)
    (f64.le (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.>_1 (param $lhs f64) (param $rhs f64) (result i32)
    (f64.gt (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.<_1 (param $lhs f64) (param $rhs f64) (result i32)
    (f64.lt (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.!=_1 (param $lhs f64) (param $rhs f64) (result i32)
    (f64.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f64::f64.sqrt_1 (param $n f64) (result f64)
    (f64.sqrt (local.get $n))
  )
  (func $system::core::f64::f64.store_1 (param $lhs i64) (param $rhs f64)
    (f64.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::f64::f64.store_2 (param $lhs i64) (param $rhs f64) (param $offset i32)
    (f64.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::f64::f64.load_1 (param $lhs i64) (result f64)
    (f64.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::f64::f64.load_2 (param $lhs i64) (param $offset i32) (result f64)
    (f64.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::f32::f32.as_1 (param $lhs f32) (result f64)
    (f64.promote/f32 (get_local $lhs))
  )
  (func $system::core::f32::f32.as_2 (param $lhs f32) (result i64)
    (i64.trunc_s/f32 (get_local $lhs))
  )
  (func $system::core::f32::f32.as_3 (param $lhs f32) (result i64)
    (i64.trunc_u/f32 (get_local $lhs))
  )
  (func $system::core::f32::f32.as_4 (param $lhs f32) (result i32)
    (i32.trunc_s/f32 (get_local $lhs))
  )
  (func $system::core::f32::f32.as_5 (param $lhs f32) (result i32)
    (i32.trunc_u/f32 (get_local $lhs))
  )
  (func $system::core::f32::f32.+_1 (param $lhs f32) (param $rhs f32) (result f32)
    (f32.add (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.-_1 (param $lhs f32) (param $rhs f32) (result f32)
    (f32.sub (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.-_2 (param $rhs f32) (result f32)
    (f32.neg (get_local $rhs))
  )
  (func $system::core::f32::f32.*_1 (param $lhs f32) (param $rhs f32) (result f32)
    (f32.mul (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32./_1 (param $lhs f32) (param $rhs f32) (result f32)
    (f32.div (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.==_1 (param $lhs f32) (param $rhs f32) (result i32)
    (f32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.>=_1 (param $lhs f32) (param $rhs f32) (result i32)
    (f32.ge (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.<=_1 (param $lhs f32) (param $rhs f32) (result i32)
    (f32.le (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.>_1 (param $lhs f32) (param $rhs f32) (result i32)
    (f32.gt (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.<_1 (param $lhs f32) (param $rhs f32) (result i32)
    (f32.lt (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.!=_1 (param $lhs f32) (param $rhs f32) (result i32)
    (f32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::f32::f32.sqrt_1 (param $n f32) (result f32)
    (f32.sqrt (local.get $n))
  )
  (func $system::core::f32::f32.store_1 (param $lhs i64) (param $rhs f32)
    (f32.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::f32::f32.store_2 (param $lhs i64) (param $rhs f32) (param $offset i32)
    (f32.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::f32::f32.load_1 (param $lhs i64) (result f32)
    (f32.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::f32::f32.load_2 (param $lhs i64) (param $offset i32) (result f32)
    (f32.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::i64::i64.as_1 (param $lhs i64) (result f32)
    (f32.convert_i64_s (get_local $lhs))
  )
  (func $system::core::i64::i64.as_2 (param $lhs i64) (result f64)
    (f64.convert_i64_s (get_local $lhs))
  )
  (func $system::core::i64::i64.as_3 (param $lhs i64) (result i64)
    (get_local $lhs)
  )
  (func $system::core::i64::i64.as_4 (param $lhs i64) (result i32)
    (i32.wrap_i64 (get_local $lhs))
  )
  (func $system::core::i64::i64.as_5 (param $lhs i64) (result i32)
    (i32.wrap_i64 (get_local $lhs))
  )
  (func $system::core::i64::i64.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.==_2 (param $lhs i64) (param $rhs i32) (result i32)
    (i64.eq (get_local $lhs) (i64.extend_i32_s (get_local $rhs)))
  )
  (func $system::core::i64::i64.==_3 (param $lhs i64) (param $rhs i32) (result i32)
    (i64.eq (get_local $lhs) (i64.extend_i32_u (get_local $rhs)))
  )
  (func $system::core::i64::i64.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.+_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.add (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.-_1 (param $lhs i64) (result i64)
    (i64.mul (get_local $lhs) (i64.const -1))
  )
  (func $system::core::i64::i64.-_2 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.sub (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.*_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.mul (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64./_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.div_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.~_1 (param $rhs i64) (result i64)
    (i64.xor (i64.const 0xFFFFFFFFFFFFFFFF) (get_local $rhs))
  )
  (func $system::core::i64::i64.>>>_1 (param $lhs i64) (param $rhs i32) (result i64)
    (call $system::core::i64::i64.>>>_2 (local.get $lhs) (call $system::core::i32::i32.as_1 (local.get $rhs)))
  )
  (func $system::core::i64::i64.>>>_2 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.shr_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.>>_1 (param $lhs i64) (param $rhs i32) (result i64)
    (call $system::core::i64::i64.>>_2 (local.get $lhs) (call $system::core::i32::i32.as_1 (local.get $rhs)))
  )
  (func $system::core::i64::i64.>>_2 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.shr_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.<<_1 (param $lhs i64) (param $rhs i32) (result i64)
    (call $system::core::i64::i64.<<_2 (local.get $lhs) (call $system::core::i32::i32.as_1 (local.get $rhs)))
  )
  (func $system::core::i64::i64.<<_2 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.shl (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.>=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.ge_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.<=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.le_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.>_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.gt_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.<_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.lt_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.%_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.rem_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.&_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.and (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.&_2 (param $lhs i64) (param $rhs i32) (result i32)
    (call $system::core::i32::i32.&_1 (call $system::core::i64::i64.as_4 (local.get $lhs)) (local.get $rhs))
  )
  (func $system::core::i64::i64.&_3 (param $lhs i64) (param $rhs i32) (result i32)
    (call $system::core::u32::u32.&_1 (call $system::core::i64::i64.as_5 (local.get $lhs)) (local.get $rhs))
  )
  (func $system::core::i64::i64.|_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.or (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.^_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i64::i64.rotl_1 (param $value i64) (param $shift i64) (result i64)
    (i64.rotl (get_local $value) (get_local $shift))
  )
  (func $system::core::i64::i64.rotr_1 (param $value i64) (param $shift i64) (result i64)
    (i64.rotr (get_local $value) (get_local $shift))
  )
  (func $system::core::i64::i64.store_1 (param $lhs i64) (param $rhs i64)
    (i64.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::i64::i64.store_2 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::i64::i64.load_1 (param $lhs i64) (result i64)
    (i64.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::i64::i64.load_2 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::i64::i64.load8_u_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load8_u (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::i32::i32.as_1 (param $lhs i32) (result i64)
    (i64.extend_i32_s (get_local $lhs))
  )
  (func $system::core::i32::i32.as_2 (param $lhs i32) (result f32)
    (f32.convert_i32_s (get_local $lhs))
  )
  (func $system::core::i32::i32.as_3 (param $lhs i32) (result f64)
    (f64.convert_i32_s (get_local $lhs))
  )
  (func $system::core::i32::i32.as_4 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::i32::i32.as_5 (param $lhs i32) (result i64)
    (i64.extend_i32_s (get_local $lhs))
  )
  (func $system::core::i32::i32.as_6 (param $lhs i32) (result f32)
    (f32.convert_i32_s (get_local $lhs))
  )
  (func $system::core::i32::i32.as_7 (param $lhs i32) (result i64)
    (i64.extend_i32_s (get_local $lhs))
  )
  (func $system::core::i32::i32.as_8 (param $lhs i32) (result i32)
    (i32.and (i32.const 0xFF) (get_local $lhs))
  )
  (func $system::core::i32::i32.as_9 (param $lhs i32) (result i32)
    (i32.and (i32.const 0xFFFF) (get_local $lhs))
  )
  (func $system::core::i32::i32.as_10 (param $lhs i32) (result i32)
    (i32.shr_s (i32.shl (get_local $lhs) (i32.const 16)) (i32.const 16))
  )
  (func $system::core::i32::i32.==_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.==_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.!=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.!=_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.&_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.|_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.or (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.^_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.+_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.add (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.-_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.sub (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.-_2 (param $rhs i32) (result i32)
    (i32.sub (i32.const 0) (get_local $rhs))
  )
  (func $system::core::i32::i32.*_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.mul (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32./_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.div_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.~_1 (param $rhs i32) (result i32)
    (i32.xor (i32.const 0xFFFFFFFF) (get_local $rhs))
  )
  (func $system::core::i32::i32.>>>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.>>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.<<_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shl (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.>=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ge_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.<=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.le_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.gt_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.<_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.lt_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.%_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.rem_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i32::i32.store_1 (param $lhs i64) (param $rhs i32)
    (i32.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::i32::i32.store_2 (param $lhs i64) (param $rhs i32) (param $offset i32)
    (i32.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::i32::i32.load_1 (param $lhs i64) (result i32)
    (i32.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::i32::i32.load_2 (param $lhs i64) (param $offset i32) (result i32)
    (i32.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::i16::i16.as_1 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::i16::i16.as_2 (param $lhs i32) (result i64)
    (i64.extend_i32_s (get_local $lhs))
  )
  (func $system::core::i16::i16.as_3 (param $lhs i32) (result f32)
    (f32.convert_i32_s (get_local $lhs))
  )
  (func $system::core::i16::i16.as_4 (param $lhs i32) (result f64)
    (f64.convert_i32_s (get_local $lhs))
  )
  (func $system::core::i16::i16.as_5 (param $lhs i32) (result i32)
    (i32.and (i32.const 0xFF) (get_local $lhs))
  )
  (func $system::core::i16::i16.as_6 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::i16::i16.==_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.==_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.!=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.!=_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.&_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.|_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.or (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.^_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.^_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.+_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_s (i32.shl (i32.add (get_local $lhs) (get_local $rhs)) (i32.const 16)) (i32.const 16))
  )
  (func $system::core::i16::i16.-_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_s (i32.shl (i32.sub (get_local $lhs) (get_local $rhs)) (i32.const 16)) (i32.const 16))
  )
  (func $system::core::i16::i16.-_2 (param $rhs i32) (result i32)
    (i32.shr_s (i32.shl (i32.sub (i32.const 0) (get_local $rhs)) (i32.const 16)) (i32.const 16))
  )
  (func $system::core::i16::i16.*_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_s (i32.shl (i32.mul (get_local $lhs) (get_local $rhs)) (i32.const 16)) (i32.const 16))
  )
  (func $system::core::i16::i16./_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.div_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.~_1 (param $rhs i32) (result i32)
    (i32.xor (i32.const 0xFFFFFFFF) (get_local $rhs))
  )
  (func $system::core::i16::i16.>>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_s (get_local $lhs) (i32.and (get_local $rhs) (i32.const 15)))
  )
  (func $system::core::i16::i16.<<_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_s (i32.shl (i32.shl (get_local $lhs) (i32.and (get_local $rhs) (i32.const 15))) (i32.const 16)) (i32.const 16))
  )
  (func $system::core::i16::i16.>=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ge_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.<=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.le_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.gt_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.<_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.lt_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.%_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.rem_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::i16::i16.store_1 (param $lhs i64) (param $rhs i32)
    (i32.store16 (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::i16::i16.store_2 (param $lhs i64) (param $rhs i32) (param $offset i32)
    (i32.store16 (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::i16::i16.load_1 (param $lhs i64) (result i32)
    (i32.load16_s (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::i16::i16.load_2 (param $lhs i64) (param $offset i32) (result i32)
    (i32.load16_s (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::u64::u64.as_1 (param $lhs i64) (result f32)
    (f32.convert_i64_u (get_local $lhs))
  )
  (func $system::core::u64::u64.as_2 (param $lhs i64) (result f64)
    (f64.convert_i64_u (get_local $lhs))
  )
  (func $system::core::u64::u64.as_3 (param $lhs i64) (result i32)
    (i32.and (i32.const 0xFF) (i32.wrap_i64 (get_local $lhs)))
  )
  (func $system::core::u64::u64.as_4 (param $lhs i64) (result i32)
    (i32.and (i32.const 0xFFFF) (i32.wrap_i64 (get_local $lhs)))
  )
  (func $system::core::u64::u64.as_5 (param $lhs i64) (result i64)
    (get_local $lhs)
  )
  (func $system::core::u64::u64.as_6 (param $lhs i64) (result f32)
    (f32.convert_i64_u (get_local $lhs))
  )
  (func $system::core::u64::u64.as_7 (param $lhs i64) (result i32)
    (i32.wrap_i64 (get_local $lhs))
  )
  (func $system::core::u64::u64.as_8 (param $lhs i64) (result i32)
    (i32.wrap_i64 (get_local $lhs))
  )
  (func $system::core::u64::u64.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.==_2 (param $lhs i64) (param $rhs i32) (result i32)
    (i64.eq (get_local $lhs) (i64.extend_i32_u (get_local $rhs)))
  )
  (func $system::core::u64::u64.==_3 (param $lhs i64) (param $rhs i32) (result i32)
    (i64.eq (get_local $lhs) (i64.extend_i32_u (get_local $rhs)))
  )
  (func $system::core::u64::u64.==_4 (param $lhs i64) (param $rhs i32) (result i32)
    (i64.eq (get_local $lhs) (i64.extend_i32_u (get_local $rhs)))
  )
  (func $system::core::u64::u64.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.+_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.add (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.-_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.sub (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.*_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.mul (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64./_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.div_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.~_1 (param $rhs i64) (result i64)
    (i64.xor (i64.const 0xFFFFFFFFFFFFFFFF) (get_local $rhs))
  )
  (func $system::core::u64::u64.>>>_1 (param $lhs i64) (param $rhs i32) (result i64)
    (call $system::core::u64::u64.>>>_2 (local.get $lhs) (call $system::core::i32::i32.as_1 (local.get $rhs)))
  )
  (func $system::core::u64::u64.>>>_2 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.shr_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.>>_1 (param $lhs i64) (param $rhs i32) (result i64)
    (call $system::core::u64::u64.>>_2 (local.get $lhs) (call $system::core::i32::i32.as_1 (local.get $rhs)))
  )
  (func $system::core::u64::u64.>>_2 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.shr_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.<<_1 (param $lhs i64) (param $rhs i32) (result i64)
    (call $system::core::u64::u64.<<_2 (local.get $lhs) (call $system::core::i32::i32.as_1 (local.get $rhs)))
  )
  (func $system::core::u64::u64.<<_2 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.shl (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.>=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.ge_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.<=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.le_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.>_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.gt_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.<_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.lt_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.%_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.rem_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.&_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.and (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.&_2 (param $lhs i64) (param $rhs i32) (result i32)
    (call $system::core::i32::i32.&_1 (call $system::core::u64::u64.as_7 (local.get $lhs)) (local.get $rhs))
  )
  (func $system::core::u64::u64.&_3 (param $lhs i64) (param $rhs i32) (result i32)
    (call $system::core::u32::u32.&_1 (call $system::core::u64::u64.as_8 (local.get $lhs)) (local.get $rhs))
  )
  (func $system::core::u64::u64.|_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.or (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.^_1 (param $lhs i64) (param $rhs i64) (result i64)
    (i64.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u64::u64.store_1 (param $lhs i64) (param $rhs i64)
    (i64.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::u64::u64.store_2 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::u64::u64.load_1 (param $lhs i64) (result i64)
    (i64.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::u64::u64.load_2 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::u64::u64.load8_u_1 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load8_u (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::u32::u32.as_1 (param $lhs i32) (result i64)
    (i64.extend_i32_u (get_local $lhs))
  )
  (func $system::core::u32::u32.as_2 (param $lhs i32) (result i64)
    (i64.extend_i32_u (get_local $lhs))
  )
  (func $system::core::u32::u32.as_3 (param $lhs i32) (result f32)
    (f32.convert_i32_u (get_local $lhs))
  )
  (func $system::core::u32::u32.as_4 (param $lhs i32) (result f64)
    (f64.convert_i32_u (get_local $lhs))
  )
  (func $system::core::u32::u32.as_5 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::u32::u32.as_6 (param $lhs i32) (result i32)
    (i32.shr_s (i32.shl (get_local $lhs) (i32.const 16)) (i32.const 16))
  )
  (func $system::core::u32::u32.as_7 (param $lhs i32) (result i32)
    (i32.and (i32.const 0xFF) (get_local $lhs))
  )
  (func $system::core::u32::u32.as_8 (param $lhs i32) (result i64)
    (i64.extend_i32_s (get_local $lhs))
  )
  (func $system::core::u32::u32.==_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.==_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.==_3 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.!=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.&_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.|_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.or (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.^_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.^_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.+_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.add (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.-_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.sub (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.*_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.mul (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32./_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.div_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.~_1 (param $rhs i32) (result i32)
    (i32.xor (i32.const 0xFFFFFFFF) (get_local $rhs))
  )
  (func $system::core::u32::u32.>>>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.>>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shr_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.<<_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.shl (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.>=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ge_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.<=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.le_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.gt_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.<_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.lt_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.%_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.rem_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u32::u32.store_1 (param $lhs i64) (param $rhs i32)
    (i32.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::u32::u32.store_2 (param $lhs i64) (param $rhs i32) (param $offset i32)
    (i32.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::u32::u32.load_1 (param $lhs i64) (result i32)
    (i32.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::u32::u32.load_2 (param $lhs i64) (param $offset i32) (result i32)
    (i32.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::u16::u16.as_1 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::u16::u16.as_2 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::u16::u16.as_3 (param $lhs i32) (result i64)
    (i64.extend_i32_u (get_local $lhs))
  )
  (func $system::core::u16::u16.as_4 (param $lhs i32) (result i64)
    (i64.extend_i32_u (get_local $lhs))
  )
  (func $system::core::u16::u16.as_5 (param $lhs i32) (result f32)
    (f32.convert_i32_u (get_local $lhs))
  )
  (func $system::core::u16::u16.as_6 (param $lhs i32) (result f64)
    (f64.convert_i32_u (get_local $lhs))
  )
  (func $system::core::u16::u16.as_7 (param $lhs i32) (result i32)
    (i32.and (i32.const 0xFF) (get_local $lhs))
  )
  (func $system::core::u16::u16.==_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.==_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.==_3 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.!=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.!=_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.!=_3 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.&_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.|_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.or (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.^_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.^_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.+_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (i32.const 0xFFFF) (i32.add (get_local $lhs) (get_local $rhs)))
  )
  (func $system::core::u16::u16.-_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (i32.const 0xFFFF) (i32.sub (get_local $lhs) (get_local $rhs)))
  )
  (func $system::core::u16::u16.*_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (i32.const 0xFFFF) (i32.mul (get_local $lhs) (get_local $rhs)))
  )
  (func $system::core::u16::u16./_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.div_s (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.~_1 (param $rhs i32) (result i32)
    (i32.xor (i32.const 0xFFFF) (get_local $rhs))
  )
  (func $system::core::u16::u16.>>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (i32.const 0xFFFF) (i32.shr_u (get_local $lhs) (i32.and (get_local $rhs) (i32.const 15))))
  )
  (func $system::core::u16::u16.<<_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (i32.const 0xFFFF) (i32.shl (get_local $lhs) (i32.and (get_local $rhs) (i32.const 15))))
  )
  (func $system::core::u16::u16.>=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ge_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.<=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.le_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.>_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.gt_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.<_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.lt_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.%_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.rem_u (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u16::u16.store_1 (param $lhs i64) (param $rhs i32)
    (i32.store16 (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::u16::u16.store_2 (param $lhs i64) (param $rhs i32) (param $offset i32)
    (i32.store16 (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::u16::u16.load_1 (param $lhs i64) (result i32)
    (i32.load16_u (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::u16::u16.load_2 (param $lhs i64) (param $offset i32) (result i32)
    (i32.load16_u (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::u8::u8.as_1 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::u8::u8.as_2 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::u8::u8.as_3 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::u8::u8.as_4 (param $lhs i32) (result i32)
    (get_local $lhs)
  )
  (func $system::core::u8::u8.as_5 (param $lhs i32) (result i64)
    (i64.extend_i32_u (get_local $lhs))
  )
  (func $system::core::u8::u8.as_6 (param $lhs i32) (result i64)
    (i64.extend_i32_s (get_local $lhs))
  )
  (func $system::core::u8::u8.as_7 (param $lhs i32) (result f32)
    (f32.convert_i32_u (get_local $lhs))
  )
  (func $system::core::u8::u8.as_8 (param $lhs i32) (result f64)
    (f64.convert_i32_u (get_local $lhs))
  )
  (func $system::core::u8::u8.|_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.or (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.&_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.^_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.xor (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.==_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.==_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.==_3 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.!=_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.!=_2 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.!=_3 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::u8::u8.store_1 (param $lhs i64) (param $rhs i32)
    (i32.store8 (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::u8::u8.store_2 (param $lhs i64) (param $rhs i32) (param $offset i32)
    (i32.store8 (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::u8::u8.load_1 (param $lhs i64) (result i32)
    (i32.load8_u (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::u8::u8.load_2 (param $lhs i64) (param $offset i32) (result i32)
    (i32.load8_u (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::boolean::boolean.&&_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.and (i32.ne (get_local $lhs) (i32.const 0)) (i32.ne (get_local $rhs) (i32.const 0)))
  )
  (func $system::core::boolean::boolean.==_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.eq (i32.eqz (get_local $lhs)) (i32.eqz (get_local $rhs)))
  )
  (func $system::core::boolean::boolean.||_1 (param $lhs i32) (param $rhs i32) (result i32)
    (i32.or (i32.ne (get_local $lhs) (i32.const 0)) (i32.ne (get_local $rhs) (i32.const 0)))
  )
  (func $system::core::boolean::boolean.!_1 (param $rhs i32) (result i32)
    (if $IF1 (result i32) (local.get $rhs)
      (then
        (i32.const 0)
      )
      (else
        (i32.const 1)
      )
    )
  )
  (func $system::core::boolean::boolean.store_1 (param $lhs i64) (param $rhs i32)
    (i32.store8 (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::boolean::boolean.store_2 (param $lhs i64) (param $rhs i32) (param $offset i32)
    (i32.store8 (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::boolean::boolean.load_1 (param $lhs i64) (result i32)
    (i32.load8_u (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::boolean::boolean.load_2 (param $lhs i64) (param $offset i32) (result i32)
    (i32.load8_u (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (func $system::core::native::addressFromRef_1 (param $pointer i64) (result i32)
    (i32.wrap_i64 (get_local $pointer))
  )
  (func $system::core::native::panic_1
    (unreachable)
  )
  (func $system::core::native::never.apply_1
    (unreachable)
  )
  (func $system::core::native::ref.is_1 (param $lhs i64) (result i32)
    (i32.const 1)
  )
  (func $system::core::native::ref.as_1 (param $lhs i64) (result i64)
    (local.get $lhs)
  )
  (func $system::core::native::ref.==_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.eq (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::native::ref.!=_1 (param $lhs i64) (param $rhs i64) (result i32)
    (i64.ne (get_local $lhs) (get_local $rhs))
  )
  (func $system::core::native::ref.as_3 (param $self i64) (result i32)
    (call $system::core::native::addressFromRef_1 (get_local $self))
  )
  (func $system::core::native::ref.getDiscriminant_1 (param $reference i64) (result i32)
    (i32.wrap_i64 (i64.shr_u (local.get $reference) (i64.const 32)))
  )
  (func $system::core::native::ref.store_1 (param $lhs i64) (param $rhs i64)
    (i64.store (call $system::core::native::addressFromRef_1 (get_local $lhs)) (get_local $rhs))
  )
  (func $system::core::native::ref.store_2 (param $lhs i64) (param $rhs i64) (param $offset i32)
    (i64.store (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))) (get_local $rhs))
  )
  (func $system::core::native::ref.load_1 (param $lhs i64) (result i64)
    (i64.load (call $system::core::native::addressFromRef_1 (get_local $lhs)))
  )
  (func $system::core::native::ref.load_2 (param $lhs i64) (param $offset i32) (result i64)
    (i64.load (i32.add (get_local $offset) (call $system::core::native::addressFromRef_1 (get_local $lhs))))
  )
  (data 0 (i32.const 16) "\10\00\00\00D\00o\00c\00u\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 37) "\10\00\00\00D\00o\00c\00u\00m\00e\00n\00t\00\00")
  (data 0 (i32.const 58) "\06\00\00\00m\00o\00d\00\00")
  (data 0 (i32.const 69) "\06\00\00\00m\00o\00d\00\00")
  (data 0 (i32.const 80) "\00\00\00\00\00")
  (export "startLexer" (func $src::main::startLexer_1))
  (export "eat" (func $src::main::externalEat_1))
  (export "parseAst" (func $src::main::parseAst_1))
  (export "parseAstDesugar" (func $src::main::parseAstDesugar_1))
  (export "parseAndEmitErrors" (func $src::main::parseAndEmitErrors_1))
  (export "parseAndEmitAst" (func $src::main::parseAndEmitAst_1))
  (export "parseAndEmitDesugar" (func $src::main::parseAndEmitDesugar_1))
  (func $src::main::startLexer_1 (param $strAddress i32)
    (call $src::lexer::lexer::instantiate_1 (call $support::ffi::UCS2.fromPtr_1 (local.get $strAddress)))
  )
  (func $src::main::externalEat_1 (result i32)
    (call $system::core::string::string.as_2 (call $src::lexer::lexer::eat_1))
  )
  (func $src::main::parseAst_1 (param $strAddress i32) (result i32)
    (local $src::main::sb i64)
    (block $B1 (result i32)
      (local.set $src::main::sb (call $src::stringbuilder::StringBuilder.apply_3))
      (call $src::parser::parser::printAst_2 (call $src::parser::parser::parse_1 (call $support::ffi::UCS2.fromPtr_1 (local.get $strAddress)) (i64.const 0x0000000400000010) (call $src::parser::lysgrammar::getGrammar_1)) (i32.const 0) (local.get $src::main::sb))
      (call $system::core::string::string.as_2 (call $src::stringbuilder::StringBuilder.toString_1 (local.get $src::main::sb)))
    )
  )
  (func $src::main::parseAstDesugar_1 (param $strAddress i32) (result i32)
    (local $src::main::ctx i64)
    (local $src::main::sb_1 i64)
    (local $var$3 i64)
    (block $B1 (result i32)
      (local.set $src::main::ctx (call $src::compiler::context::CompilerContext.apply_3))
      (block $B3 (result i32)
          (local.set $var$3 (call $src::parser::parser::parse_1 (call $support::ffi::UCS2.fromPtr_1 (local.get $strAddress)) (i64.const 0x0000000400000025) (call $src::parser::lysgrammar::getGrammar_1)))
          (block $B3_0
              (block $B3_1
                  (br_if $B3_0 (call $src::parser::parser::AstNode.is_1 (local.get $var$3)))
                )
              (call $system::core::string::string.as_2 (i64.const 0x0000000400000050))
              (br $B3)
            )
          (block $B2 (result i32)
              (local.set $src::main::sb_1 (call $src::stringbuilder::StringBuilder.apply_3))
              (call $src::parser::parser::printAst_2 (call $src::compiler::phases::transformation::runPhase_1 (i64.const 0x000000040000003a) (i64.const 0x0000000400000045) (local.get $var$3) (local.get $src::main::ctx)) (i32.const 0) (local.get $src::main::sb_1))
              (call $system::core::string::string.as_2 (call $src::stringbuilder::StringBuilder.toString_1 (local.get $src::main::sb_1)))
            )
          (br $B3)
        )
    )
  )
  (func $src::main::parseAndEmitErrors_1 (param $moduleName i32) (param $path i32) (param $strAddress i32) (result i32)
    (local $src::main::ctx_1 i64)
    (local $src::main::sb_2 i64)
    (block $B1 (result i32)
      (local.set $src::main::ctx_1 (call $src::compiler::context::CompilerContext.apply_3))
      (local.set $src::main::sb_2 (call $src::stringbuilder::StringBuilder.apply_3))
      (drop (call $src::compiler::context::CompilerContext.getModuleByContent_1 (local.get $src::main::ctx_1) (call $support::ffi::UCS2.fromPtr_1 (local.get $path)) (call $support::ffi::UCS2.fromPtr_1 (local.get $moduleName)) (call $support::ffi::UCS2.fromPtr_1 (local.get $strAddress))))
      (drop (call $src::compiler::context::CompilerContext.printErrors_2 (local.get $src::main::ctx_1) (local.get $src::main::sb_2)))
      (call $system::core::string::string.as_2 (call $src::stringbuilder::StringBuilder.toString_1 (local.get $src::main::sb_2)))
    )
  )
  (func $src::main::parseAndEmitAst_1 (param $moduleName i32) (param $path i32) (param $strAddress i32) (result i32)
    (local $src::main::ctx_2 i64)
    (local $src::main::sb_3 i64)
    (local $src::main::module i64)
    (block $B1 (result i32)
      (local.set $src::main::ctx_2 (call $src::compiler::context::CompilerContext.apply_3))
      (local.set $src::main::sb_3 (call $src::stringbuilder::StringBuilder.apply_3))
      (local.set $src::main::module (call $src::compiler::context::CompilerContext.getModuleByContent_1 (local.get $src::main::ctx_2) (call $support::ffi::UCS2.fromPtr_1 (local.get $path)) (call $support::ffi::UCS2.fromPtr_1 (local.get $moduleName)) (call $support::ffi::UCS2.fromPtr_1 (local.get $strAddress))))
      (call $src::compiler::nodes::CodeNode.printAst_1 (call $src::compiler::context::Module.document_1 (local.get $src::main::module)) (local.get $src::main::sb_3) (i32.const 0))
      (call $system::core::string::string.as_2 (call $src::stringbuilder::StringBuilder.toString_1 (local.get $src::main::sb_3)))
    )
  )
  (func $src::main::parseAndEmitDesugar_1 (param $moduleName i32) (param $path i32) (param $strAddress i32) (result i32)
    (local $src::main::ctx_3 i64)
    (local $src::main::sb_4 i64)
    (local $src::main::module_1 i64)
    (block $B1 (result i32)
      (local.set $src::main::ctx_3 (call $src::compiler::context::CompilerContext.apply_3))
      (local.set $src::main::sb_4 (call $src::stringbuilder::StringBuilder.apply_3))
      (local.set $src::main::module_1 (call $src::compiler::context::CompilerContext.getModuleByContent_1 (local.get $src::main::ctx_3) (call $support::ffi::UCS2.fromPtr_1 (local.get $path)) (call $support::ffi::UCS2.fromPtr_1 (local.get $moduleName)) (call $support::ffi::UCS2.fromPtr_1 (local.get $strAddress))))
      (call $src::compiler::nodes::CodeNode.printNode_1 (call $src::compiler::context::Module.document_1 (local.get $src::main::module_1)) (local.get $src::main::sb_4) (i32.const 0))
      (call $system::core::string::string.as_2 (call $src::stringbuilder::StringBuilder.toString_1 (local.get $src::main::sb_4)))
    )
  )
  (func $%%START%%
    (global.set $system::core::memory::AL_BITS (i32.const 4))
    (global.set $system::core::memory::AL_SIZE (call $system::core::u32::u32.<<_1 (i32.const 0x1) (global.get $system::core::memory::AL_BITS)))
    (global.set $system::core::memory::AL_MASK (call $system::core::u32::u32.-_1 (global.get $system::core::memory::AL_SIZE) (i32.const 0x1)))
    (global.set $system::core::memory::MAX_SIZE_32 (call $system::core::u32::u32.<<_1 (i32.const 0x1) (i32.const 0x1E)))
    (global.set $system::core::memory::HEAP_BASE (call $system::core::u32::u32.*_1 (i32.const 0x40) (i32.const 0x400)))
    (global.set $system::core::memory::startOffset (call $system::core::u32::u32.&_1 (call $system::core::u32::u32.+_1 (global.get $system::core::memory::HEAP_BASE) (global.get $system::core::memory::AL_MASK)) (call $system::core::u32::u32.~_1 (global.get $system::core::memory::AL_MASK))))
    (global.set $system::core::memory::offset (global.get $system::core::memory::startOffset))
    (global.set $src::parser::parser::TEST (i32.const 0))
    (global.set $src::parser::lysgrammar::grammar (call $src::helpers::Nil.apply_1))
    (global.set $src::lexer::lexer::instance (call $src::helpers::Nil.apply_1))
  )
  (start $%%START%%)
)
