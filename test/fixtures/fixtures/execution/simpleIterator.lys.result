"Keyword(import)"
"Whitespace( )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"NewLine(\n\n)"
"Keyword(struct)"
"Whitespace( )"
"Identifier(Iterator)"
"ParenthesesOpen(()"
"Identifier(current)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"Identifier(target)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Keyword(enum)"
"Whitespace( )"
"Identifier(Maybe)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(None)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Some)"
"ParenthesesOpen(()"
"Identifier(value)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(impl)"
"Whitespace( )"
"Identifier(Iterator)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(fun)"
"Whitespace( )"
"Identifier(next)"
"ParenthesesOpen(()"
"Identifier(iter)"
"Operator(:)"
"Whitespace( )"
"Identifier(Iterator)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(Maybe)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(iter)"
"Operator(.)"
"Identifier(current)"
"Whitespace( )"
"Operator(<=)"
"Whitespace( )"
"Identifier(iter)"
"Operator(.)"
"Identifier(target)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(var)"
"Whitespace( )"
"Identifier(r)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(Some)"
"ParenthesesOpen(()"
"Identifier(iter)"
"Operator(.)"
"Identifier(current)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(iter)"
"Operator(.)"
"Identifier(current)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(iter)"
"Operator(.)"
"Identifier(current)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(1)"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(r)"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"Whitespace( )"
"Keyword(else)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(None)"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(test)"
"ParenthesesOpen(()"
"Identifier(from)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"Identifier(to)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"MultiLineComment(/**\n    * This is a candidate sugar syntax for\n    *\n    * var ret = 0\n    * for (value in Iterator(from, to)) {\n    *   ret = ret + value\n    * }\n    */)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(ret)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"NumberLiteral(0)"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(val)"
"Whitespace( )"
"Identifier($iter$)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(Iterator)"
"ParenthesesOpen(()"
"Identifier(from)"
"Comma(,)"
"Whitespace( )"
"Identifier(to)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(loop)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(match)"
"Whitespace( )"
"Identifier(Iterator)"
"Operator(.)"
"Identifier(next)"
"ParenthesesOpen(()"
"Identifier($iter$)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(case)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Some)"
"ParenthesesOpen(()"
"Identifier(value)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(        )"
"Identifier(ret)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(ret)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"Identifier(value)"
"NewLine(\n\n)"
"Whitespace(        )"
"Keyword(continue)"
"NewLine(\n)"
"Whitespace(      )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(case)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(None)"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Keyword(break)"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(ret)"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"MacroDecoration(#[)"
"Identifier(export)"
"VectorClose(])"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"Iterator test\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(test)"
"ParenthesesOpen(()"
"NumberLiteral(1)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(10)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(55)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"spec test 1\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"EndOfFile"