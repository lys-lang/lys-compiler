"Keyword(import)"
"Whitespace( )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"NewLine(\n\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(maxI64)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(i64)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Operator(%)"
"Identifier(wasm)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"ParenthesesOpen(()"
"Identifier(i64)"
"Operator(.)"
"Keyword(const)"
"Whitespace( )"
"NumberLiteral(0xFFFFFFFFFFFF)"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(maxI16inI64)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(i64)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Operator(%)"
"Identifier(wasm)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"ParenthesesOpen(()"
"Identifier(i64)"
"Operator(.)"
"Keyword(const)"
"Whitespace( )"
"NumberLiteral(0xFFFF)"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(i32_one)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Operator(%)"
"Identifier(wasm)"
"Whitespace( )"
"CurlyBracesOpen({)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Keyword(const)"
"Whitespace( )"
"NumberLiteral(1)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(u32_one)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(u32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Operator(%)"
"Identifier(wasm)"
"Whitespace( )"
"CurlyBracesOpen({)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Keyword(const)"
"Whitespace( )"
"NumberLiteral(1)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(i32const_u32)"
"ParenthesesOpen(()"
"Identifier(x)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(u32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Operator(%)"
"Identifier(wasm)"
"Whitespace( )"
"CurlyBracesOpen({)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(get_local)"
"Whitespace( )"
"Identifier($x)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(i32const_i32)"
"ParenthesesOpen(()"
"Identifier(x)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Operator(%)"
"Identifier(wasm)"
"Whitespace( )"
"CurlyBracesOpen({)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(get_local)"
"Whitespace( )"
"Identifier($x)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"MacroDecoration(#[)"
"Identifier(export)"
"VectorClose(])"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"Number sanity checks\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(0)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(1)"
"Whitespace( )"
"Operator(-)"
"Whitespace( )"
"NumberLiteral(1)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"1\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(0)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(10)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"0 / 10\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(1)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(10)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(10)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"10 / 10\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(0)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(10)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(100)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"10 / 100\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(maxI16inI64)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i16)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0xFFFF)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i16)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"2\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(0xFFFF)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i16)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0xFFFFFFFF)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"0xFFFF as i16 as i32\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(0xFFFF)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i16)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0xFFFFFFFF)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"0xFFFF as i16 as i32\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(0x8000)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i16)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Operator(-)"
"NumberLiteral(32768)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"0x8000 as i16 as i32\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(1)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(u32_one)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"3\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(i32const_i32)"
"ParenthesesOpen(()"
"NumberLiteral(44)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(i32const_u32)"
"ParenthesesOpen(()"
"NumberLiteral(44)"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"4\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(i32const_u32)"
"ParenthesesOpen(()"
"NumberLiteral(44)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(i32const_i32)"
"ParenthesesOpen(()"
"NumberLiteral(44)"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"5\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(44)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(10)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(4)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"6\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"ParenthesesOpen(()"
"NumberLiteral(44)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u64)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(10)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u64)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(4)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u64)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"7\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(1)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0xFFFFFFFF)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"8\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(1)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0xFFFFFFFF)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"9\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"ParenthesesOpen(()"
"Operator(-)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(1)"
"ParenthesesClose())"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(1)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"10\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(f64)"
"Operator(.)"
"Identifier(sqrt)"
"ParenthesesOpen(()"
"NumberLiteral(1)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(1)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"sqrt(1)\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(f32)"
"Operator(.)"
"Identifier(sqrt)"
"ParenthesesOpen(()"
"NumberLiteral(4)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(2)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"sqrt(4)\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n)"
"EndOfFile"