"Keyword(import)"
"Whitespace( )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"NewLine(\n)"
"Keyword(import)"
"Whitespace( )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"NewLine(\n\n)"
"Keyword(enum)"
"Whitespace( )"
"Identifier(Color)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(None)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Red)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Custom)"
"ParenthesesOpen(()"
"Identifier(hex)"
"Operator(:)"
"Whitespace( )"
"Identifier(u32)"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(struct)"
"Whitespace( )"
"Identifier(CatBag)"
"ParenthesesOpen(()"
"Identifier(f)"
"Operator(:)"
"Whitespace( )"
"Identifier(Color)"
"Comma(,)"
"Whitespace( )"
"Identifier(g)"
"Operator(:)"
"Whitespace( )"
"Identifier(Red)"
"Whitespace( )"
"Operator(|)"
"Whitespace( )"
"Identifier(None)"
"ParenthesesClose())"
"NewLine(\n\n\n)"
"Keyword(struct)"
"Whitespace( )"
"Identifier(Custom2)"
"ParenthesesOpen(()"
"Identifier(r)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"Identifier(g)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Keyword(val)"
"Whitespace( )"
"Identifier(x)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(Custom2)"
"ParenthesesOpen(()"
"NumberLiteral(0)"
"Comma(,)"
"NumberLiteral(0)"
"ParenthesesClose())"
"NewLine(\n)"
"Keyword(val)"
"Whitespace( )"
"Identifier(y)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(Custom2)"
"ParenthesesOpen(()"
"NumberLiteral(0)"
"Comma(,)"
"NumberLiteral(0)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Keyword(private)"
"Whitespace( )"
"Keyword(fun)"
"Whitespace( )"
"Identifier(testLoad)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"testLoad\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(x)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"i32.load(x) == 0\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"i32.load(y) == 0\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(private)"
"Whitespace( )"
"Keyword(fun)"
"Whitespace( )"
"Identifier(testStore)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"testStore\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(i32)"
"Operator(.)"
"Identifier(store)"
"ParenthesesOpen(()"
"Identifier(x)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(3)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(i32)"
"Operator(.)"
"Identifier(store)"
"ParenthesesOpen(()"
"Identifier(y)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(2882400001)"
"ParenthesesClose())"
"Whitespace( )"
"LineComment(// 0xabcdef01\n)"
"Whitespace(    )"
"Identifier(i32)"
"Operator(.)"
"Identifier(store)"
"ParenthesesOpen(()"
"Identifier(y)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(5)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(5)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(private)"
"Whitespace( )"
"Keyword(fun)"
"Whitespace( )"
"Identifier(testNumbers)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"testNumbers\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"NumberLiteral(0xFFFFFFFF)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"Operator(-)"
"NumberLiteral(1)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"0xFFFFFFFF == -1\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"NumberLiteral(0xFFFFFFFF)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"Operator(-)"
"NumberLiteral(1)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"0xFFFFFFFF as u32 == -1 as u32\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(testLoad)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(testStore)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"StringLiteral(\"i32.load(x) %X\")"
"Comma(,)"
"Whitespace( )"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(x)"
"ParenthesesClose())"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"StringLiteral(\"i32.load(y) %X\")"
"Comma(,)"
"Whitespace( )"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"ParenthesesClose())"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"NumberLiteral(0xABCDEF01)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0xABCDEF01)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"0xABCDEF01 as i64 == 0xABCDEF01 as i64\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(x)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(3)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"i32.load(x) == 3\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0xABCDEF01)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"i32.load(y) as u32 == 0xABCDEF01\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0xABCDEF01)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"i32.load(y) == 0xABCDEF01 as i32\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(val)"
"Whitespace( )"
"Identifier(VAR)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(val)"
"Whitespace( )"
"Identifier(VAR2)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"NumberLiteral(0xABCDEF01)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"NewLine(\n\n)"
"Whitespace(      )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(VAR)"
"Comma(,)"
"Whitespace( )"
"Identifier(VAR2)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"VAR == VAR2\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0xABCDEF01)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"i32.load(y) as i64 == 0xABCDEF01 as i64\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(i32)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0xABCDEF01)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u64)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"i32.load(y) as u64 == 0xABCDEF01 as u64\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(u8)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0x01)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"u8.load(y) as i32 == 0x01\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(u8)"
"Operator(.)"
"Identifier(load)"
"ParenthesesOpen(()"
"Identifier(y)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(5)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"ParenthesesClose())"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(5)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"u8.load(y, 5 as u32) as i32 == 5\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n\n\n)"
"MacroDecoration(#[)"
"Identifier(export)"
"VectorClose(])"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"set values in struct\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(a)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(CatBag)"
"ParenthesesOpen(()"
"Identifier(Red)"
"Comma(,)"
"Whitespace( )"
"Identifier(None)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(printMemory)"
"ParenthesesOpen(()"
"Identifier(addressFromRef)"
"ParenthesesOpen(()"
"Identifier(a)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Identifier(CatBag)"
"Operator(.^)"
"Identifier(allocationSize)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"getters of the constructor\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(CatBag)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a is CatBag\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Color)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.f is Color\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(g)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Color)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.g is Color\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Red)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.f is Red\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(g)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(None)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.g is Red\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"setters\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(val)"
"Whitespace( )"
"Identifier(y)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(Custom)"
"ParenthesesOpen(()"
"NumberLiteral(0xAABBCCDD)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(y)"
"Operator(.)"
"Identifier(hex)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0xAABBCCDD)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"y.hex == 0xAABBCCDD\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(y)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(y)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(y)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"y == y\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(var)"
"Whitespace( )"
"Identifier(tmp)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(tmp)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(y)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"tmp == y\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(y)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.f == y\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(tmp)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.f == tmp\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(a)"
"Operator(.)"
"Identifier(g)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(Red)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(g)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Red)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.g is Red\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"validate setters\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Custom)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.f is Custom\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(g)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Red)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.g is Red\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Color)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.f is Color\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(g)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Color)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.g is Color\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(match)"
"Whitespace( )"
"Identifier(a)"
"Operator(.)"
"Identifier(f)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(case)"
"Whitespace( )"
"Identifier(x)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Custom)"
"ParenthesesOpen(()"
"Identifier(hex)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(        )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(x)"
"Operator(.)"
"Identifier(hex)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0xAABBCCDD)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"x.hex == 0xAABBCCDD\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(        )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Identifier(hex)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0xAABBCCDD)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"hex == 0xAABBCCDD\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(      )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(else)"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Whitespace( )"
"Keyword(false)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"a.f is not Custom in pattern matching\")"
"Whitespace( )"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(testNumbers)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"EndOfFile"