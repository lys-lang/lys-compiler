"Keyword(import)"
"Whitespace( )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"Operator(:)"
"Whitespace( )"
"Identifier(u64)"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"Operator(:)"
"Whitespace( )"
"Identifier(string)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(assertEquals)"
"ParenthesesOpen(()"
"Identifier(string)"
"Operator(.)"
"Identifier(stringify)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"ParenthesesClose())"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"Operator(:)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"Operator(:)"
"Whitespace( )"
"Identifier(string)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(assertEquals)"
"ParenthesesOpen(()"
"Identifier(string)"
"Operator(.)"
"Identifier(stringify)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"ParenthesesClose())"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"Operator(:)"
"Whitespace( )"
"Identifier(string)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"ParenthesesClose())"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"Operator(:)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"Operator(:)"
"Whitespace( )"
"Identifier(string)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u64)"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"Operator(:)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(val)"
"Whitespace( )"
"Identifier(size)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(string)"
"Operator(.)"
"Identifier(charLength)"
"ParenthesesOpen(()"
"Identifier(numberToSerialize)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(val)"
"Whitespace( )"
"Identifier(result)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(size)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(expected)"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Operator(!)"
"Identifier(result)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"StringLiteral(\"    number: %d\")"
"Comma(,)"
"Whitespace( )"
"Identifier(numberToSerialize)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"StringLiteral(\"     given: %d\")"
"Comma(,)"
"Whitespace( )"
"Identifier(size)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"StringLiteral(\"  expected: %d\")"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(result)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"assertNumberLength\")"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(assertEquals)"
"ParenthesesOpen(()"
"Identifier(given)"
"Operator(:)"
"Whitespace( )"
"Identifier(string)"
"Comma(,)"
"Whitespace( )"
"Identifier(expected)"
"Operator(:)"
"Whitespace( )"
"Identifier(string)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(val)"
"Whitespace( )"
"Identifier(msg)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"StringLiteral(\"Given: '\")"
"Whitespace( )"
"Operator(++)"
"Whitespace( )"
"Identifier(given)"
"Whitespace( )"
"Operator(++)"
"Whitespace( )"
"StringLiteral(\"' Expected: '\")"
"Whitespace( )"
"Operator(++)"
"Whitespace( )"
"Identifier(expected)"
"Whitespace( )"
"Operator(++)"
"Whitespace( )"
"StringLiteral(\"'\")"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(val)"
"Whitespace( )"
"Identifier(result)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(given)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Identifier(expected)"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Operator(!)"
"Identifier(result)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"StringLiteral(\"given:\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"Identifier(given)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"StringLiteral(\"expected:\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(support)"
"Operator(::)"
"Identifier(env)"
"Operator(::)"
"Identifier(printf)"
"ParenthesesOpen(()"
"Identifier(expected)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(result)"
"Comma(,)"
"Whitespace( )"
"Identifier(msg)"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"MacroDecoration(#[)"
"Identifier(export)"
"VectorClose(])"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"stringifycation of numbers\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"test string equality\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(assertEquals)"
"ParenthesesOpen(()"
"StringLiteral(\"abcd\")"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"abcd\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"get number characters length\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(2)"
"Whitespace(    )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(1)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(4444)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(4)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(2)"
"Whitespace(   )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(2)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(33)"
"Whitespace(  )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(3)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(1)"
"Whitespace(   )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(2)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(0)"
"Whitespace(    )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(1)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(2222222)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(7)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(3333333)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(7)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(444444)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(7)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(123456789)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(9)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(1e5)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(6)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(2E3)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(4)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(3e5)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(6)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"NumberLiteral(4E3)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(4)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumberLength)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(4E3)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i64)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(5)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"number serialization\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"NumberLiteral(1)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"1\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(1)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"-1\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"NumberLiteral(2222222)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u64)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"2222222\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"NumberLiteral(3333333)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"3333333\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"Operator(-)"
"NumberLiteral(444444)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"-444444\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"NumberLiteral(123456789)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"123456789\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"NumberLiteral(1e5)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"100000\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"NumberLiteral(2E3)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"2000\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"NumberLiteral(3e5)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"300000\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"Identifier(assertNumber)"
"ParenthesesOpen(()"
"NumberLiteral(4E3)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"4000\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"EndOfFile"