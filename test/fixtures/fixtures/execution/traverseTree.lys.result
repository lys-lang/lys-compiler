"LineComment(// this snippet is an actual unit test\n)"
"NewLine(\n)"
"Keyword(enum)"
"Whitespace( )"
"Identifier(Tree)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Node)"
"ParenthesesOpen(()"
"Identifier(value)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"Identifier(left)"
"Operator(:)"
"Whitespace( )"
"Identifier(Tree)"
"Comma(,)"
"Whitespace( )"
"Identifier(right)"
"Operator(:)"
"Whitespace( )"
"Identifier(Tree)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Empty)"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(sum)"
"ParenthesesOpen(()"
"Identifier(arg)"
"Operator(:)"
"Whitespace( )"
"Identifier(Tree)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(match)"
"Whitespace( )"
"Identifier(arg)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(case)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Empty)"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"NumberLiteral(0)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(case)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Node)"
"ParenthesesOpen(()"
"Identifier(value)"
"Comma(,)"
"Whitespace( )"
"Identifier(left)"
"Comma(,)"
"Whitespace( )"
"Identifier(right)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Identifier(value)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"Identifier(sum)"
"ParenthesesOpen(()"
"Identifier(left)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"Identifier(sum)"
"ParenthesesOpen(()"
"Identifier(right)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"MacroDecoration(#[)"
"Identifier(export)"
"VectorClose(])"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"Traverse tree\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(val)"
"Whitespace( )"
"Identifier(tree)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(Node)"
"ParenthesesOpen(()"
"NumberLiteral(42)"
"Comma(,)"
"Whitespace( )"
"Identifier(Node)"
"ParenthesesOpen(()"
"NumberLiteral(3)"
"Comma(,)"
"Whitespace( )"
"Identifier(Empty)"
"Comma(,)"
"Whitespace( )"
"Identifier(Empty)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Identifier(Empty)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(sum)"
"ParenthesesOpen(()"
"Identifier(tree)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(45)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"sum(tree) returns 45\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"EndOfFile"