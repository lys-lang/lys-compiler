import support::test

type Tree = Empty | Node

impl Tree for Reference {
  #[inline]
  fun is(self: Tree | ref): boolean = {
    self is Empty || self is Node
  }

  #[explicit]
  #[inline]
  fun as(self: Tree): ref = %wasm {
    (local.get $self)
  }

}
impl Tree {
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Tree, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Tree = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}
impl Empty {
  fun as(self: Empty): Tree = %wasm {
    (local.get $self)
  }

}
impl Node {
  fun as(self: Node): Tree = %wasm {
    (local.get $self)
  }

}

type Empty = %struct {}


impl Empty for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Empty {
  #[inline]
  private fun Empty$discriminant(): u64 = {
    val discriminant: u32 = Empty.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): Empty = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Empty.^allocationSize))
    $ref
  }

  fun as(self: Empty): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Empty = %wasm {
    (i64.or (call $Empty$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Empty, b: Empty): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Empty, b: Empty): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Empty, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Empty = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

type Node = %struct {a: Tree | Forest}


impl Node for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Node {
  #[inline]
  private fun Node$discriminant(): u64 = {
    val discriminant: u32 = Node.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(a: TreeForest): Node = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Node.^allocationSize))
    property$0($ref, a)
    $ref
  }

  fun as(self: Node): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Node = %wasm {
    (i64.or (call $Node$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Node, b: Node): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Node, b: Node): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun a(self: Node): TreeForest = property$0(self)

  #[setter]
  fun a(self: Node, value: TreeForest): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Node): TreeForest = loadPropertyWithOffset$0(self, Node.^property$0_offset)

  #[inline]
  private fun property$0(self: Node, value: TreeForest): void = storePropertyWithOffset$0(self, value, Node.^property$0_offset)

  #[inline]
  private fun loadPropertyWithOffset$0(self: Node, offset: u32): TreeForest = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $self))))
  }

  #[inline]
  private fun storePropertyWithOffset$0(self: Node, value: TreeForest, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $self))) (local.get $value))
  }

  fun store(lhs: ref, rhs: Node, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Node = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

type Forest = Nil | Cons

impl Forest for Reference {
  #[inline]
  fun is(self: Forest | ref): boolean = {
    self is Nil || self is Cons
  }

  #[explicit]
  #[inline]
  fun as(self: Forest): ref = %wasm {
    (local.get $self)
  }

}
impl Forest {
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Forest, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Forest = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}
impl Nil {
  fun as(self: Nil): Forest = %wasm {
    (local.get $self)
  }

}
impl Cons {
  fun as(self: Cons): Forest = %wasm {
    (local.get $self)
  }

}

type Nil = %struct {}


impl Nil for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Nil {
  #[inline]
  private fun Nil$discriminant(): u64 = {
    val discriminant: u32 = Nil.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): Nil = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Nil.^allocationSize))
    $ref
  }

  fun as(self: Nil): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Nil = %wasm {
    (i64.or (call $Nil$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Nil, b: Nil): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Nil, b: Nil): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Nil, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Nil = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

type Cons = %struct {tree: Tree | Forest}


impl Cons for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Cons {
  #[inline]
  private fun Cons$discriminant(): u64 = {
    val discriminant: u32 = Cons.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(tree: TreeForest): Cons = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Cons.^allocationSize))
    property$0($ref, tree)
    $ref
  }

  fun as(self: Cons): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Cons = %wasm {
    (i64.or (call $Cons$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Cons, b: Cons): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Cons, b: Cons): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun tree(self: Cons): TreeForest = property$0(self)

  #[setter]
  fun tree(self: Cons, value: TreeForest): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Cons): TreeForest = loadPropertyWithOffset$0(self, Cons.^property$0_offset)

  #[inline]
  private fun property$0(self: Cons, value: TreeForest): void = storePropertyWithOffset$0(self, value, Cons.^property$0_offset)

  #[inline]
  private fun loadPropertyWithOffset$0(self: Cons, offset: u32): TreeForest = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $self))))
  }

  #[inline]
  private fun storePropertyWithOffset$0(self: Cons, value: TreeForest, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $self))) (local.get $value))
  }

  fun store(lhs: ref, rhs: Cons, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Cons = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

#[export]
fun main(): void = {
  START("Forest & Tree tests")
  var a = Nil
  var b = Cons(Empty)
  var c = Cons(Nil)
  var d = Cons(Node(Empty))
  var e = Node(Nil)
  verify(a is Nil, "a is Nil")
  verify(a is Forest, "a is Fores")
  verify(b is Forest, "b is Fores")
  verify(c is Cons, "c is Cons")
  verify(e is Node, "e is Node")
  verify(e is Tree, "e is Tree")
  END()
}

