import support::test


type Iterator = %struct {current: i32, target: i32}


impl Iterator for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Iterator {
  #[inline]
  private fun Iterator$discriminant(): u64 = {
    val discriminant: u32 = Iterator.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(current: i32, target: i32): Iterator = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Iterator.^allocationSize))
    property$0($ref, current)
    property$1($ref, target)
    $ref
  }

  fun as(self: Iterator): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Iterator = %wasm {
    (i64.or (call $Iterator$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Iterator, b: Iterator): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Iterator, b: Iterator): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun current(self: Iterator): i32 = property$0(self)

  #[setter]
  fun current(self: Iterator, value: i32): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Iterator): i32 = i32.load(self, Iterator.^property$0_offset)

  #[inline]
  private fun property$0(self: Iterator, value: i32): void = i32.store(self, value, Iterator.^property$0_offset)

  #[getter]
  fun target(self: Iterator): i32 = property$1(self)

  #[setter]
  fun target(self: Iterator, value: i32): void = property$1(self, value)

  #[inline]
  private fun property$1(self: Iterator): i32 = i32.load(self, Iterator.^property$1_offset)

  #[inline]
  private fun property$1(self: Iterator, value: i32): void = i32.store(self, value, Iterator.^property$1_offset)

  fun store(lhs: ref, rhs: Iterator, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Iterator = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

type Maybe = None | Some

impl Maybe for Reference {
  #[inline]
  fun is(self: Maybe | ref): boolean = {
    self is None || self is Some
  }

  #[explicit]
  #[inline]
  fun as(self: Maybe): ref = %wasm {
    (local.get $self)
  }

}
impl Maybe {
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Maybe, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Maybe = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}
impl None {
  fun as(self: None): Maybe = %wasm {
    (local.get $self)
  }

}
impl Some {
  fun as(self: Some): Maybe = %wasm {
    (local.get $self)
  }

}

type None = %struct {}


impl None for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl None {
  #[inline]
  private fun None$discriminant(): u64 = {
    val discriminant: u32 = None.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): None = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, None.^allocationSize))
    $ref
  }

  fun as(self: None): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): None = %wasm {
    (i64.or (call $None$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: None, b: None): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: None, b: None): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: None, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): None = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

type Some = %struct {value: i32}


impl Some for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Some {
  #[inline]
  private fun Some$discriminant(): u64 = {
    val discriminant: u32 = Some.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(value: i32): Some = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Some.^allocationSize))
    property$0($ref, value)
    $ref
  }

  fun as(self: Some): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Some = %wasm {
    (i64.or (call $Some$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Some, b: Some): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Some, b: Some): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun value(self: Some): i32 = property$0(self)

  #[setter]
  fun value(self: Some, value: i32): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Some): i32 = i32.load(self, Some.^property$0_offset)

  #[inline]
  private fun property$0(self: Some, value: i32): void = i32.store(self, value, Some.^property$0_offset)

  fun store(lhs: ref, rhs: Some, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Some = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

impl Iterator {
  fun next(iter: Iterator): Maybe = {
    if (iter.current <= iter.target) {
      var r = Some(iter.current)
      iter.current = iter.current + 1
      r
    } else {
      None
    }
  }

}
fun test(from: i32, to: i32): i32 = {
  var ret = 0
  val $iter$ = Iterator(from, to)
  loop {
    match Iterator.next($iter$) {
      case $ is Some -> {
        val value = $.value
        ret = ret + value
        continue
      }
      case $ is None -> continue
    }
  }
  ret
}

#[export]
fun main(): void = {
  START("Iterator test")
  mustEqual(test(1, 10), 55, "spec test 1")
  END()
}

