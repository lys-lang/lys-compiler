"Keyword(import)"
"Whitespace( )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"NewLine(\n\n)"
"Keyword(enum)"
"Whitespace( )"
"Identifier(Color)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Red)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Green)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Blue)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Custom)"
"ParenthesesOpen(()"
"Identifier(r)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"Identifier(g)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Comma(,)"
"Whitespace( )"
"Identifier(b)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(isRed)"
"ParenthesesOpen(()"
"Identifier(color)"
"Operator(:)"
"Whitespace( )"
"Identifier(Color)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(boolean)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(match)"
"Whitespace( )"
"Identifier(color)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(case)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Red)"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Keyword(true)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(case)"
"Whitespace( )"
"Identifier(test)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Custom)"
"ParenthesesOpen(()"
"Identifier(r)"
"Comma(,)"
"Whitespace( )"
"Identifier(g)"
"Comma(,)"
"Whitespace( )"
"Identifier(b)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Identifier(r)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(255)"
"Whitespace( )"
"Operator(&&)"
"Whitespace( )"
"Identifier(g)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0)"
"Whitespace( )"
"Operator(&&)"
"Whitespace( )"
"Identifier(b)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(else)"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Keyword(false)"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"MacroDecoration(#[)"
"Identifier(export)"
"VectorClose(])"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"pattern matching with deconstruct\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(isRed)"
"ParenthesesOpen(()"
"Identifier(Red)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Keyword(true)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"isRed(Red)\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(isRed)"
"ParenthesesOpen(()"
"Identifier(Green)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Keyword(false)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"isRed(Green)\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(isRed)"
"ParenthesesOpen(()"
"Identifier(Blue)"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Keyword(false)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"isRed(Blue)\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(isRed)"
"ParenthesesOpen(()"
"Identifier(Custom)"
"ParenthesesOpen(()"
"NumberLiteral(255)"
"Comma(,)"
"NumberLiteral(0)"
"Comma(,)"
"NumberLiteral(0)"
"ParenthesesClose())"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Keyword(true)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"isRed(Custom(255,0,0))\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(isRed)"
"ParenthesesOpen(()"
"Identifier(Custom)"
"ParenthesesOpen(()"
"NumberLiteral(0)"
"Comma(,)"
"NumberLiteral(1)"
"Comma(,)"
"NumberLiteral(3)"
"ParenthesesClose())"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Keyword(false)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"isRed(Custom(0,1,3))\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(isRed)"
"ParenthesesOpen(()"
"Identifier(Custom)"
"ParenthesesOpen(()"
"NumberLiteral(255)"
"Comma(,)"
"NumberLiteral(1)"
"Comma(,)"
"NumberLiteral(3)"
"ParenthesesClose())"
"ParenthesesClose())"
"Comma(,)"
"Whitespace( )"
"Keyword(false)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"isRed(Custom(255,1,3))\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"Operator(::)"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"EndOfFile"