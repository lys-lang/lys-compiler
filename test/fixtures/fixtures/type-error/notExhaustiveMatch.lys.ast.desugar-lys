type color = Red | Green | Blue

impl color for Reference {
  #[inline]
  fun is(self: color | ref): boolean = {
    self is Red || self is Green || self is Blue
  }

  #[explicit]
  #[inline]
  fun as(self: color): ref = %wasm {
    (local.get $self)
  }

}
impl color {
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: color, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): color = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}
impl Red {
  fun as(self: Red): color = %wasm {
    (local.get $self)
  }

}
impl Green {
  fun as(self: Green): color = %wasm {
    (local.get $self)
  }

}
impl Blue {
  fun as(self: Blue): color = %wasm {
    (local.get $self)
  }

}

type Red = %struct {}


impl Red for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Red {
  #[inline]
  private fun Red$discriminant(): u64 = {
    val discriminant: u32 = Red.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): Red = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Red.^allocationSize))
    $ref
  }

  fun as(self: Red): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Red = %wasm {
    (i64.or (call $Red$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Red, b: Red): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Red, b: Red): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Red, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Red = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

type Green = %struct {}


impl Green for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Green {
  #[inline]
  private fun Green$discriminant(): u64 = {
    val discriminant: u32 = Green.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): Green = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Green.^allocationSize))
    $ref
  }

  fun as(self: Green): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Green = %wasm {
    (i64.or (call $Green$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Green, b: Green): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Green, b: Green): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Green, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Green = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

type Blue = %struct {}


impl Blue for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Blue {
  #[inline]
  private fun Blue$discriminant(): u64 = {
    val discriminant: u32 = Blue.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): Blue = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Blue.^allocationSize))
    $ref
  }

  fun as(self: Blue): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Blue = %wasm {
    (i64.or (call $Blue$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Blue, b: Blue): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Blue, b: Blue): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Blue, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Blue = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

fun test(x: color): color = match x {
    case $ is Red -> Red
    case $ is Green -> Green
  }

fun test1(x: color): color = match x {
    case $ is Red -> Red
    case $ is Green -> Green
    case $ is Blue -> Blue
  }

fun test3(x: color): color = match x {
    case $ is Red -> Red
    else -> Blue
  }

