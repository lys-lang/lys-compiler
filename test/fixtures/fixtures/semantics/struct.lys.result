"Keyword(enum)"
"Whitespace( )"
"Identifier(Number)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Infinity)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(NDet)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Real)"
"ParenthesesOpen(()"
"Identifier(number)"
"Operator(:)"
"Whitespace( )"
"Identifier(f32)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Natural)"
"ParenthesesOpen(()"
"Identifier(number)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(Complex)"
"ParenthesesOpen(()"
"Identifier(real)"
"Operator(:)"
"Whitespace( )"
"Identifier(f32)"
"Comma(,)"
"Whitespace( )"
"Identifier(imaginary)"
"Operator(:)"
"Whitespace( )"
"Identifier(f32)"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"LineComment(// type Number = Infinity | NDet | Real | Natural | Complex\n)"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(isComplex)"
"ParenthesesOpen(()"
"Identifier(number)"
"Operator(:)"
"Whitespace( )"
"Identifier(Number)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(boolean)"
"Whitespace( )"
"Operator(=)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(match)"
"Whitespace( )"
"Identifier(number)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(case)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Real)"
"ParenthesesOpen(()"
"Identifier(_)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Keyword(false)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(case)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Natural)"
"ParenthesesOpen(()"
"Identifier(_)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Keyword(false)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(case)"
"Whitespace( )"
"Keyword(is)"
"Whitespace( )"
"Identifier(Complex)"
"ParenthesesOpen(()"
"Identifier(_)"
"Comma(,)"
"Whitespace( )"
"Identifier(imaginary)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Identifier(imaginary)"
"Whitespace( )"
"Operator(!=)"
"Whitespace( )"
"NumberLiteral(0.0)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(else)"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Keyword(false)"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(isComplex)"
"ParenthesesOpen(()"
"Identifier(Infinity)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(isComplex)"
"ParenthesesOpen(()"
"Identifier(Real)"
"ParenthesesOpen(()"
"NumberLiteral(0.0)"
"ParenthesesClose())"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(isComplex)"
"ParenthesesOpen(()"
"Identifier(Natural)"
"ParenthesesOpen(()"
"NumberLiteral(123)"
"ParenthesesClose())"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(isComplex)"
"ParenthesesOpen(()"
"Identifier(Complex)"
"ParenthesesOpen(()"
"NumberLiteral(0.0)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(99.1)"
"ParenthesesClose())"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n)"
"EndOfFile"