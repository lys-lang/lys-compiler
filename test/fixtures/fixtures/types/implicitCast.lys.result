"Keyword(import)"
"Whitespace( )"
"Identifier(support)"
"Operator(::)"
"Identifier(test)"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(test1)"
"ParenthesesOpen(()"
"Identifier(x)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(x)"
"NewLine(\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main2)"
"ParenthesesOpen(()"
"Identifier(x)"
"Operator(:)"
"Whitespace( )"
"Identifier(u8)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(i64)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(test1)"
"ParenthesesOpen(()"
"Identifier(x)"
"ParenthesesClose())"
"NewLine(\n\n\n\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(testMatchWithDifferentTypes)"
"ParenthesesOpen(()"
"Identifier(input)"
"Operator(:)"
"Whitespace( )"
"Identifier(i32)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(boolean)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(match)"
"Whitespace( )"
"Identifier(input)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(case)"
"Whitespace( )"
"NumberLiteral(1)"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Keyword(true)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(else)"
"Whitespace( )"
"Operator(->)"
"Whitespace( )"
"Keyword(false)"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"MacroDecoration(#[)"
"Identifier(export)"
"VectorClose(])"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(main)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(void)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(START)"
"ParenthesesOpen(()"
"StringLiteral(\"Implicit number casting\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(x)"
"Operator(:)"
"Whitespace( )"
"Identifier(u16)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"ParenthesesOpen(()"
"NumberLiteral(10)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u8)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(mustEqual)"
"ParenthesesOpen(()"
"Identifier(x)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(10)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"eq(10_u16, 10_i32)\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(testMatchWithDifferentTypes)"
"ParenthesesOpen(()"
"NumberLiteral(0)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Keyword(false)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"match 0\")"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(testMatchWithDifferentTypes)"
"ParenthesesOpen(()"
"NumberLiteral(1)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Keyword(true)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"match 1\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(u8_1)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"NumberLiteral(1)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u8)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"Identifier(testMatchWithDifferentTypes)"
"ParenthesesOpen(()"
"Identifier(u8_1)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"Keyword(true)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"match 1.1\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(verify)"
"ParenthesesOpen(()"
"NumberLiteral(0.0)"
"Whitespace( )"
"Operator(==)"
"Whitespace( )"
"NumberLiteral(0)"
"Comma(,)"
"Whitespace( )"
"StringLiteral(\"0.0 == 0\")"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(END)"
"ParenthesesOpen(()"
"ParenthesesClose())"
"NewLine(\n)"
"CurlyBracesClose(})"
"EndOfFile"