
type Simple = %struct {}


impl Simple for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Simple {
  #[inline]
  private fun Simple$discriminant(): u64 = {
    val discriminant: u32 = Simple.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): Simple = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Simple.^allocationSize))
    $ref
  }

  fun as(self: Simple): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Simple = %wasm {
    (i64.or (call $Simple$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Simple, b: Simple): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Simple, b: Simple): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: Simple, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Simple = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}


type WithInt = %struct {a: i32}


impl WithInt for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl WithInt {
  #[inline]
  private fun WithInt$discriminant(): u64 = {
    val discriminant: u32 = WithInt.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(a: i32): WithInt = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, WithInt.^allocationSize))
    property$0($ref, a)
    $ref
  }

  fun as(self: WithInt): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): WithInt = %wasm {
    (i64.or (call $WithInt$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: WithInt, b: WithInt): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: WithInt, b: WithInt): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun a(self: WithInt): i32 = property$0(self)

  #[setter]
  fun a(self: WithInt, value: i32): void = property$0(self, value)

  #[inline]
  private fun property$0(self: WithInt): i32 = i32.load(self, WithInt.^property$0_offset)

  #[inline]
  private fun property$0(self: WithInt, value: i32): void = i32.store(self, value, WithInt.^property$0_offset)

  fun store(lhs: ref, rhs: WithInt, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): WithInt = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

