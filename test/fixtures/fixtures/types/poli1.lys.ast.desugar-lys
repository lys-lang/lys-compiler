
type True = %struct {}


impl True for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl True {
  #[inline]
  private fun True$discriminant(): u64 = {
    val discriminant: u32 = True.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): True = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, True.^allocationSize))
    $ref
  }

  fun as(self: True): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): True = %wasm {
    (i64.or (call $True$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: True, b: True): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: True, b: True): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: True, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): True = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}


type False = %struct {}


impl False for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl False {
  #[inline]
  private fun False$discriminant(): u64 = {
    val discriminant: u32 = False.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(): False = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, False.^allocationSize))
    $ref
  }

  fun as(self: False): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): False = %wasm {
    (i64.or (call $False$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: False, b: False): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: False, b: False): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  fun store(lhs: ref, rhs: False, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): False = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

type Boolean = True | False

impl Boolean for Reference {
  #[inline]
  fun is(self: Boolean | ref): boolean = {
    self is True || self is False
  }

  #[explicit]
  #[inline]
  fun as(self: Boolean): ref = %wasm {
    (local.get $self)
  }

}
impl Boolean {
  fun ==(lhs: ref, rhs: ref): boolean = lhs == rhs

  fun !=(lhs: ref, rhs: ref): boolean = lhs != rhs

  fun store(lhs: ref, rhs: Boolean, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Boolean = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}
impl True {
  fun as(self: True): Boolean = %wasm {
    (local.get $self)
  }

}
impl False {
  fun as(self: False): Boolean = %wasm {
    (local.get $self)
  }

}

fun gt0(x: i32): Boolean = if (x > 0) True() else False()

fun isTrue(a: Boolean): boolean = match a {
    case $ is True -> false
    else -> false
  }

