
type Keccak = %struct {data: bytes, result: bytes}


impl Keccak for Reference {
  #[inline]
  fun is(a: Self | ref): boolean = {
    val discriminant: u32 = Self.^discriminant
    ref.getDiscriminant(a) == discriminant
  }

  #[explicit]
  #[inline]
  fun as(lhs: Self): ref = %wasm {
    (local.get $lhs)
  }

}
impl Keccak {
  #[inline]
  private fun Keccak$discriminant(): u64 = {
    val discriminant: u32 = Keccak.^discriminant
    discriminant as u64 << 32
  }

  #[inline]
  fun apply(data: bytes, result: bytes): Keccak = {
    var $ref = fromPointer(system::core::memory::calloc(1 as u32, Keccak.^allocationSize))
    property$0($ref, data)
    property$1($ref, result)
    $ref
  }

  fun as(self: Keccak): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  private fun fromPointer(ptr: u32): Keccak = %wasm {
    (i64.or (call $Keccak$discriminant) (i64.extend_u/i32 (local.get $ptr)))
  }

  fun ==(a: Keccak, b: Keccak): boolean = %wasm {
    (i64.eq (local.get $a) (local.get $b))
  }

  fun !=(a: Keccak, b: Keccak): boolean = %wasm {
    (i64.ne (local.get $a) (local.get $b))
  }

  #[getter]
  fun data(self: Keccak): bytes = property$0(self)

  #[setter]
  fun data(self: Keccak, value: bytes): void = property$0(self, value)

  #[inline]
  private fun property$0(self: Keccak): bytes = bytes.load(self, Keccak.^property$0_offset)

  #[inline]
  private fun property$0(self: Keccak, value: bytes): void = bytes.store(self, value, Keccak.^property$0_offset)

  #[getter]
  fun result(self: Keccak): bytes = property$1(self)

  #[setter]
  fun result(self: Keccak, value: bytes): void = property$1(self, value)

  #[inline]
  private fun property$1(self: Keccak): bytes = bytes.load(self, Keccak.^property$1_offset)

  #[inline]
  private fun property$1(self: Keccak, value: bytes): void = bytes.store(self, value, Keccak.^property$1_offset)

  fun store(lhs: ref, rhs: Keccak, offset: u32): void = %wasm {
    (i64.store (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))) (local.get $rhs))
  }

  fun load(lhs: ref, offset: u32): Keccak = %wasm {
    (i64.load (i32.add (local.get $offset) (call $addressFromRef (local.get $lhs))))
  }

}

impl Keccak {
  fun apply(): Keccak = {
    val context = bytes(616 as u32)
    val result = bytes(32 as u32)
    keccakInit(context.ptr)
    Keccak(context, result)
  }

  fun reset(self: Keccak): void = {
    keccakInit(self.data.ptr)
  }

  fun update(self: Keccak, data: bytes): void = {
    update(self, data.ptr, data.length)
  }

  fun update(self: Keccak, address: u32, length: u32): void = {
    keccakUpdate(self.data.ptr, address, length)
  }

  fun digest(self: Keccak): bytes = {
    keccakFinish(self.data.ptr, self.result.ptr)
    self.result
  }

  private fun keccakTheta(context: ref): void = {
    val C0 = i64.load(context, 0 as u32) ^ i64.load(context, 40 as u32) ^ i64.load(context, 80 as u32) ^ i64.load(context, 120 as u32) ^ i64.load(context, 160 as u32)
    val C1 = i64.load(context, 8 as u32) ^ i64.load(context, 48 as u32) ^ i64.load(context, 88 as u32) ^ i64.load(context, 128 as u32) ^ i64.load(context, 168 as u32)
    val C2 = i64.load(context, 16 as u32) ^ i64.load(context, 56 as u32) ^ i64.load(context, 96 as u32) ^ i64.load(context, 136 as u32) ^ i64.load(context, 176 as u32)
    val C3 = i64.load(context, 24 as u32) ^ i64.load(context, 64 as u32) ^ i64.load(context, 104 as u32) ^ i64.load(context, 144 as u32) ^ i64.load(context, 184 as u32)
    val C4 = i64.load(context, 32 as u32) ^ i64.load(context, 72 as u32) ^ i64.load(context, 112 as u32) ^ i64.load(context, 152 as u32) ^ i64.load(context, 192 as u32)
    val D0 = C4 ^ i64.rotl(C1, 1 as i64)
    val D1 = C0 ^ i64.rotl(C2, 1 as i64)
    val D2 = C1 ^ i64.rotl(C3, 1 as i64)
    val D3 = C2 ^ i64.rotl(C4, 1 as i64)
    val D4 = C3 ^ i64.rotl(C0, 1 as i64)
    i64.store(context, i64.load(context, 0 as u32) ^ D0, 0 as u32)
    i64.store(context, i64.load(context, 40 as u32) ^ D0, 40 as u32)
    i64.store(context, i64.load(context, 80 as u32) ^ D0, 80 as u32)
    i64.store(context, i64.load(context, 120 as u32) ^ D0, 120 as u32)
    i64.store(context, i64.load(context, 160 as u32) ^ D0, 160 as u32)
    i64.store(context, i64.load(context, 8 as u32) ^ D1, 8 as u32)
    i64.store(context, i64.load(context, 48 as u32) ^ D1, 48 as u32)
    i64.store(context, i64.load(context, 88 as u32) ^ D1, 88 as u32)
    i64.store(context, i64.load(context, 128 as u32) ^ D1, 128 as u32)
    i64.store(context, i64.load(context, 168 as u32) ^ D1, 168 as u32)
    i64.store(context, i64.load(context, 16 as u32) ^ D2, 16 as u32)
    i64.store(context, i64.load(context, 56 as u32) ^ D2, 56 as u32)
    i64.store(context, i64.load(context, 96 as u32) ^ D2, 96 as u32)
    i64.store(context, i64.load(context, 136 as u32) ^ D2, 136 as u32)
    i64.store(context, i64.load(context, 176 as u32) ^ D2, 176 as u32)
    i64.store(context, i64.load(context, 24 as u32) ^ D3, 24 as u32)
    i64.store(context, i64.load(context, 64 as u32) ^ D3, 64 as u32)
    i64.store(context, i64.load(context, 104 as u32) ^ D3, 104 as u32)
    i64.store(context, i64.load(context, 144 as u32) ^ D3, 144 as u32)
    i64.store(context, i64.load(context, 184 as u32) ^ D3, 184 as u32)
    i64.store(context, i64.load(context, 32 as u32) ^ D4, 32 as u32)
    i64.store(context, i64.load(context, 72 as u32) ^ D4, 72 as u32)
    i64.store(context, i64.load(context, 112 as u32) ^ D4, 112 as u32)
    i64.store(context, i64.load(context, 152 as u32) ^ D4, 152 as u32)
    i64.store(context, i64.load(context, 192 as u32) ^ D4, 192 as u32)
  }

  private fun keccakRho(contextRef: ref, rotationConsts: ref): void = {
    var i = 0 as u32
    loop {
      if (i >= 24 as u32) {
        continue
      } else {
        val offset = 1 as u32 + i << 3
        i64.store(contextRef, i64.rotl(i64.load(contextRef, offset), i64.load8_u(rotationConsts, i)), offset)
        i = i + 1 as u32
        continue
      }
    }
  }

  private fun keccakPi(context: ref): void = {
    val A1 = i64.load(context, 8 as u32)
    i64.store(context, i64.load(context, 48 as u32), 8 as u32)
    i64.store(context, i64.load(context, 72 as u32), 48 as u32)
    i64.store(context, i64.load(context, 176 as u32), 72 as u32)
    i64.store(context, i64.load(context, 112 as u32), 176 as u32)
    i64.store(context, i64.load(context, 160 as u32), 112 as u32)
    i64.store(context, i64.load(context, 16 as u32), 160 as u32)
    i64.store(context, i64.load(context, 96 as u32), 16 as u32)
    i64.store(context, i64.load(context, 104 as u32), 96 as u32)
    i64.store(context, i64.load(context, 152 as u32), 104 as u32)
    i64.store(context, i64.load(context, 184 as u32), 152 as u32)
    i64.store(context, i64.load(context, 120 as u32), 184 as u32)
    i64.store(context, i64.load(context, 32 as u32), 120 as u32)
    i64.store(context, i64.load(context, 192 as u32), 32 as u32)
    i64.store(context, i64.load(context, 168 as u32), 192 as u32)
    i64.store(context, i64.load(context, 64 as u32), 168 as u32)
    i64.store(context, i64.load(context, 128 as u32), 64 as u32)
    i64.store(context, i64.load(context, 40 as u32), 128 as u32)
    i64.store(context, i64.load(context, 24 as u32), 40 as u32)
    i64.store(context, i64.load(context, 144 as u32), 24 as u32)
    i64.store(context, i64.load(context, 136 as u32), 144 as u32)
    i64.store(context, i64.load(context, 88 as u32), 136 as u32)
    i64.store(context, i64.load(context, 56 as u32), 88 as u32)
    i64.store(context, i64.load(context, 80 as u32), 56 as u32)
    i64.store(context, A1, 80 as u32)
  }

  private fun keccakChi(context: ref): void = {
    var i = 0 as u32
    loop {
      if (i >= 25 as u32) continue
      val A0 = i64.load(context, i << 3)
      val A1 = i64.load(context, i + 1 as u32 << 3)
      i64.store(context, i64.load(context, i << 3) ^ ~A1 & i64.load(context, i + 2 as u32 << 3), i << 3)
      i64.store(context, i64.load(context, i + 1 as u32 << 3) ^ ~i64.load(context, i + 2 as u32 << 3) & i64.load(context, i + 3 as u32 << 3), i + 1 as u32 << 3)
      i64.store(context, i64.load(context, i + 2 as u32 << 3) ^ ~i64.load(context, i + 3 as u32 << 3) & i64.load(context, i + 4 as u32 << 3), i + 2 as u32 << 3)
      i64.store(context, i64.load(context, i + 3 as u32 << 3) ^ ~i64.load(context, i + 4 as u32 << 3) & A0, i + 3 as u32 << 3)
      i64.store(context, i64.load(context, i + 4 as u32 << 3) ^ ~A0 & A1, i + 4 as u32 << 3)
      i = i + 5 as u32
      continue
    }
  }

  private fun keccakPermute(contextOffset: u32): void = {
    val roundConsts = contextOffset + 400 as u32 as ref
    val rotationConsts = contextOffset + 592 as u32 as ref
    val contextRef = contextOffset as ref
    var round = 0
    loop {
      if (round >= 24) {
        continue
      } else {
        keccakTheta(contextRef)
        keccakRho(contextRef, rotationConsts)
        keccakPi(contextRef)
        keccakChi(contextRef)
        i64.store(contextRef, i64.load(contextRef) ^ i64.load(roundConsts, round as u32 << 3))
        round = round + 1
        continue
      }
    }
  }

  private fun keccakBlock(inputOffset: u32, contextOffset: u32): void = {
    val input = inputOffset as ref
    val context = contextOffset as ref
    i64.store(context, i64.load(context, 0 as u32) ^ i64.load(input, 0 as u32), 0 as u32)
    i64.store(context, i64.load(context, 8 as u32) ^ i64.load(input, 8 as u32), 8 as u32)
    i64.store(context, i64.load(context, 16 as u32) ^ i64.load(input, 16 as u32), 16 as u32)
    i64.store(context, i64.load(context, 24 as u32) ^ i64.load(input, 24 as u32), 24 as u32)
    i64.store(context, i64.load(context, 32 as u32) ^ i64.load(input, 32 as u32), 32 as u32)
    i64.store(context, i64.load(context, 40 as u32) ^ i64.load(input, 40 as u32), 40 as u32)
    i64.store(context, i64.load(context, 48 as u32) ^ i64.load(input, 48 as u32), 48 as u32)
    i64.store(context, i64.load(context, 56 as u32) ^ i64.load(input, 56 as u32), 56 as u32)
    i64.store(context, i64.load(context, 64 as u32) ^ i64.load(input, 64 as u32), 64 as u32)
    i64.store(context, i64.load(context, 72 as u32) ^ i64.load(input, 72 as u32), 72 as u32)
    i64.store(context, i64.load(context, 80 as u32) ^ i64.load(input, 80 as u32), 80 as u32)
    i64.store(context, i64.load(context, 88 as u32) ^ i64.load(input, 88 as u32), 88 as u32)
    i64.store(context, i64.load(context, 96 as u32) ^ i64.load(input, 96 as u32), 96 as u32)
    i64.store(context, i64.load(context, 104 as u32) ^ i64.load(input, 104 as u32), 104 as u32)
    i64.store(context, i64.load(context, 112 as u32) ^ i64.load(input, 112 as u32), 112 as u32)
    i64.store(context, i64.load(context, 120 as u32) ^ i64.load(input, 120 as u32), 120 as u32)
    i64.store(context, i64.load(context, 128 as u32) ^ i64.load(input, 128 as u32), 128 as u32)
    keccakPermute(contextOffset)
  }

  private fun keccakInit(contextOffset: u32): void = {
    keccakReset(contextOffset)
    val roundConsts = contextOffset + 400 as u32 as ref
    u64.store(roundConsts, 0x0000000000000001, 0 as u32)
    u64.store(roundConsts, 0x0000000000008082, 8 as u32)
    u64.store(roundConsts, 0x800000000000808A, 16 as u32)
    u64.store(roundConsts, 0x8000000080008000, 24 as u32)
    u64.store(roundConsts, 0x000000000000808B, 32 as u32)
    u64.store(roundConsts, 0x0000000080000001, 40 as u32)
    u64.store(roundConsts, 0x8000000080008081, 48 as u32)
    u64.store(roundConsts, 0x8000000000008009, 56 as u32)
    u64.store(roundConsts, 0x000000000000008A, 64 as u32)
    u64.store(roundConsts, 0x0000000000000088, 72 as u32)
    u64.store(roundConsts, 0x0000000080008009, 80 as u32)
    u64.store(roundConsts, 0x000000008000000A, 88 as u32)
    u64.store(roundConsts, 0x000000008000808B, 96 as u32)
    u64.store(roundConsts, 0x800000000000008B, 104 as u32)
    u64.store(roundConsts, 0x8000000000008089, 112 as u32)
    u64.store(roundConsts, 0x8000000000008003, 120 as u32)
    u64.store(roundConsts, 0x8000000000008002, 128 as u32)
    u64.store(roundConsts, 0x8000000000000080, 136 as u32)
    u64.store(roundConsts, 0x000000000000800A, 144 as u32)
    u64.store(roundConsts, 0x800000008000000A, 152 as u32)
    u64.store(roundConsts, 0x8000000080008081, 160 as u32)
    u64.store(roundConsts, 0x8000000000008080, 168 as u32)
    u64.store(roundConsts, 0x0000000080000001, 176 as u32)
    u64.store(roundConsts, 0x8000000080008008, 184 as u32)
    val rotationConsts = contextOffset + 592 as u32 as ref
    u8.store(rotationConsts, 1 as u8, 0 as u32)
    u8.store(rotationConsts, 62 as u8, 1 as u32)
    u8.store(rotationConsts, 28 as u8, 2 as u32)
    u8.store(rotationConsts, 27 as u8, 3 as u32)
    u8.store(rotationConsts, 36 as u8, 4 as u32)
    u8.store(rotationConsts, 44 as u8, 5 as u32)
    u8.store(rotationConsts, 6 as u8, 6 as u32)
    u8.store(rotationConsts, 55 as u8, 7 as u32)
    u8.store(rotationConsts, 20 as u8, 8 as u32)
    u8.store(rotationConsts, 3 as u8, 9 as u32)
    u8.store(rotationConsts, 10 as u8, 10 as u32)
    u8.store(rotationConsts, 43 as u8, 11 as u32)
    u8.store(rotationConsts, 25 as u8, 12 as u32)
    u8.store(rotationConsts, 39 as u8, 13 as u32)
    u8.store(rotationConsts, 41 as u8, 14 as u32)
    u8.store(rotationConsts, 45 as u8, 15 as u32)
    u8.store(rotationConsts, 15 as u8, 16 as u32)
    u8.store(rotationConsts, 21 as u8, 17 as u32)
    u8.store(rotationConsts, 8 as u8, 18 as u32)
    u8.store(rotationConsts, 18 as u8, 19 as u32)
    u8.store(rotationConsts, 2 as u8, 20 as u32)
    u8.store(rotationConsts, 61 as u8, 21 as u32)
    u8.store(rotationConsts, 56 as u8, 22 as u32)
    u8.store(rotationConsts, 14 as u8, 23 as u32)
  }

  private fun keccakReset(contextOffset: u32): void = {
    system::core::memory::memset(contextOffset, 0 as u8, 616 as u32)
  }

  private fun keccakUpdate(contextOffset: u32, inputOffset: u32, inputLength: u32): void = {
    val residueOffsetRef = contextOffset + 200 as u32 as ref
    val residueBuffer = contextOffset + 208 as u32
    var residueIndex = u32.load(residueOffsetRef)
    var mutInputLength = inputLength
    var mutInputOffset = inputOffset
    if (residueIndex != 0 as u32) {
      var tmp = 136 as u32 - residueIndex
      if (mutInputLength < tmp) {
        tmp = mutInputLength
      }
      system::core::memory::memcpy(residueBuffer + residueIndex, mutInputOffset, tmp)
      residueIndex = residueIndex + tmp
      if (residueIndex == 136 as u32) {
        keccakBlock(mutInputOffset, contextOffset)
        residueIndex = 0 as u32
      }
      u32.store(residueOffsetRef, residueIndex)
      mutInputLength = mutInputLength - tmp
    }
    loop {
      if (mutInputLength < 136 as u32) {
        continue
      }
      keccakBlock(mutInputOffset, contextOffset)
      mutInputOffset = mutInputOffset + 136 as u32
      mutInputLength = mutInputLength - 136 as u32
      continue
    }
    if (mutInputLength > 0 as u32) {
      system::core::memory::memcpy(residueBuffer + residueIndex, mutInputOffset, mutInputLength)
      u32.store(residueOffsetRef, residueIndex + mutInputLength)
    }
  }

  private fun keccakFinish(contextOffset: u32, outputOffset: u32): void = {
    var residueBuffer = contextOffset + 208 as u32
    val residueRef = residueBuffer as ref
    var residueIndex = u32.load(contextOffset + 200 as u32 as ref)
    system::core::memory::memset(residueBuffer + residueIndex, 0 as u8, 136 as u32 - residueIndex)
    u8.store(residueRef, u8.load(residueRef, residueIndex) | 0x01 as u8, residueIndex)
    residueIndex = 135 as u32
    u8.store(residueRef, u8.load(residueRef, residueIndex) | 0x80 as u8, residueIndex)
    keccakBlock(residueBuffer, contextOffset)
    var outputRef = outputOffset as ref
    var contextRef = contextOffset as ref
    i64.store(outputRef, i64.load(contextRef))
    i64.store(outputRef, i64.load(contextRef, 8 as u32), 8 as u32)
    i64.store(outputRef, i64.load(contextRef, 16 as u32), 16 as u32)
    i64.store(outputRef, i64.load(contextRef, 24 as u32), 24 as u32)
  }

}
