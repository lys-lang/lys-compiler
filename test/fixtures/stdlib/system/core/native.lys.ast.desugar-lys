import system::core::boolean

import system::core::u32

import system::core::i32

import system::core::u64

type void = %stack {lowLevelType="void" byteSize=0}


type ref = %injected

type never = %injected

type UnsafeCPointer = %stack {lowLevelType="i32" byteSize=4}


fun addressFromRef(pointer: ref): u32 = %wasm {
  (i32.wrap_i64 (get_local $pointer))
}

fun panic(): never = %wasm {
  (unreachable)
}

impl never {
  fun apply(): never = %wasm {
    (unreachable)
  }

}
trait Reference {
  fun is(lhs: ref): boolean

  fun as(lhs: ref): ref

}
impl ref for Reference {
  fun is(lhs: ref): boolean = false

  fun as(lhs: ref): ref = lhs

}
impl ref {
  fun ==(lhs: ref, rhs: ref): boolean = %wasm {
    (i64.eq (get_local $lhs) (get_local $rhs))
  }

  fun !=(lhs: ref, rhs: ref): boolean = %wasm {
    (i64.ne (get_local $lhs) (get_local $rhs))
  }

  fun as(self: ref): UnsafeCPointer = %wasm {
    (call $addressFromRef (get_local $self))
  }

  #[inline]
  fun getDiscriminant(reference: ref): u32 = %wasm {
    (i32.wrap_i64 (i64.shr_u (local.get $reference) (i64.const 32)))
  }

  fun store(lhs: ref, rhs: ref): void = %wasm {
    (i64.store (call $addressFromRef (get_local $lhs)) (get_local $rhs))
  }

  fun store(lhs: ref, rhs: ref, offset: u32): void = %wasm {
    (i64.store (i32.add (get_local $offset) (call $addressFromRef (get_local $lhs))) (get_local $rhs))
  }

  fun load(lhs: ref): ref = %wasm {
    (i64.load (call $addressFromRef (get_local $lhs)))
  }

  fun load(lhs: ref, offset: u32): ref = %wasm {
    (i64.load (i32.add (get_local $offset) (call $addressFromRef (get_local $lhs))))
  }

}
