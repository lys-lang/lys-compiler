"Keyword(private)"
"Whitespace( )"
"Keyword(fun)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(index)"
"Operator(:)"
"Whitespace( )"
"Identifier(u32)"
"Comma(,)"
"Whitespace( )"
"Identifier(array)"
"Operator(:)"
"Whitespace( )"
"Identifier(bytes)"
"Comma(,)"
"Whitespace( )"
"Identifier(value)"
"Operator(:)"
"Whitespace( )"
"Identifier(u32)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(u32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(array)"
"VectorOpen([)"
"Identifier(index)"
"VectorClose(])"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(value)"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u8)"
"NewLine(\n)"
"Whitespace(  )"
"Identifier(index)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"MultiLineComment(/**\n * Measures the length in bytes of the UCS string\n */)"
"NewLine(\n)"
"Keyword(private)"
"Whitespace( )"
"Keyword(fun)"
"Whitespace( )"
"Identifier(utf8Len)"
"ParenthesesOpen(()"
"Identifier(str)"
"Operator(:)"
"Whitespace( )"
"Identifier(string)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(u32)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(len)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"NumberLiteral(0x0)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(i)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"NumberLiteral(0x0)"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(loop)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(i)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"Identifier(str)"
"Operator(.)"
"Identifier(length)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(break)"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(val)"
"Whitespace( )"
"Identifier(c)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(str)"
"VectorOpen([)"
"Identifier(i)"
"VectorClose(])"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"NumberLiteral(0xd800)"
"Whitespace( )"
"Operator(&&)"
"Whitespace( )"
"Identifier(c)"
"Whitespace( )"
"Operator(<=)"
"Whitespace( )"
"NumberLiteral(0xdbff)"
"Whitespace( )"
"Operator(&&)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(i)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(<)"
"Whitespace( )"
"Identifier(str)"
"Operator(.)"
"Identifier(length)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(var)"
"Whitespace( )"
"Identifier(cn)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(str)"
"VectorOpen([)"
"Identifier(i)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"VectorClose(])"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"NewLine(\n\n)"
"Whitespace(      )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(cn)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"NumberLiteral(0xdc00)"
"Whitespace( )"
"Operator(&&)"
"Whitespace( )"
"Identifier(cn)"
"Whitespace( )"
"Operator(<=)"
"Whitespace( )"
"NumberLiteral(0xdfff)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(        )"
"Identifier(len)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(len)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x4)"
"NewLine(\n)"
"Whitespace(        )"
"Identifier(i)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(i)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x2)"
"NewLine(\n)"
"Whitespace(        )"
"Keyword(continue)"
"NewLine(\n)"
"Whitespace(      )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"NumberLiteral(0x800)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(len)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(len)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x3)"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"Whitespace( )"
"Keyword(else)"
"Whitespace( )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"NumberLiteral(0x80)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(len)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(len)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x2)"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"Whitespace( )"
"Keyword(else)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(len)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(len)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(i)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(i)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(continue)"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(len)"
"NewLine(\n)"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"MultiLineComment(/**\n * Converts a UCS string into an UTF-8 byte array.\n */)"
"NewLine(\n)"
"Keyword(fun)"
"Whitespace( )"
"Identifier(toUtf8)"
"ParenthesesOpen(()"
"Identifier(str)"
"Operator(:)"
"Whitespace( )"
"Identifier(string)"
"ParenthesesClose())"
"Operator(:)"
"Whitespace( )"
"Identifier(bytes)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(out)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(bytes)"
"ParenthesesOpen(()"
"Identifier(utf8Len)"
"ParenthesesOpen(()"
"Identifier(str)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(i)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"NumberLiteral(0x0)"
"NewLine(\n)"
"Whitespace(  )"
"Keyword(var)"
"Whitespace( )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"NumberLiteral(0x0)"
"NewLine(\n\n)"
"Whitespace(  )"
"Keyword(loop)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(    )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(i)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"Identifier(str)"
"Operator(.)"
"Identifier(length)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(break)"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(val)"
"Whitespace( )"
"Identifier(c)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(str)"
"VectorOpen([)"
"Identifier(i)"
"VectorClose(])"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"NumberLiteral(0xd800)"
"Whitespace( )"
"Operator(&&)"
"Whitespace( )"
"Identifier(c)"
"Whitespace( )"
"Operator(<=)"
"Whitespace( )"
"NumberLiteral(0xdbff)"
"Whitespace( )"
"Operator(&&)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(i)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(<)"
"Whitespace( )"
"Identifier(str)"
"Operator(.)"
"Identifier(length)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Keyword(var)"
"Whitespace( )"
"Identifier(cn)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(str)"
"VectorOpen([)"
"Identifier(i)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"VectorClose(])"
"Whitespace( )"
"Keyword(as)"
"Whitespace( )"
"Identifier(u32)"
"NewLine(\n\n)"
"Whitespace(      )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(cn)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"NumberLiteral(0xdc00)"
"Whitespace( )"
"Operator(&&)"
"Whitespace( )"
"Identifier(cn)"
"Whitespace( )"
"Operator(<=)"
"Whitespace( )"
"NumberLiteral(0xdfff)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(        )"
"Keyword(var)"
"Whitespace( )"
"Identifier(pt)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(-)"
"Whitespace( )"
"NumberLiteral(0xd800)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(*)"
"Whitespace( )"
"NumberLiteral(0x400)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"Identifier(cn)"
"Whitespace( )"
"Operator(-)"
"Whitespace( )"
"NumberLiteral(0xdc00)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x10000)"
"NewLine(\n\n)"
"Whitespace(        )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0xf0)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(pt)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(        )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0x80)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(pt)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(%)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(        )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0x80)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(pt)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(%)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(        )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0x80)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"Identifier(pt)"
"Whitespace( )"
"Operator(%)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(        )"
"Identifier(i)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(i)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x2)"
"NewLine(\n)"
"Whitespace(        )"
"Keyword(continue)"
"NewLine(\n)"
"Whitespace(      )"
"CurlyBracesClose(})"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"NumberLiteral(0x800)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0xe0)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0x80)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"Whitespace( )"
"Operator(%)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0x80)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"Identifier(c)"
"Whitespace( )"
"Operator(%)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"Whitespace( )"
"Keyword(else)"
"Whitespace( )"
"Keyword(if)"
"Whitespace( )"
"ParenthesesOpen(()"
"Identifier(c)"
"Whitespace( )"
"Operator(>=)"
"Whitespace( )"
"NumberLiteral(0x80)"
"ParenthesesClose())"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0xc0)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"Identifier(c)"
"Whitespace( )"
"Operator(/)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0x80)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"Identifier(c)"
"Whitespace( )"
"Operator(%)"
"Whitespace( )"
"NumberLiteral(0x40)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"Whitespace( )"
"Keyword(else)"
"Whitespace( )"
"CurlyBracesOpen({)"
"NewLine(\n)"
"Whitespace(      )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"Identifier(c)"
"ParenthesesClose())"
"NewLine(\n)"
"Whitespace(    )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(    )"
"Identifier(i)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(i)"
"Whitespace( )"
"Operator(+)"
"Whitespace( )"
"NumberLiteral(0x1)"
"NewLine(\n\n)"
"Whitespace(    )"
"Keyword(continue)"
"NewLine(\n)"
"Whitespace(  )"
"CurlyBracesClose(})"
"NewLine(\n\n)"
"Whitespace(  )"
"LineComment(// make it a null terminated string\n)"
"Whitespace(  )"
"Identifier(j)"
"Whitespace( )"
"Operator(=)"
"Whitespace( )"
"Identifier(push)"
"ParenthesesOpen(()"
"Identifier(j)"
"Comma(,)"
"Whitespace( )"
"Identifier(out)"
"Comma(,)"
"Whitespace( )"
"NumberLiteral(0x0)"
"ParenthesesClose())"
"NewLine(\n\n)"
"Whitespace(  )"
"Identifier(out)"
"NewLine(\n)"
"CurlyBracesClose(})"
"EndOfFile"